// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Photo {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBUserPhoto__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserPhoto, global::hdsense.PBUserPhoto.Builder> internal__static_hdsense_PBUserPhoto__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBUserPhotoList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserPhotoList, global::hdsense.PBUserPhotoList.Builder> internal__static_hdsense_PBUserPhotoList__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Photo() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtQaG90by5wcm90bxIHaGRzZW5zZRoPR2FtZUJhc2ljLnByb3RvIq4BCgtQ" + 
          "QlVzZXJQaG90bxIOCgZ1c2VySWQYASABKAkSDwoHcGhvdG9JZBgCIAEoCRIT" + 
          "Cgt1c2VyUGhvdG9JZBgDIAEoCRILCgN1cmwYBCACKAkSDAoEbmFtZRgFIAEo" + 
          "CRISCgpjcmVhdGVEYXRlGAYgASgFEgwKBHRhZ3MYByADKAkSDQoFdXNhZ2UY" + 
          "CCABKAUSDQoFd2lkdGgYCSABKAISDgoGaGVpZ2h0GAogASgCIkoKD1BCVXNl" + 
          "clBob3RvTGlzdBIOCgZ1c2VySWQYASACKAkSJwoJcGhvdG9MaXN0GAIgAygL" + 
          "MhQuaGRzZW5zZS5QQlVzZXJQaG90byo8CgxQQlBob3RvVXNhZ2USCQoFQkVH" + 
          "SU4QABIMCghGT1JfRFJBVxABEgoKBkZPUl9QUxACEgcKA0VORBADQjYKJ2Nv" + 
          "bS5oZHNlbnNlLm5ldHdvcmsuZ2FtZS5wcm90b2NvbC5tb2RlbEILUGhvdG9Q" + 
          "cm90b3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBUserPhoto__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBUserPhoto__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserPhoto, global::hdsense.PBUserPhoto.Builder>(internal__static_hdsense_PBUserPhoto__Descriptor,
                new string[] { "UserId", "PhotoId", "UserPhotoId", "Url", "Name", "CreateDate", "Tags", "Usage", "Width", "Height", });
        internal__static_hdsense_PBUserPhotoList__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBUserPhotoList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserPhotoList, global::hdsense.PBUserPhotoList.Builder>(internal__static_hdsense_PBUserPhotoList__Descriptor,
                new string[] { "UserId", "PhotoList", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::hdsense.GameBasic.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PBPhotoUsage {
    BEGIN = 0,
    FOR_DRAW = 1,
    FOR_PS = 2,
    END = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserPhoto : pb::GeneratedMessage<PBUserPhoto, PBUserPhoto.Builder> {
    private PBUserPhoto() { }
    private static readonly PBUserPhoto defaultInstance = new PBUserPhoto().MakeReadOnly();
    private static readonly string[] _pBUserPhotoFieldNames = new string[] { "createDate", "height", "name", "photoId", "tags", "url", "usage", "userId", "userPhotoId", "width" };
    private static readonly uint[] _pBUserPhotoFieldTags = new uint[] { 48, 85, 42, 18, 58, 34, 64, 10, 26, 77 };
    public static PBUserPhoto DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserPhoto DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserPhoto ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Photo.internal__static_hdsense_PBUserPhoto__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserPhoto, PBUserPhoto.Builder> InternalFieldAccessors {
      get { return global::hdsense.Photo.internal__static_hdsense_PBUserPhoto__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int PhotoIdFieldNumber = 2;
    private bool hasPhotoId;
    private string photoId_ = "";
    public bool HasPhotoId {
      get { return hasPhotoId; }
    }
    public string PhotoId {
      get { return photoId_; }
    }
    
    public const int UserPhotoIdFieldNumber = 3;
    private bool hasUserPhotoId;
    private string userPhotoId_ = "";
    public bool HasUserPhotoId {
      get { return hasUserPhotoId; }
    }
    public string UserPhotoId {
      get { return userPhotoId_; }
    }
    
    public const int UrlFieldNumber = 4;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int NameFieldNumber = 5;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int CreateDateFieldNumber = 6;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int TagsFieldNumber = 7;
    private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TagsList {
      get { return pbc::Lists.AsReadOnly(tags_); }
    }
    public int TagsCount {
      get { return tags_.Count; }
    }
    public string GetTags(int index) {
      return tags_[index];
    }
    
    public const int UsageFieldNumber = 8;
    private bool hasUsage;
    private int usage_;
    public bool HasUsage {
      get { return hasUsage; }
    }
    public int Usage {
      get { return usage_; }
    }
    
    public const int WidthFieldNumber = 9;
    private bool hasWidth;
    private float width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public float Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 10;
    private bool hasHeight;
    private float height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public float Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUrl) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserPhotoFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[7], UserId);
      }
      if (hasPhotoId) {
        output.WriteString(2, field_names[3], PhotoId);
      }
      if (hasUserPhotoId) {
        output.WriteString(3, field_names[8], UserPhotoId);
      }
      if (hasUrl) {
        output.WriteString(4, field_names[5], Url);
      }
      if (hasName) {
        output.WriteString(5, field_names[2], Name);
      }
      if (hasCreateDate) {
        output.WriteInt32(6, field_names[0], CreateDate);
      }
      if (tags_.Count > 0) {
        output.WriteStringArray(7, field_names[4], tags_);
      }
      if (hasUsage) {
        output.WriteInt32(8, field_names[6], Usage);
      }
      if (hasWidth) {
        output.WriteFloat(9, field_names[9], Width);
      }
      if (hasHeight) {
        output.WriteFloat(10, field_names[1], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        if (hasPhotoId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PhotoId);
        }
        if (hasUserPhotoId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, UserPhotoId);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Url);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Name);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, CreateDate);
        }
        {
          int dataSize = 0;
          foreach (string element in TagsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * tags_.Count;
        }
        if (hasUsage) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Usage);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeFloatSize(9, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeFloatSize(10, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserPhoto ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserPhoto ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserPhoto ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserPhoto ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserPhoto ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserPhoto ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserPhoto ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserPhoto ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserPhoto ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserPhoto ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserPhoto MakeReadOnly() {
      tags_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserPhoto prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserPhoto, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserPhoto cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserPhoto result;
      
      private PBUserPhoto PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserPhoto original = result;
          result = new PBUserPhoto();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserPhoto MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBUserPhoto.Descriptor; }
      }
      
      public override PBUserPhoto DefaultInstanceForType {
        get { return global::hdsense.PBUserPhoto.DefaultInstance; }
      }
      
      public override PBUserPhoto BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserPhoto) {
          return MergeFrom((PBUserPhoto) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserPhoto other) {
        if (other == global::hdsense.PBUserPhoto.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasPhotoId) {
          PhotoId = other.PhotoId;
        }
        if (other.HasUserPhotoId) {
          UserPhotoId = other.UserPhotoId;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.tags_.Count != 0) {
          result.tags_.Add(other.tags_);
        }
        if (other.HasUsage) {
          Usage = other.Usage;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserPhotoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserPhotoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasPhotoId = input.ReadString(ref result.photoId_);
              break;
            }
            case 26: {
              result.hasUserPhotoId = input.ReadString(ref result.userPhotoId_);
              break;
            }
            case 34: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 42: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 48: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 58: {
              input.ReadStringArray(tag, field_name, result.tags_);
              break;
            }
            case 64: {
              result.hasUsage = input.ReadInt32(ref result.usage_);
              break;
            }
            case 77: {
              result.hasWidth = input.ReadFloat(ref result.width_);
              break;
            }
            case 85: {
              result.hasHeight = input.ReadFloat(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasPhotoId {
        get { return result.hasPhotoId; }
      }
      public string PhotoId {
        get { return result.PhotoId; }
        set { SetPhotoId(value); }
      }
      public Builder SetPhotoId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPhotoId = true;
        result.photoId_ = value;
        return this;
      }
      public Builder ClearPhotoId() {
        PrepareBuilder();
        result.hasPhotoId = false;
        result.photoId_ = "";
        return this;
      }
      
      public bool HasUserPhotoId {
        get { return result.hasUserPhotoId; }
      }
      public string UserPhotoId {
        get { return result.UserPhotoId; }
        set { SetUserPhotoId(value); }
      }
      public Builder SetUserPhotoId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserPhotoId = true;
        result.userPhotoId_ = value;
        return this;
      }
      public Builder ClearUserPhotoId() {
        PrepareBuilder();
        result.hasUserPhotoId = false;
        result.userPhotoId_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> TagsList {
        get { return PrepareBuilder().tags_; }
      }
      public int TagsCount {
        get { return result.TagsCount; }
      }
      public string GetTags(int index) {
        return result.GetTags(index);
      }
      public Builder SetTags(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tags_[index] = value;
        return this;
      }
      public Builder AddTags(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tags_.Add(value);
        return this;
      }
      public Builder AddRangeTags(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.tags_.Add(values);
        return this;
      }
      public Builder ClearTags() {
        PrepareBuilder();
        result.tags_.Clear();
        return this;
      }
      
      public bool HasUsage {
        get { return result.hasUsage; }
      }
      public int Usage {
        get { return result.Usage; }
        set { SetUsage(value); }
      }
      public Builder SetUsage(int value) {
        PrepareBuilder();
        result.hasUsage = true;
        result.usage_ = value;
        return this;
      }
      public Builder ClearUsage() {
        PrepareBuilder();
        result.hasUsage = false;
        result.usage_ = 0;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public float Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(float value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0F;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public float Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(float value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0F;
        return this;
      }
    }
    static PBUserPhoto() {
      object.ReferenceEquals(global::hdsense.Photo.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserPhotoList : pb::GeneratedMessage<PBUserPhotoList, PBUserPhotoList.Builder> {
    private PBUserPhotoList() { }
    private static readonly PBUserPhotoList defaultInstance = new PBUserPhotoList().MakeReadOnly();
    private static readonly string[] _pBUserPhotoListFieldNames = new string[] { "photoList", "userId" };
    private static readonly uint[] _pBUserPhotoListFieldTags = new uint[] { 18, 10 };
    public static PBUserPhotoList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserPhotoList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserPhotoList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Photo.internal__static_hdsense_PBUserPhotoList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserPhotoList, PBUserPhotoList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Photo.internal__static_hdsense_PBUserPhotoList__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int PhotoListFieldNumber = 2;
    private pbc::PopsicleList<global::hdsense.PBUserPhoto> photoList_ = new pbc::PopsicleList<global::hdsense.PBUserPhoto>();
    public scg::IList<global::hdsense.PBUserPhoto> PhotoListList {
      get { return photoList_; }
    }
    public int PhotoListCount {
      get { return photoList_.Count; }
    }
    public global::hdsense.PBUserPhoto GetPhotoList(int index) {
      return photoList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        foreach (global::hdsense.PBUserPhoto element in PhotoListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserPhotoListFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[1], UserId);
      }
      if (photoList_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], photoList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        foreach (global::hdsense.PBUserPhoto element in PhotoListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserPhotoList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserPhotoList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserPhotoList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserPhotoList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserPhotoList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserPhotoList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserPhotoList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserPhotoList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserPhotoList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserPhotoList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserPhotoList MakeReadOnly() {
      photoList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserPhotoList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserPhotoList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserPhotoList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserPhotoList result;
      
      private PBUserPhotoList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserPhotoList original = result;
          result = new PBUserPhotoList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserPhotoList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBUserPhotoList.Descriptor; }
      }
      
      public override PBUserPhotoList DefaultInstanceForType {
        get { return global::hdsense.PBUserPhotoList.DefaultInstance; }
      }
      
      public override PBUserPhotoList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserPhotoList) {
          return MergeFrom((PBUserPhotoList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserPhotoList other) {
        if (other == global::hdsense.PBUserPhotoList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.photoList_.Count != 0) {
          result.photoList_.Add(other.photoList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserPhotoListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserPhotoListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.photoList_, global::hdsense.PBUserPhoto.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBUserPhoto> PhotoListList {
        get { return PrepareBuilder().photoList_; }
      }
      public int PhotoListCount {
        get { return result.PhotoListCount; }
      }
      public global::hdsense.PBUserPhoto GetPhotoList(int index) {
        return result.GetPhotoList(index);
      }
      public Builder SetPhotoList(int index, global::hdsense.PBUserPhoto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.photoList_[index] = value;
        return this;
      }
      public Builder SetPhotoList(int index, global::hdsense.PBUserPhoto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.photoList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPhotoList(global::hdsense.PBUserPhoto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.photoList_.Add(value);
        return this;
      }
      public Builder AddPhotoList(global::hdsense.PBUserPhoto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.photoList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePhotoList(scg::IEnumerable<global::hdsense.PBUserPhoto> values) {
        PrepareBuilder();
        result.photoList_.Add(values);
        return this;
      }
      public Builder ClearPhotoList() {
        PrepareBuilder();
        result.photoList_.Clear();
        return this;
      }
    }
    static PBUserPhotoList() {
      object.ReferenceEquals(global::hdsense.Photo.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
