// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Draw {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBLayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLayer, global::hdsense.PBLayer.Builder> internal__static_hdsense_PBLayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBDraw__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDraw, global::hdsense.PBDraw.Builder> internal__static_hdsense_PBDraw__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBFeedTimes__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFeedTimes, global::hdsense.PBFeedTimes.Builder> internal__static_hdsense_PBFeedTimes__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBCommentInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBCommentInfo, global::hdsense.PBCommentInfo.Builder> internal__static_hdsense_PBCommentInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBLearnDraw__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLearnDraw, global::hdsense.PBLearnDraw.Builder> internal__static_hdsense_PBLearnDraw__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBLabelInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLabelInfo, global::hdsense.PBLabelInfo.Builder> internal__static_hdsense_PBLabelInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBFeed__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFeed, global::hdsense.PBFeed.Builder> internal__static_hdsense_PBFeed__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBPoint__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBPoint, global::hdsense.PBPoint.Builder> internal__static_hdsense_PBPoint__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBColor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBColor, global::hdsense.PBColor.Builder> internal__static_hdsense_PBColor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBNoCompressDrawAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBNoCompressDrawAction, global::hdsense.PBNoCompressDrawAction.Builder> internal__static_hdsense_PBNoCompressDrawAction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBNoCompressDrawData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBNoCompressDrawData, global::hdsense.PBNoCompressDrawData.Builder> internal__static_hdsense_PBNoCompressDrawData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBDrawBgGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawBgGroup, global::hdsense.PBDrawBgGroup.Builder> internal__static_hdsense_PBDrawBgGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBDrawBgMeta__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawBgMeta, global::hdsense.PBDrawBgMeta.Builder> internal__static_hdsense_PBDrawBgMeta__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBImageShapeGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBImageShapeGroup, global::hdsense.PBImageShapeGroup.Builder> internal__static_hdsense_PBImageShapeGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBImageShapeGroupMeta__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBImageShapeGroupMeta, global::hdsense.PBImageShapeGroupMeta.Builder> internal__static_hdsense_PBImageShapeGroupMeta__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBHotWord__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBHotWord, global::hdsense.PBHotWord.Builder> internal__static_hdsense_PBHotWord__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBHotWordList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBHotWordList, global::hdsense.PBHotWordList.Builder> internal__static_hdsense_PBHotWordList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBWallOpus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBWallOpus, global::hdsense.PBWallOpus.Builder> internal__static_hdsense_PBWallOpus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBWall__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBWall, global::hdsense.PBWall.Builder> internal__static_hdsense_PBWall__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBRect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBRect, global::hdsense.PBRect.Builder> internal__static_hdsense_PBRect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBFrame__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFrame, global::hdsense.PBFrame.Builder> internal__static_hdsense_PBFrame__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBFrameList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFrameList, global::hdsense.PBFrameList.Builder> internal__static_hdsense_PBFrameList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBLayout__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLayout, global::hdsense.PBLayout.Builder> internal__static_hdsense_PBLayout__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBLayoutList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLayoutList, global::hdsense.PBLayoutList.Builder> internal__static_hdsense_PBLayoutList__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Draw() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpEcmF3LnByb3RvEgdoZHNlbnNlGg9HYW1lQmFzaWMucHJvdG8aE0dhbWVD" + 
          "b25zdGFudHMucHJvdG8aClNpbmcucHJvdG8iTQoHUEJMYXllchILCgN0YWcY" + 
          "ASACKAUSFQoNcmVjdENvbXBvbmVudBgCIAMoAhIQCgVhbHBoYRgDIAEoAjoB" + 
          "MRIMCgRuYW1lGAQgASgJIssCCgZQQkRyYXcSDgoGdXNlcklkGAEgAigJEgwK" + 
          "BHdvcmQYAiACKAkSDQoFbGV2ZWwYAyACKAUSEAoIbGFuZ3VhZ2UYBCACKAUS" + 
          "EgoKY3JlYXRlRGF0ZRgFIAEoBRIQCghuaWNrTmFtZRgGIAEoCRIOCgZhdmF0" + 
          "YXIYByABKAkSDgoGZ2VuZGVyGAggASgIEhIKB3ZlcnNpb24YCSABKAU6ATAS" + 
          "JwoIZHJhd0RhdGEYCiADKAsyFS5oZHNlbnNlLlBCRHJhd0FjdGlvbhIOCgZv" + 
          "cHVzSWQYCyABKAkSDQoFc2NvcmUYDCABKAUSGgoMaXNDb21wcmVzc2VkGBMg" + 
          "ASgIOgR0cnVlEiMKCmNhbnZhc1NpemUYFSABKAsyDy5oZHNlbnNlLlBCU2l6" + 
          "ZRIfCgVsYXllchgWIAMoCzIQLmhkc2Vuc2UuUEJMYXllciIqCgtQQkZlZWRU" + 
          "aW1lcxIMCgR0eXBlGAEgAigFEg0KBXZhbHVlGAIgAigFIoUBCg1QQkNvbW1l" + 
          "bnRJbmZvEgwKBHR5cGUYASACKAUSDwoHY29tbWVudBgCIAEoCRIQCghhY3Rp" + 
          "b25JZBgDIAIoCRIUCgxhY3Rpb25Vc2VySWQYBCACKAkSFgoOYWN0aW9uTmlj" + 
          "a05hbWUYBSABKAkSFQoNYWN0aW9uU3VtbWFyeRgGIAEoCSJPCgtQQkxlYXJu" + 
          "RHJhdxIOCgZvcHVzSWQYASACKAkSDAoEdHlwZRgCIAEoBRINCgVwcmljZRgD" + 
          "IAEoBRITCgtib3VnaHRDb3VudBgEIAEoBSJ6CgtQQkxhYmVsSW5mbxIeCgVm" + 
          "cmFtZRgBIAEoCzIPLmhkc2Vuc2UuUEJSZWN0EhEKCXRleHRDb2xvchgEIAEo" + 
          "BRIQCgh0ZXh0Rm9udBgFIAEoAhINCgVzdHlsZRgUIAEoBRIXCg90ZXh0U3Ry" + 
          "b2tlQ29sb3IYFSABKAUixQwKBlBCRmVlZBIOCgZmZWVkSWQYASACKAkSDgoG" + 
          "dXNlcklkGAIgAigJEhIKCmFjdGlvblR5cGUYAyACKAUSEgoKY3JlYXRlRGF0" + 
          "ZRgEIAIoBRISCgpkZXZpY2VUeXBlGAUgASgFEhIKCmRldmljZU5hbWUYBiAB" + 
          "KAkSDgoGZ2FtZUlkGAcgASgJEi0KCGNhdGVnb3J5GAggASgOMhsuaGRzZW5z" + 
          "ZS5QQk9wdXNDYXRlZ29yeVR5cGUSKQoIc29kb1R5cGUYCSABKA4yFy5oZHNl" + 
          "bnNlLlBCT3B1c1NvZG9UeXBlEhYKDmlzV2l0aEFwcEltYWdlGBAgASgIEhAK" + 
          "CG5pY2tOYW1lGBUgASgJEg4KBmF2YXRhchgWIAEoCRIOCgZnZW5kZXIYFyAB" + 
          "KAgSEQoJc2lnbmF0dXJlGBggASgJEgsKA3ZpcBgZIAEoBRIQCghsb2NhdGlv" + 
          "bhgaIAEoCRIhCghkcmF3RGF0YRgfIAEoCzIPLmhkc2Vuc2UuUEJEcmF3EhQK" + 
          "DHRhcmdldFVzZXJJZBggIAEoCRIaChJ0YXJnZXRVc2VyTmlja05hbWUYISAB" + 
          "KAkSFAoMaGlzdG9yeVNjb3JlGCIgASgBEhAKCG9wdXNEZXNjGCMgASgJEhMK" + 
          "C2RyYXdEYXRhVXJsGCQgASgJEgwKBHRhZ3MYJSADKAkSEQoJc3BlbmRUaW1l" + 
          "GCYgASgFEg4KBm9wdXNJZBgpIAEoCRIRCglpc0NvcnJlY3QYKiABKAgSDQoF" + 
          "c2NvcmUYKyABKAUSEgoKZ3Vlc3NXb3JkcxgsIAMoCRISCgpvcHVzU3RhdHVz" + 
          "GC0gASgFEg8KB2NvbW1lbnQYMyABKAkSKwoLY29tbWVudEluZm8YNCABKAsy" + 
          "Fi5oZHNlbnNlLlBCQ29tbWVudEluZm8SLgoKY2FtZXJhUGFyYRg3IAEoCzIa" + 
          "Lmhkc2Vuc2UuUEJDYW1lcmFQYXJhbWV0ZXISEgoKbWF0Y2hUaW1lcxg9IAEo" + 
          "BRIUCgxjb3JyZWN0VGltZXMYPiABKAUSEgoKZ3Vlc3NUaW1lcxg/IAEoBRIU" + 
          "Cgxjb21tZW50VGltZXMYQCABKAUSJwoJZmVlZFRpbWVzGEEgAygLMhQuaGRz" + 
          "ZW5zZS5QQkZlZWRUaW1lcxIZChFvcHVzQ3JlYXRvclVzZXJJZBhHIAEoCRIb" + 
          "ChNvcHVzQ3JlYXRvck5pY2tOYW1lGEggASgJEhkKEW9wdXNDcmVhdG9yR2Vu" + 
          "ZGVyGEkgASgIEhkKEW9wdXNDcmVhdG9yQXZhdGFyGEogASgJEhAKCG9wdXNX" + 
          "b3JkGFEgASgJEhEKCW9wdXNJbWFnZRhSIAEoCRIWCg5vcHVzVGh1bWJJbWFn" + 
          "ZRhTIAEoCRIPCgdkYXRhVXJsGFQgASgJEg0KBXFyVXJsGFUgASgJEhIKCmNv" + 
          "bnRlc3RVcmwYWCABKAkSFgoOY29udGVzdENvbW1lbnQYWSABKAkSEwoLY29u" + 
          "dGVzdE5hbWUYWiABKAkSEQoJY29udGVzdElkGFsgASgJEhEKCXZvdGVUaW1l" + 
          "cxhcIAEoBRIUCgxjb250ZXN0U2NvcmUYXSABKAESJQoIcmFua0luZm8YXiAD" + 
          "KAsyEy5oZHNlbnNlLlBCT3B1c1JhbmsSEQoJcmFua0luVG9wGF8gASgFEhAK" + 
          "CHJhbmtOYW1lGGAgASgJEhcKDGFjdGl2aXR5VHlwZRhhIAEoBToBMBInCgls" + 
          "ZWFybkRyYXcYZCABKAsyFC5oZHNlbnNlLlBCTGVhcm5EcmF3EiEKBHNpbmcY" + 
          "ZSABKAsyEy5oZHNlbnNlLlBCU2luZ09wdXMSFgoOb3JpZ2luYWxTdGF0dXMY" + 
          "aiABKAUSEwoLcHJpbnRTdGF0dXMYayABKAUSLAoNZGVzY0xhYmVsSW5mbxjI" + 
          "ASABKAsyFC5oZHNlbnNlLlBCTGFiZWxJbmZvEiQKCmNhbnZhc1NpemUYyQEg" + 
          "ASgLMg8uaGRzZW5zZS5QQlNpemUSJQoIb3B1c1RhZ3MYzQEgAygLMhIuaGRz" + 
          "ZW5zZS5QQlNvZG9UYWcSEwoKb3B1c1RhZ0lkcxjOASADKAkSFAoLYWxidW1O" + 
          "dW1iZXIY0gEgASgFEiEKBmFsYnVtcxjTASADKAsyEC5oZHNlbnNlLlBCQWxi" + 
          "dW0iHwoHUEJQb2ludBIJCgF4GAEgAigCEgkKAXkYAiACKAIiQgoHUEJDb2xv" + 
          "chILCgNyZWQYASACKAISDAoEYmx1ZRgCIAIoAhINCgVncmVlbhgDIAIoAhIN" + 
          "CgVhbHBoYRgEIAIoAiLCAgoWUEJOb0NvbXByZXNzRHJhd0FjdGlvbhIMCgR0" + 
          "eXBlGAEgAigFEh8KBXBvaW50GAIgAygLMhAuaGRzZW5zZS5QQlBvaW50Eh8K" + 
          "BWNvbG9yGAMgASgLMhAuaGRzZW5zZS5QQkNvbG9yEg0KBXdpZHRoGAQgASgC" + 
          "Eg8KB3BlblR5cGUYBSABKAUSEQoJc2hhcGVUeXBlGAYgASgFEhUKDXJlY3RD" + 
          "b21wb25lbnQYByADKAISIwoKY2FudmFzU2l6ZRgIIAEoCzIPLmhkc2Vuc2Uu" + 
          "UEJTaXplEg4KBnBvaW50WBgLIAMoAhIOCgZwb2ludFkYDCADKAISEAoIcmdi" + 
          "Q29sb3IYFCABKA0SCwoDcmVkGBUgASgCEgwKBGJsdWUYFiABKAISDQoFZ3Jl" + 
          "ZW4YFyABKAISDQoFYWxwaGEYGCABKAIirgIKFFBCTm9Db21wcmVzc0RyYXdE" + 
          "YXRhEjcKDmRyYXdBY3Rpb25MaXN0GAEgAygLMh8uaGRzZW5zZS5QQk5vQ29t" + 
          "cHJlc3NEcmF3QWN0aW9uEhIKB3ZlcnNpb24YAiABKAU6ATASIwoKY2FudmFz" + 
          "U2l6ZRgEIAEoCzIPLmhkc2Vuc2UuUEJTaXplEi4KD2RyYXdBY3Rpb25MaXN0" + 
          "MhgFIAMoCzIVLmhkc2Vuc2UuUEJEcmF3QWN0aW9uEiwKCmRyYXdUb1VzZXIY" + 
          "BiABKAsyGC5oZHNlbnNlLlBCVXNlckJhc2ljSW5mbxIQCghvcHVzRGVzYxgH" + 
          "IAEoCRITCgtiZ0ltYWdlTmFtZRgIIAEoCRIfCgVsYXllchgJIAMoCzIQLmhk" + 
          "c2Vuc2UuUEJMYXllciJtCg1QQkRyYXdCZ0dyb3VwEg8KB2dyb3VwSWQYASAC" + 
          "KAUSIgoHZHJhd0JncxgCIAMoCzIRLmhkc2Vuc2UuUEJEcmF3QmcSJwoEbmFt" + 
          "ZRgDIAMoCzIZLmhkc2Vuc2UuUEJMb2NhbGl6ZVN0cmluZyI7CgxQQkRyYXdC" + 
          "Z01ldGESKwoLZHJhd0JnR3JvdXAYASADKAsyFi5oZHNlbnNlLlBCRHJhd0Jn" + 
          "R3JvdXAiaQoRUEJJbWFnZVNoYXBlR3JvdXASDwoHZ3JvdXBJZBgBIAIoBRIs" + 
          "Cglncm91cE5hbWUYAiADKAsyGS5oZHNlbnNlLlBCTG9jYWxpemVTdHJpbmcS" + 
          "FQoJc2hhcGVUeXBlGAMgAygFQgIQASJMChVQQkltYWdlU2hhcGVHcm91cE1l" + 
          "dGESMwoPaW1hZ2VTaGFwZUdyb3VwGAEgAygLMhouaGRzZW5zZS5QQkltYWdl" + 
          "U2hhcGVHcm91cCJLCglQQkhvdFdvcmQSDgoGd29yZElkGAEgAigJEgwKBHdv" + 
          "cmQYAiACKAkSEAoFY29pbnMYAyABKAU6ATASDgoGc291cmNlGAogASgJIjIK" + 
          "DVBCSG90V29yZExpc3QSIQoFd29yZHMYASADKAsyEi5oZHNlbnNlLlBCSG90" + 
          "V29yZCJeCgpQQldhbGxPcHVzEhAKCGlkT25XYWxsGAEgAigFEh0KBG9wdXMY" + 
          "AiABKAsyDy5oZHNlbnNlLlBCRmVlZBIfCgVmcmFtZRgDIAEoCzIQLmhkc2Vu" + 
          "c2UuUEJGcmFtZSKPAQoGUEJXYWxsEg4KBndhbGxJZBgBIAIoCRIhCgR0eXBl" + 
          "GAIgAigOMhMuaGRzZW5zZS5QQldhbGxUeXBlEg4KBnVzZXJJZBgDIAIoCRIM" + 
          "CgRuYW1lGAYgASgJEiIKB2NvbnRlbnQYByABKAsyES5oZHNlbnNlLlBCTGF5" + 
          "b3V0EhAKCG11c2ljVXJsGAogASgJIj0KBlBCUmVjdBIJCgF4GAsgASgFEgkK" + 
          "AXkYDCABKAUSDQoFd2lkdGgYDSABKAUSDgoGaGVpZ2h0GA4gASgFIpkBCgdQ" + 
          "QkZyYW1lEg8KB2ZyYW1lSWQYASACKAUSDAoEdHlwZRgCIAEoBRIQCghpbWFn" + 
          "ZVVybBgKIAEoCRInCg5vcHVzSXBob25lUmVjdBgNIAEoCzIPLmhkc2Vuc2Uu" + 
          "UEJSZWN0EiUKDG9wdXNJcGFkUmVjdBgOIAEoCzIPLmhkc2Vuc2UuUEJSZWN0" + 
          "Eg0KBXByaWNlGBIgASgFIi8KC1BCRnJhbWVMaXN0EiAKBmZyYW1lcxgBIAMo" + 
          "CzIQLmhkc2Vuc2UuUEJGcmFtZSKJAQoIUEJMYXlvdXQSEAoIbGF5b3V0SWQY" + 
          "ASACKAUSDAoEbmFtZRgCIAEoCRITCgtkaXNwbGF5TW9kZRgDIAEoBRInCgp3" + 
          "YWxsT3B1c2VzGAUgAygLMhMuaGRzZW5zZS5QQldhbGxPcHVzEhAKCGltYWdl" + 
          "VXJsGAcgASgJEg0KBXByaWNlGBIgASgFIjIKDFBCTGF5b3V0TGlzdBIiCgds" + 
          "YXlvdXRzGAEgAygLMhEuaGRzZW5zZS5QQkxheW91dEI1Cidjb20uaGRzZW5z" + 
          "ZS5uZXR3b3JrLmdhbWUucHJvdG9jb2wubW9kZWxCCkRyYXdQcm90b3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBLayer__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBLayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLayer, global::hdsense.PBLayer.Builder>(internal__static_hdsense_PBLayer__Descriptor,
                new string[] { "Tag", "RectComponent", "Alpha", "Name", });
        internal__static_hdsense_PBDraw__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBDraw__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDraw, global::hdsense.PBDraw.Builder>(internal__static_hdsense_PBDraw__Descriptor,
                new string[] { "UserId", "Word", "Level", "Language", "CreateDate", "NickName", "Avatar", "Gender", "Version", "DrawData", "OpusId", "Score", "IsCompressed", "CanvasSize", "Layer", });
        internal__static_hdsense_PBFeedTimes__Descriptor = Descriptor.MessageTypes[2];
        internal__static_hdsense_PBFeedTimes__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFeedTimes, global::hdsense.PBFeedTimes.Builder>(internal__static_hdsense_PBFeedTimes__Descriptor,
                new string[] { "Type", "Value", });
        internal__static_hdsense_PBCommentInfo__Descriptor = Descriptor.MessageTypes[3];
        internal__static_hdsense_PBCommentInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBCommentInfo, global::hdsense.PBCommentInfo.Builder>(internal__static_hdsense_PBCommentInfo__Descriptor,
                new string[] { "Type", "Comment", "ActionId", "ActionUserId", "ActionNickName", "ActionSummary", });
        internal__static_hdsense_PBLearnDraw__Descriptor = Descriptor.MessageTypes[4];
        internal__static_hdsense_PBLearnDraw__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLearnDraw, global::hdsense.PBLearnDraw.Builder>(internal__static_hdsense_PBLearnDraw__Descriptor,
                new string[] { "OpusId", "Type", "Price", "BoughtCount", });
        internal__static_hdsense_PBLabelInfo__Descriptor = Descriptor.MessageTypes[5];
        internal__static_hdsense_PBLabelInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLabelInfo, global::hdsense.PBLabelInfo.Builder>(internal__static_hdsense_PBLabelInfo__Descriptor,
                new string[] { "Frame", "TextColor", "TextFont", "Style", "TextStrokeColor", });
        internal__static_hdsense_PBFeed__Descriptor = Descriptor.MessageTypes[6];
        internal__static_hdsense_PBFeed__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFeed, global::hdsense.PBFeed.Builder>(internal__static_hdsense_PBFeed__Descriptor,
                new string[] { "FeedId", "UserId", "ActionType", "CreateDate", "DeviceType", "DeviceName", "GameId", "Category", "SodoType", "IsWithAppImage", "NickName", "Avatar", "Gender", "Signature", "Vip", "Location", "DrawData", "TargetUserId", "TargetUserNickName", "HistoryScore", "OpusDesc", "DrawDataUrl", "Tags", "SpendTime", "OpusId", "IsCorrect", "Score", "GuessWords", "OpusStatus", "Comment", "CommentInfo", "CameraPara", "MatchTimes", "CorrectTimes", "GuessTimes", "CommentTimes", "FeedTimes", "OpusCreatorUserId", "OpusCreatorNickName", "OpusCreatorGender", "OpusCreatorAvatar", "OpusWord", "OpusImage", "OpusThumbImage", "DataUrl", "QrUrl", "ContestUrl", "ContestComment", "ContestName", "ContestId", "VoteTimes", "ContestScore", "RankInfo", "RankInTop", "RankName", "ActivityType", "LearnDraw", "Sing", "OriginalStatus", "PrintStatus", "DescLabelInfo", "CanvasSize", "OpusTags", "OpusTagIds", "AlbumNumber", "Albums", });
        internal__static_hdsense_PBPoint__Descriptor = Descriptor.MessageTypes[7];
        internal__static_hdsense_PBPoint__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBPoint, global::hdsense.PBPoint.Builder>(internal__static_hdsense_PBPoint__Descriptor,
                new string[] { "X", "Y", });
        internal__static_hdsense_PBColor__Descriptor = Descriptor.MessageTypes[8];
        internal__static_hdsense_PBColor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBColor, global::hdsense.PBColor.Builder>(internal__static_hdsense_PBColor__Descriptor,
                new string[] { "Red", "Blue", "Green", "Alpha", });
        internal__static_hdsense_PBNoCompressDrawAction__Descriptor = Descriptor.MessageTypes[9];
        internal__static_hdsense_PBNoCompressDrawAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBNoCompressDrawAction, global::hdsense.PBNoCompressDrawAction.Builder>(internal__static_hdsense_PBNoCompressDrawAction__Descriptor,
                new string[] { "Type", "Point", "Color", "Width", "PenType", "ShapeType", "RectComponent", "CanvasSize", "PointX", "PointY", "RgbColor", "Red", "Blue", "Green", "Alpha", });
        internal__static_hdsense_PBNoCompressDrawData__Descriptor = Descriptor.MessageTypes[10];
        internal__static_hdsense_PBNoCompressDrawData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBNoCompressDrawData, global::hdsense.PBNoCompressDrawData.Builder>(internal__static_hdsense_PBNoCompressDrawData__Descriptor,
                new string[] { "DrawActionList", "Version", "CanvasSize", "DrawActionList2", "DrawToUser", "OpusDesc", "BgImageName", "Layer", });
        internal__static_hdsense_PBDrawBgGroup__Descriptor = Descriptor.MessageTypes[11];
        internal__static_hdsense_PBDrawBgGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawBgGroup, global::hdsense.PBDrawBgGroup.Builder>(internal__static_hdsense_PBDrawBgGroup__Descriptor,
                new string[] { "GroupId", "DrawBgs", "Name", });
        internal__static_hdsense_PBDrawBgMeta__Descriptor = Descriptor.MessageTypes[12];
        internal__static_hdsense_PBDrawBgMeta__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawBgMeta, global::hdsense.PBDrawBgMeta.Builder>(internal__static_hdsense_PBDrawBgMeta__Descriptor,
                new string[] { "DrawBgGroup", });
        internal__static_hdsense_PBImageShapeGroup__Descriptor = Descriptor.MessageTypes[13];
        internal__static_hdsense_PBImageShapeGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBImageShapeGroup, global::hdsense.PBImageShapeGroup.Builder>(internal__static_hdsense_PBImageShapeGroup__Descriptor,
                new string[] { "GroupId", "GroupName", "ShapeType", });
        internal__static_hdsense_PBImageShapeGroupMeta__Descriptor = Descriptor.MessageTypes[14];
        internal__static_hdsense_PBImageShapeGroupMeta__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBImageShapeGroupMeta, global::hdsense.PBImageShapeGroupMeta.Builder>(internal__static_hdsense_PBImageShapeGroupMeta__Descriptor,
                new string[] { "ImageShapeGroup", });
        internal__static_hdsense_PBHotWord__Descriptor = Descriptor.MessageTypes[15];
        internal__static_hdsense_PBHotWord__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBHotWord, global::hdsense.PBHotWord.Builder>(internal__static_hdsense_PBHotWord__Descriptor,
                new string[] { "WordId", "Word", "Coins", "Source", });
        internal__static_hdsense_PBHotWordList__Descriptor = Descriptor.MessageTypes[16];
        internal__static_hdsense_PBHotWordList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBHotWordList, global::hdsense.PBHotWordList.Builder>(internal__static_hdsense_PBHotWordList__Descriptor,
                new string[] { "Words", });
        internal__static_hdsense_PBWallOpus__Descriptor = Descriptor.MessageTypes[17];
        internal__static_hdsense_PBWallOpus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBWallOpus, global::hdsense.PBWallOpus.Builder>(internal__static_hdsense_PBWallOpus__Descriptor,
                new string[] { "IdOnWall", "Opus", "Frame", });
        internal__static_hdsense_PBWall__Descriptor = Descriptor.MessageTypes[18];
        internal__static_hdsense_PBWall__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBWall, global::hdsense.PBWall.Builder>(internal__static_hdsense_PBWall__Descriptor,
                new string[] { "WallId", "Type", "UserId", "Name", "Content", "MusicUrl", });
        internal__static_hdsense_PBRect__Descriptor = Descriptor.MessageTypes[19];
        internal__static_hdsense_PBRect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBRect, global::hdsense.PBRect.Builder>(internal__static_hdsense_PBRect__Descriptor,
                new string[] { "X", "Y", "Width", "Height", });
        internal__static_hdsense_PBFrame__Descriptor = Descriptor.MessageTypes[20];
        internal__static_hdsense_PBFrame__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFrame, global::hdsense.PBFrame.Builder>(internal__static_hdsense_PBFrame__Descriptor,
                new string[] { "FrameId", "Type", "ImageUrl", "OpusIphoneRect", "OpusIpadRect", "Price", });
        internal__static_hdsense_PBFrameList__Descriptor = Descriptor.MessageTypes[21];
        internal__static_hdsense_PBFrameList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBFrameList, global::hdsense.PBFrameList.Builder>(internal__static_hdsense_PBFrameList__Descriptor,
                new string[] { "Frames", });
        internal__static_hdsense_PBLayout__Descriptor = Descriptor.MessageTypes[22];
        internal__static_hdsense_PBLayout__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLayout, global::hdsense.PBLayout.Builder>(internal__static_hdsense_PBLayout__Descriptor,
                new string[] { "LayoutId", "Name", "DisplayMode", "WallOpuses", "ImageUrl", "Price", });
        internal__static_hdsense_PBLayoutList__Descriptor = Descriptor.MessageTypes[23];
        internal__static_hdsense_PBLayoutList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLayoutList, global::hdsense.PBLayoutList.Builder>(internal__static_hdsense_PBLayoutList__Descriptor,
                new string[] { "Layouts", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::hdsense.GameBasic.Descriptor, 
          global::hdsense.GameConstants.Descriptor, 
          global::hdsense.Sing.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBLayer : pb::GeneratedMessage<PBLayer, PBLayer.Builder> {
    private PBLayer() { }
    private static readonly PBLayer defaultInstance = new PBLayer().MakeReadOnly();
    private static readonly string[] _pBLayerFieldNames = new string[] { "alpha", "name", "rectComponent", "tag" };
    private static readonly uint[] _pBLayerFieldTags = new uint[] { 29, 34, 21, 8 };
    public static PBLayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBLayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBLayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBLayer, PBLayer.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLayer__FieldAccessorTable; }
    }
    
    public const int TagFieldNumber = 1;
    private bool hasTag;
    private int tag_;
    public bool HasTag {
      get { return hasTag; }
    }
    public int Tag {
      get { return tag_; }
    }
    
    public const int RectComponentFieldNumber = 2;
    private pbc::PopsicleList<float> rectComponent_ = new pbc::PopsicleList<float>();
    public scg::IList<float> RectComponentList {
      get { return pbc::Lists.AsReadOnly(rectComponent_); }
    }
    public int RectComponentCount {
      get { return rectComponent_.Count; }
    }
    public float GetRectComponent(int index) {
      return rectComponent_[index];
    }
    
    public const int AlphaFieldNumber = 3;
    private bool hasAlpha;
    private float alpha_ = 1F;
    public bool HasAlpha {
      get { return hasAlpha; }
    }
    public float Alpha {
      get { return alpha_; }
    }
    
    public const int NameFieldNumber = 4;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTag) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBLayerFieldNames;
      if (hasTag) {
        output.WriteInt32(1, field_names[3], Tag);
      }
      if (rectComponent_.Count > 0) {
        output.WriteFloatArray(2, field_names[2], rectComponent_);
      }
      if (hasAlpha) {
        output.WriteFloat(3, field_names[0], Alpha);
      }
      if (hasName) {
        output.WriteString(4, field_names[1], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTag) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Tag);
        }
        {
          int dataSize = 0;
          dataSize = 4 * rectComponent_.Count;
          size += dataSize;
          size += 1 * rectComponent_.Count;
        }
        if (hasAlpha) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Alpha);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBLayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBLayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBLayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBLayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBLayer MakeReadOnly() {
      rectComponent_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBLayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBLayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBLayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBLayer result;
      
      private PBLayer PrepareBuilder() {
        if (resultIsReadOnly) {
          PBLayer original = result;
          result = new PBLayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBLayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBLayer.Descriptor; }
      }
      
      public override PBLayer DefaultInstanceForType {
        get { return global::hdsense.PBLayer.DefaultInstance; }
      }
      
      public override PBLayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBLayer) {
          return MergeFrom((PBLayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBLayer other) {
        if (other == global::hdsense.PBLayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTag) {
          Tag = other.Tag;
        }
        if (other.rectComponent_.Count != 0) {
          result.rectComponent_.Add(other.rectComponent_);
        }
        if (other.HasAlpha) {
          Alpha = other.Alpha;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBLayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBLayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTag = input.ReadInt32(ref result.tag_);
              break;
            }
            case 18:
            case 21: {
              input.ReadFloatArray(tag, field_name, result.rectComponent_);
              break;
            }
            case 29: {
              result.hasAlpha = input.ReadFloat(ref result.alpha_);
              break;
            }
            case 34: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTag {
        get { return result.hasTag; }
      }
      public int Tag {
        get { return result.Tag; }
        set { SetTag(value); }
      }
      public Builder SetTag(int value) {
        PrepareBuilder();
        result.hasTag = true;
        result.tag_ = value;
        return this;
      }
      public Builder ClearTag() {
        PrepareBuilder();
        result.hasTag = false;
        result.tag_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<float> RectComponentList {
        get { return PrepareBuilder().rectComponent_; }
      }
      public int RectComponentCount {
        get { return result.RectComponentCount; }
      }
      public float GetRectComponent(int index) {
        return result.GetRectComponent(index);
      }
      public Builder SetRectComponent(int index, float value) {
        PrepareBuilder();
        result.rectComponent_[index] = value;
        return this;
      }
      public Builder AddRectComponent(float value) {
        PrepareBuilder();
        result.rectComponent_.Add(value);
        return this;
      }
      public Builder AddRangeRectComponent(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.rectComponent_.Add(values);
        return this;
      }
      public Builder ClearRectComponent() {
        PrepareBuilder();
        result.rectComponent_.Clear();
        return this;
      }
      
      public bool HasAlpha {
        get { return result.hasAlpha; }
      }
      public float Alpha {
        get { return result.Alpha; }
        set { SetAlpha(value); }
      }
      public Builder SetAlpha(float value) {
        PrepareBuilder();
        result.hasAlpha = true;
        result.alpha_ = value;
        return this;
      }
      public Builder ClearAlpha() {
        PrepareBuilder();
        result.hasAlpha = false;
        result.alpha_ = 1F;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static PBLayer() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBDraw : pb::GeneratedMessage<PBDraw, PBDraw.Builder> {
    private PBDraw() { }
    private static readonly PBDraw defaultInstance = new PBDraw().MakeReadOnly();
    private static readonly string[] _pBDrawFieldNames = new string[] { "avatar", "canvasSize", "createDate", "drawData", "gender", "isCompressed", "language", "layer", "level", "nickName", "opusId", "score", "userId", "version", "word" };
    private static readonly uint[] _pBDrawFieldTags = new uint[] { 58, 170, 40, 82, 64, 152, 32, 178, 24, 50, 90, 96, 10, 72, 18 };
    public static PBDraw DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBDraw DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBDraw ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBDraw__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBDraw, PBDraw.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBDraw__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int WordFieldNumber = 2;
    private bool hasWord;
    private string word_ = "";
    public bool HasWord {
      get { return hasWord; }
    }
    public string Word {
      get { return word_; }
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int LanguageFieldNumber = 4;
    private bool hasLanguage;
    private int language_;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public int Language {
      get { return language_; }
    }
    
    public const int CreateDateFieldNumber = 5;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int NickNameFieldNumber = 6;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int AvatarFieldNumber = 7;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int GenderFieldNumber = 8;
    private bool hasGender;
    private bool gender_;
    public bool HasGender {
      get { return hasGender; }
    }
    public bool Gender {
      get { return gender_; }
    }
    
    public const int VersionFieldNumber = 9;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int DrawDataFieldNumber = 10;
    private pbc::PopsicleList<global::hdsense.PBDrawAction> drawData_ = new pbc::PopsicleList<global::hdsense.PBDrawAction>();
    public scg::IList<global::hdsense.PBDrawAction> DrawDataList {
      get { return drawData_; }
    }
    public int DrawDataCount {
      get { return drawData_.Count; }
    }
    public global::hdsense.PBDrawAction GetDrawData(int index) {
      return drawData_[index];
    }
    
    public const int OpusIdFieldNumber = 11;
    private bool hasOpusId;
    private string opusId_ = "";
    public bool HasOpusId {
      get { return hasOpusId; }
    }
    public string OpusId {
      get { return opusId_; }
    }
    
    public const int ScoreFieldNumber = 12;
    private bool hasScore;
    private int score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public int Score {
      get { return score_; }
    }
    
    public const int IsCompressedFieldNumber = 19;
    private bool hasIsCompressed;
    private bool isCompressed_ = true;
    public bool HasIsCompressed {
      get { return hasIsCompressed; }
    }
    public bool IsCompressed {
      get { return isCompressed_; }
    }
    
    public const int CanvasSizeFieldNumber = 21;
    private bool hasCanvasSize;
    private global::hdsense.PBSize canvasSize_;
    public bool HasCanvasSize {
      get { return hasCanvasSize; }
    }
    public global::hdsense.PBSize CanvasSize {
      get { return canvasSize_ ?? global::hdsense.PBSize.DefaultInstance; }
    }
    
    public const int LayerFieldNumber = 22;
    private pbc::PopsicleList<global::hdsense.PBLayer> layer_ = new pbc::PopsicleList<global::hdsense.PBLayer>();
    public scg::IList<global::hdsense.PBLayer> LayerList {
      get { return layer_; }
    }
    public int LayerCount {
      get { return layer_.Count; }
    }
    public global::hdsense.PBLayer GetLayer(int index) {
      return layer_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        if (!hasWord) return false;
        if (!hasLevel) return false;
        if (!hasLanguage) return false;
        foreach (global::hdsense.PBDrawAction element in DrawDataList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBLayer element in LayerList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBDrawFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[12], UserId);
      }
      if (hasWord) {
        output.WriteString(2, field_names[14], Word);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[8], Level);
      }
      if (hasLanguage) {
        output.WriteInt32(4, field_names[6], Language);
      }
      if (hasCreateDate) {
        output.WriteInt32(5, field_names[2], CreateDate);
      }
      if (hasNickName) {
        output.WriteString(6, field_names[9], NickName);
      }
      if (hasAvatar) {
        output.WriteString(7, field_names[0], Avatar);
      }
      if (hasGender) {
        output.WriteBool(8, field_names[4], Gender);
      }
      if (hasVersion) {
        output.WriteInt32(9, field_names[13], Version);
      }
      if (drawData_.Count > 0) {
        output.WriteMessageArray(10, field_names[3], drawData_);
      }
      if (hasOpusId) {
        output.WriteString(11, field_names[10], OpusId);
      }
      if (hasScore) {
        output.WriteInt32(12, field_names[11], Score);
      }
      if (hasIsCompressed) {
        output.WriteBool(19, field_names[5], IsCompressed);
      }
      if (hasCanvasSize) {
        output.WriteMessage(21, field_names[1], CanvasSize);
      }
      if (layer_.Count > 0) {
        output.WriteMessageArray(22, field_names[7], layer_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        if (hasWord) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Word);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Language);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, CreateDate);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, NickName);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Avatar);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, Gender);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Version);
        }
        foreach (global::hdsense.PBDrawAction element in DrawDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (hasOpusId) {
          size += pb::CodedOutputStream.ComputeStringSize(11, OpusId);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, Score);
        }
        if (hasIsCompressed) {
          size += pb::CodedOutputStream.ComputeBoolSize(19, IsCompressed);
        }
        if (hasCanvasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, CanvasSize);
        }
        foreach (global::hdsense.PBLayer element in LayerList) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBDraw ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDraw ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDraw ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDraw ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDraw ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDraw ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBDraw ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBDraw ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBDraw ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDraw ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBDraw MakeReadOnly() {
      drawData_.MakeReadOnly();
      layer_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBDraw prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBDraw, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBDraw cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBDraw result;
      
      private PBDraw PrepareBuilder() {
        if (resultIsReadOnly) {
          PBDraw original = result;
          result = new PBDraw();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBDraw MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBDraw.Descriptor; }
      }
      
      public override PBDraw DefaultInstanceForType {
        get { return global::hdsense.PBDraw.DefaultInstance; }
      }
      
      public override PBDraw BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBDraw) {
          return MergeFrom((PBDraw) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBDraw other) {
        if (other == global::hdsense.PBDraw.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasWord) {
          Word = other.Word;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.drawData_.Count != 0) {
          result.drawData_.Add(other.drawData_);
        }
        if (other.HasOpusId) {
          OpusId = other.OpusId;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasIsCompressed) {
          IsCompressed = other.IsCompressed;
        }
        if (other.HasCanvasSize) {
          MergeCanvasSize(other.CanvasSize);
        }
        if (other.layer_.Count != 0) {
          result.layer_.Add(other.layer_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBDrawFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBDrawFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasWord = input.ReadString(ref result.word_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 32: {
              result.hasLanguage = input.ReadInt32(ref result.language_);
              break;
            }
            case 40: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 50: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 58: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 64: {
              result.hasGender = input.ReadBool(ref result.gender_);
              break;
            }
            case 72: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.drawData_, global::hdsense.PBDrawAction.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              result.hasOpusId = input.ReadString(ref result.opusId_);
              break;
            }
            case 96: {
              result.hasScore = input.ReadInt32(ref result.score_);
              break;
            }
            case 152: {
              result.hasIsCompressed = input.ReadBool(ref result.isCompressed_);
              break;
            }
            case 170: {
              global::hdsense.PBSize.Builder subBuilder = global::hdsense.PBSize.CreateBuilder();
              if (result.hasCanvasSize) {
                subBuilder.MergeFrom(CanvasSize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CanvasSize = subBuilder.BuildPartial();
              break;
            }
            case 178: {
              input.ReadMessageArray(tag, field_name, result.layer_, global::hdsense.PBLayer.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasWord {
        get { return result.hasWord; }
      }
      public string Word {
        get { return result.Word; }
        set { SetWord(value); }
      }
      public Builder SetWord(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWord = true;
        result.word_ = value;
        return this;
      }
      public Builder ClearWord() {
        PrepareBuilder();
        result.hasWord = false;
        result.word_ = "";
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public int Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(int value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public bool Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(bool value) {
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = false;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBDrawAction> DrawDataList {
        get { return PrepareBuilder().drawData_; }
      }
      public int DrawDataCount {
        get { return result.DrawDataCount; }
      }
      public global::hdsense.PBDrawAction GetDrawData(int index) {
        return result.GetDrawData(index);
      }
      public Builder SetDrawData(int index, global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_[index] = value;
        return this;
      }
      public Builder SetDrawData(int index, global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_.Add(value);
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawData(scg::IEnumerable<global::hdsense.PBDrawAction> values) {
        PrepareBuilder();
        result.drawData_.Add(values);
        return this;
      }
      public Builder ClearDrawData() {
        PrepareBuilder();
        result.drawData_.Clear();
        return this;
      }
      
      public bool HasOpusId {
        get { return result.hasOpusId; }
      }
      public string OpusId {
        get { return result.OpusId; }
        set { SetOpusId(value); }
      }
      public Builder SetOpusId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusId = true;
        result.opusId_ = value;
        return this;
      }
      public Builder ClearOpusId() {
        PrepareBuilder();
        result.hasOpusId = false;
        result.opusId_ = "";
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public int Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(int value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      public bool HasIsCompressed {
        get { return result.hasIsCompressed; }
      }
      public bool IsCompressed {
        get { return result.IsCompressed; }
        set { SetIsCompressed(value); }
      }
      public Builder SetIsCompressed(bool value) {
        PrepareBuilder();
        result.hasIsCompressed = true;
        result.isCompressed_ = value;
        return this;
      }
      public Builder ClearIsCompressed() {
        PrepareBuilder();
        result.hasIsCompressed = false;
        result.isCompressed_ = true;
        return this;
      }
      
      public bool HasCanvasSize {
       get { return result.hasCanvasSize; }
      }
      public global::hdsense.PBSize CanvasSize {
        get { return result.CanvasSize; }
        set { SetCanvasSize(value); }
      }
      public Builder SetCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = value;
        return this;
      }
      public Builder SetCanvasSize(global::hdsense.PBSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCanvasSize &&
            result.canvasSize_ != global::hdsense.PBSize.DefaultInstance) {
            result.canvasSize_ = global::hdsense.PBSize.CreateBuilder(result.canvasSize_).MergeFrom(value).BuildPartial();
        } else {
          result.canvasSize_ = value;
        }
        result.hasCanvasSize = true;
        return this;
      }
      public Builder ClearCanvasSize() {
        PrepareBuilder();
        result.hasCanvasSize = false;
        result.canvasSize_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBLayer> LayerList {
        get { return PrepareBuilder().layer_; }
      }
      public int LayerCount {
        get { return result.LayerCount; }
      }
      public global::hdsense.PBLayer GetLayer(int index) {
        return result.GetLayer(index);
      }
      public Builder SetLayer(int index, global::hdsense.PBLayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.layer_[index] = value;
        return this;
      }
      public Builder SetLayer(int index, global::hdsense.PBLayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.layer_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLayer(global::hdsense.PBLayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.layer_.Add(value);
        return this;
      }
      public Builder AddLayer(global::hdsense.PBLayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.layer_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLayer(scg::IEnumerable<global::hdsense.PBLayer> values) {
        PrepareBuilder();
        result.layer_.Add(values);
        return this;
      }
      public Builder ClearLayer() {
        PrepareBuilder();
        result.layer_.Clear();
        return this;
      }
    }
    static PBDraw() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBFeedTimes : pb::GeneratedMessage<PBFeedTimes, PBFeedTimes.Builder> {
    private PBFeedTimes() { }
    private static readonly PBFeedTimes defaultInstance = new PBFeedTimes().MakeReadOnly();
    private static readonly string[] _pBFeedTimesFieldNames = new string[] { "type", "value" };
    private static readonly uint[] _pBFeedTimesFieldTags = new uint[] { 8, 16 };
    public static PBFeedTimes DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBFeedTimes DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBFeedTimes ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFeedTimes__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBFeedTimes, PBFeedTimes.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFeedTimes__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBFeedTimesFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
      if (hasValue) {
        output.WriteInt32(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBFeedTimes ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFeedTimes ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFeedTimes ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFeedTimes ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFeedTimes ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFeedTimes ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBFeedTimes ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBFeedTimes ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBFeedTimes ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFeedTimes ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBFeedTimes MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBFeedTimes prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBFeedTimes, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBFeedTimes cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBFeedTimes result;
      
      private PBFeedTimes PrepareBuilder() {
        if (resultIsReadOnly) {
          PBFeedTimes original = result;
          result = new PBFeedTimes();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBFeedTimes MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBFeedTimes.Descriptor; }
      }
      
      public override PBFeedTimes DefaultInstanceForType {
        get { return global::hdsense.PBFeedTimes.DefaultInstance; }
      }
      
      public override PBFeedTimes BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBFeedTimes) {
          return MergeFrom((PBFeedTimes) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBFeedTimes other) {
        if (other == global::hdsense.PBFeedTimes.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBFeedTimesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBFeedTimesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static PBFeedTimes() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBCommentInfo : pb::GeneratedMessage<PBCommentInfo, PBCommentInfo.Builder> {
    private PBCommentInfo() { }
    private static readonly PBCommentInfo defaultInstance = new PBCommentInfo().MakeReadOnly();
    private static readonly string[] _pBCommentInfoFieldNames = new string[] { "actionId", "actionNickName", "actionSummary", "actionUserId", "comment", "type" };
    private static readonly uint[] _pBCommentInfoFieldTags = new uint[] { 26, 42, 50, 34, 18, 8 };
    public static PBCommentInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBCommentInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBCommentInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBCommentInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBCommentInfo, PBCommentInfo.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBCommentInfo__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int CommentFieldNumber = 2;
    private bool hasComment;
    private string comment_ = "";
    public bool HasComment {
      get { return hasComment; }
    }
    public string Comment {
      get { return comment_; }
    }
    
    public const int ActionIdFieldNumber = 3;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public const int ActionUserIdFieldNumber = 4;
    private bool hasActionUserId;
    private string actionUserId_ = "";
    public bool HasActionUserId {
      get { return hasActionUserId; }
    }
    public string ActionUserId {
      get { return actionUserId_; }
    }
    
    public const int ActionNickNameFieldNumber = 5;
    private bool hasActionNickName;
    private string actionNickName_ = "";
    public bool HasActionNickName {
      get { return hasActionNickName; }
    }
    public string ActionNickName {
      get { return actionNickName_; }
    }
    
    public const int ActionSummaryFieldNumber = 6;
    private bool hasActionSummary;
    private string actionSummary_ = "";
    public bool HasActionSummary {
      get { return hasActionSummary; }
    }
    public string ActionSummary {
      get { return actionSummary_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasActionId) return false;
        if (!hasActionUserId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBCommentInfoFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[5], Type);
      }
      if (hasComment) {
        output.WriteString(2, field_names[4], Comment);
      }
      if (hasActionId) {
        output.WriteString(3, field_names[0], ActionId);
      }
      if (hasActionUserId) {
        output.WriteString(4, field_names[3], ActionUserId);
      }
      if (hasActionNickName) {
        output.WriteString(5, field_names[1], ActionNickName);
      }
      if (hasActionSummary) {
        output.WriteString(6, field_names[2], ActionSummary);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasComment) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Comment);
        }
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ActionId);
        }
        if (hasActionUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ActionUserId);
        }
        if (hasActionNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ActionNickName);
        }
        if (hasActionSummary) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ActionSummary);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBCommentInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBCommentInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBCommentInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBCommentInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBCommentInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBCommentInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBCommentInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBCommentInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBCommentInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBCommentInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBCommentInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBCommentInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBCommentInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBCommentInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBCommentInfo result;
      
      private PBCommentInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBCommentInfo original = result;
          result = new PBCommentInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBCommentInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBCommentInfo.Descriptor; }
      }
      
      public override PBCommentInfo DefaultInstanceForType {
        get { return global::hdsense.PBCommentInfo.DefaultInstance; }
      }
      
      public override PBCommentInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBCommentInfo) {
          return MergeFrom((PBCommentInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBCommentInfo other) {
        if (other == global::hdsense.PBCommentInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasComment) {
          Comment = other.Comment;
        }
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        if (other.HasActionUserId) {
          ActionUserId = other.ActionUserId;
        }
        if (other.HasActionNickName) {
          ActionNickName = other.ActionNickName;
        }
        if (other.HasActionSummary) {
          ActionSummary = other.ActionSummary;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBCommentInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBCommentInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18: {
              result.hasComment = input.ReadString(ref result.comment_);
              break;
            }
            case 26: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
            case 34: {
              result.hasActionUserId = input.ReadString(ref result.actionUserId_);
              break;
            }
            case 42: {
              result.hasActionNickName = input.ReadString(ref result.actionNickName_);
              break;
            }
            case 50: {
              result.hasActionSummary = input.ReadString(ref result.actionSummary_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasComment {
        get { return result.hasComment; }
      }
      public string Comment {
        get { return result.Comment; }
        set { SetComment(value); }
      }
      public Builder SetComment(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasComment = true;
        result.comment_ = value;
        return this;
      }
      public Builder ClearComment() {
        PrepareBuilder();
        result.hasComment = false;
        result.comment_ = "";
        return this;
      }
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
      
      public bool HasActionUserId {
        get { return result.hasActionUserId; }
      }
      public string ActionUserId {
        get { return result.ActionUserId; }
        set { SetActionUserId(value); }
      }
      public Builder SetActionUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionUserId = true;
        result.actionUserId_ = value;
        return this;
      }
      public Builder ClearActionUserId() {
        PrepareBuilder();
        result.hasActionUserId = false;
        result.actionUserId_ = "";
        return this;
      }
      
      public bool HasActionNickName {
        get { return result.hasActionNickName; }
      }
      public string ActionNickName {
        get { return result.ActionNickName; }
        set { SetActionNickName(value); }
      }
      public Builder SetActionNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionNickName = true;
        result.actionNickName_ = value;
        return this;
      }
      public Builder ClearActionNickName() {
        PrepareBuilder();
        result.hasActionNickName = false;
        result.actionNickName_ = "";
        return this;
      }
      
      public bool HasActionSummary {
        get { return result.hasActionSummary; }
      }
      public string ActionSummary {
        get { return result.ActionSummary; }
        set { SetActionSummary(value); }
      }
      public Builder SetActionSummary(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionSummary = true;
        result.actionSummary_ = value;
        return this;
      }
      public Builder ClearActionSummary() {
        PrepareBuilder();
        result.hasActionSummary = false;
        result.actionSummary_ = "";
        return this;
      }
    }
    static PBCommentInfo() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBLearnDraw : pb::GeneratedMessage<PBLearnDraw, PBLearnDraw.Builder> {
    private PBLearnDraw() { }
    private static readonly PBLearnDraw defaultInstance = new PBLearnDraw().MakeReadOnly();
    private static readonly string[] _pBLearnDrawFieldNames = new string[] { "boughtCount", "opusId", "price", "type" };
    private static readonly uint[] _pBLearnDrawFieldTags = new uint[] { 32, 10, 24, 16 };
    public static PBLearnDraw DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBLearnDraw DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBLearnDraw ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLearnDraw__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBLearnDraw, PBLearnDraw.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLearnDraw__FieldAccessorTable; }
    }
    
    public const int OpusIdFieldNumber = 1;
    private bool hasOpusId;
    private string opusId_ = "";
    public bool HasOpusId {
      get { return hasOpusId; }
    }
    public string OpusId {
      get { return opusId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int PriceFieldNumber = 3;
    private bool hasPrice;
    private int price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public int Price {
      get { return price_; }
    }
    
    public const int BoughtCountFieldNumber = 4;
    private bool hasBoughtCount;
    private int boughtCount_;
    public bool HasBoughtCount {
      get { return hasBoughtCount; }
    }
    public int BoughtCount {
      get { return boughtCount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpusId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBLearnDrawFieldNames;
      if (hasOpusId) {
        output.WriteString(1, field_names[1], OpusId);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[3], Type);
      }
      if (hasPrice) {
        output.WriteInt32(3, field_names[2], Price);
      }
      if (hasBoughtCount) {
        output.WriteInt32(4, field_names[0], BoughtCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOpusId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, OpusId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Price);
        }
        if (hasBoughtCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, BoughtCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBLearnDraw ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLearnDraw ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLearnDraw ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLearnDraw ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLearnDraw ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLearnDraw ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBLearnDraw ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBLearnDraw ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBLearnDraw ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLearnDraw ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBLearnDraw MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBLearnDraw prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBLearnDraw, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBLearnDraw cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBLearnDraw result;
      
      private PBLearnDraw PrepareBuilder() {
        if (resultIsReadOnly) {
          PBLearnDraw original = result;
          result = new PBLearnDraw();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBLearnDraw MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBLearnDraw.Descriptor; }
      }
      
      public override PBLearnDraw DefaultInstanceForType {
        get { return global::hdsense.PBLearnDraw.DefaultInstance; }
      }
      
      public override PBLearnDraw BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBLearnDraw) {
          return MergeFrom((PBLearnDraw) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBLearnDraw other) {
        if (other == global::hdsense.PBLearnDraw.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpusId) {
          OpusId = other.OpusId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasBoughtCount) {
          BoughtCount = other.BoughtCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBLearnDrawFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBLearnDrawFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasOpusId = input.ReadString(ref result.opusId_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasPrice = input.ReadInt32(ref result.price_);
              break;
            }
            case 32: {
              result.hasBoughtCount = input.ReadInt32(ref result.boughtCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpusId {
        get { return result.hasOpusId; }
      }
      public string OpusId {
        get { return result.OpusId; }
        set { SetOpusId(value); }
      }
      public Builder SetOpusId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusId = true;
        result.opusId_ = value;
        return this;
      }
      public Builder ClearOpusId() {
        PrepareBuilder();
        result.hasOpusId = false;
        result.opusId_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0;
        return this;
      }
      
      public bool HasBoughtCount {
        get { return result.hasBoughtCount; }
      }
      public int BoughtCount {
        get { return result.BoughtCount; }
        set { SetBoughtCount(value); }
      }
      public Builder SetBoughtCount(int value) {
        PrepareBuilder();
        result.hasBoughtCount = true;
        result.boughtCount_ = value;
        return this;
      }
      public Builder ClearBoughtCount() {
        PrepareBuilder();
        result.hasBoughtCount = false;
        result.boughtCount_ = 0;
        return this;
      }
    }
    static PBLearnDraw() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBLabelInfo : pb::GeneratedMessage<PBLabelInfo, PBLabelInfo.Builder> {
    private PBLabelInfo() { }
    private static readonly PBLabelInfo defaultInstance = new PBLabelInfo().MakeReadOnly();
    private static readonly string[] _pBLabelInfoFieldNames = new string[] { "frame", "style", "textColor", "textFont", "textStrokeColor" };
    private static readonly uint[] _pBLabelInfoFieldTags = new uint[] { 10, 160, 32, 45, 168 };
    public static PBLabelInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBLabelInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBLabelInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLabelInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBLabelInfo, PBLabelInfo.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLabelInfo__FieldAccessorTable; }
    }
    
    public const int FrameFieldNumber = 1;
    private bool hasFrame;
    private global::hdsense.PBRect frame_;
    public bool HasFrame {
      get { return hasFrame; }
    }
    public global::hdsense.PBRect Frame {
      get { return frame_ ?? global::hdsense.PBRect.DefaultInstance; }
    }
    
    public const int TextColorFieldNumber = 4;
    private bool hasTextColor;
    private int textColor_;
    public bool HasTextColor {
      get { return hasTextColor; }
    }
    public int TextColor {
      get { return textColor_; }
    }
    
    public const int TextFontFieldNumber = 5;
    private bool hasTextFont;
    private float textFont_;
    public bool HasTextFont {
      get { return hasTextFont; }
    }
    public float TextFont {
      get { return textFont_; }
    }
    
    public const int StyleFieldNumber = 20;
    private bool hasStyle;
    private int style_;
    public bool HasStyle {
      get { return hasStyle; }
    }
    public int Style {
      get { return style_; }
    }
    
    public const int TextStrokeColorFieldNumber = 21;
    private bool hasTextStrokeColor;
    private int textStrokeColor_;
    public bool HasTextStrokeColor {
      get { return hasTextStrokeColor; }
    }
    public int TextStrokeColor {
      get { return textStrokeColor_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBLabelInfoFieldNames;
      if (hasFrame) {
        output.WriteMessage(1, field_names[0], Frame);
      }
      if (hasTextColor) {
        output.WriteInt32(4, field_names[2], TextColor);
      }
      if (hasTextFont) {
        output.WriteFloat(5, field_names[3], TextFont);
      }
      if (hasStyle) {
        output.WriteInt32(20, field_names[1], Style);
      }
      if (hasTextStrokeColor) {
        output.WriteInt32(21, field_names[4], TextStrokeColor);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrame) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Frame);
        }
        if (hasTextColor) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, TextColor);
        }
        if (hasTextFont) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, TextFont);
        }
        if (hasStyle) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, Style);
        }
        if (hasTextStrokeColor) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, TextStrokeColor);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBLabelInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLabelInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLabelInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLabelInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLabelInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLabelInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBLabelInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBLabelInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBLabelInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLabelInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBLabelInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBLabelInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBLabelInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBLabelInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBLabelInfo result;
      
      private PBLabelInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBLabelInfo original = result;
          result = new PBLabelInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBLabelInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBLabelInfo.Descriptor; }
      }
      
      public override PBLabelInfo DefaultInstanceForType {
        get { return global::hdsense.PBLabelInfo.DefaultInstance; }
      }
      
      public override PBLabelInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBLabelInfo) {
          return MergeFrom((PBLabelInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBLabelInfo other) {
        if (other == global::hdsense.PBLabelInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrame) {
          MergeFrame(other.Frame);
        }
        if (other.HasTextColor) {
          TextColor = other.TextColor;
        }
        if (other.HasTextFont) {
          TextFont = other.TextFont;
        }
        if (other.HasStyle) {
          Style = other.Style;
        }
        if (other.HasTextStrokeColor) {
          TextStrokeColor = other.TextStrokeColor;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBLabelInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBLabelInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::hdsense.PBRect.Builder subBuilder = global::hdsense.PBRect.CreateBuilder();
              if (result.hasFrame) {
                subBuilder.MergeFrom(Frame);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Frame = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasTextColor = input.ReadInt32(ref result.textColor_);
              break;
            }
            case 45: {
              result.hasTextFont = input.ReadFloat(ref result.textFont_);
              break;
            }
            case 160: {
              result.hasStyle = input.ReadInt32(ref result.style_);
              break;
            }
            case 168: {
              result.hasTextStrokeColor = input.ReadInt32(ref result.textStrokeColor_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrame {
       get { return result.hasFrame; }
      }
      public global::hdsense.PBRect Frame {
        get { return result.Frame; }
        set { SetFrame(value); }
      }
      public Builder SetFrame(global::hdsense.PBRect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = value;
        return this;
      }
      public Builder SetFrame(global::hdsense.PBRect.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrame(global::hdsense.PBRect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrame &&
            result.frame_ != global::hdsense.PBRect.DefaultInstance) {
            result.frame_ = global::hdsense.PBRect.CreateBuilder(result.frame_).MergeFrom(value).BuildPartial();
        } else {
          result.frame_ = value;
        }
        result.hasFrame = true;
        return this;
      }
      public Builder ClearFrame() {
        PrepareBuilder();
        result.hasFrame = false;
        result.frame_ = null;
        return this;
      }
      
      public bool HasTextColor {
        get { return result.hasTextColor; }
      }
      public int TextColor {
        get { return result.TextColor; }
        set { SetTextColor(value); }
      }
      public Builder SetTextColor(int value) {
        PrepareBuilder();
        result.hasTextColor = true;
        result.textColor_ = value;
        return this;
      }
      public Builder ClearTextColor() {
        PrepareBuilder();
        result.hasTextColor = false;
        result.textColor_ = 0;
        return this;
      }
      
      public bool HasTextFont {
        get { return result.hasTextFont; }
      }
      public float TextFont {
        get { return result.TextFont; }
        set { SetTextFont(value); }
      }
      public Builder SetTextFont(float value) {
        PrepareBuilder();
        result.hasTextFont = true;
        result.textFont_ = value;
        return this;
      }
      public Builder ClearTextFont() {
        PrepareBuilder();
        result.hasTextFont = false;
        result.textFont_ = 0F;
        return this;
      }
      
      public bool HasStyle {
        get { return result.hasStyle; }
      }
      public int Style {
        get { return result.Style; }
        set { SetStyle(value); }
      }
      public Builder SetStyle(int value) {
        PrepareBuilder();
        result.hasStyle = true;
        result.style_ = value;
        return this;
      }
      public Builder ClearStyle() {
        PrepareBuilder();
        result.hasStyle = false;
        result.style_ = 0;
        return this;
      }
      
      public bool HasTextStrokeColor {
        get { return result.hasTextStrokeColor; }
      }
      public int TextStrokeColor {
        get { return result.TextStrokeColor; }
        set { SetTextStrokeColor(value); }
      }
      public Builder SetTextStrokeColor(int value) {
        PrepareBuilder();
        result.hasTextStrokeColor = true;
        result.textStrokeColor_ = value;
        return this;
      }
      public Builder ClearTextStrokeColor() {
        PrepareBuilder();
        result.hasTextStrokeColor = false;
        result.textStrokeColor_ = 0;
        return this;
      }
    }
    static PBLabelInfo() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBFeed : pb::GeneratedMessage<PBFeed, PBFeed.Builder> {
    private PBFeed() { }
    private static readonly PBFeed defaultInstance = new PBFeed().MakeReadOnly();
    private static readonly string[] _pBFeedFieldNames = new string[] { "actionType", "activityType", "albumNumber", "albums", "avatar", "cameraPara", "canvasSize", "category", "comment", "commentInfo", "commentTimes", "contestComment", "contestId", "contestName", "contestScore", "contestUrl", "correctTimes", "createDate", "dataUrl", "descLabelInfo", "deviceName", "deviceType", "drawData", "drawDataUrl", "feedId", "feedTimes", "gameId", "gender", "guessTimes", "guessWords", "historyScore", "isCorrect", "isWithAppImage", "learnDraw", "location", "matchTimes", "nickName", "opusCreatorAvatar", "opusCreatorGender", "opusCreatorNickName", "opusCreatorUserId", "opusDesc", "opusId", "opusImage", "opusStatus", "opusTagIds", "opusTags", "opusThumbImage", "opusWord", "originalStatus", "printStatus", "qrUrl", "rankInTop", "rankInfo", "rankName", "score", "signature", "sing", "sodoType", "spendTime", "tags", "targetUserId", "targetUserNickName", "userId", "vip", "voteTimes" };
    private static readonly uint[] _pBFeedFieldTags = new uint[] { 24, 776, 1680, 1690, 178, 442, 1610, 64, 410, 418, 512, 714, 730, 722, 745, 706, 496, 32, 674, 1602, 50, 40, 250, 290, 10, 522, 58, 184, 504, 354, 273, 336, 128, 802, 210, 488, 170, 594, 584, 578, 570, 282, 330, 658, 360, 1650, 1642, 666, 650, 848, 856, 682, 760, 754, 770, 344, 194, 810, 72, 304, 298, 258, 266, 18, 200, 736 };
    public static PBFeed DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBFeed DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBFeed ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFeed__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBFeed, PBFeed.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFeed__FieldAccessorTable; }
    }
    
    public const int FeedIdFieldNumber = 1;
    private bool hasFeedId;
    private string feedId_ = "";
    public bool HasFeedId {
      get { return hasFeedId; }
    }
    public string FeedId {
      get { return feedId_; }
    }
    
    public const int UserIdFieldNumber = 2;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int ActionTypeFieldNumber = 3;
    private bool hasActionType;
    private int actionType_;
    public bool HasActionType {
      get { return hasActionType; }
    }
    public int ActionType {
      get { return actionType_; }
    }
    
    public const int CreateDateFieldNumber = 4;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int DeviceTypeFieldNumber = 5;
    private bool hasDeviceType;
    private int deviceType_;
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public int DeviceType {
      get { return deviceType_; }
    }
    
    public const int DeviceNameFieldNumber = 6;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public const int GameIdFieldNumber = 7;
    private bool hasGameId;
    private string gameId_ = "";
    public bool HasGameId {
      get { return hasGameId; }
    }
    public string GameId {
      get { return gameId_; }
    }
    
    public const int CategoryFieldNumber = 8;
    private bool hasCategory;
    private global::hdsense.PBOpusCategoryType category_ = global::hdsense.PBOpusCategoryType.DRAW_CATEGORY;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public global::hdsense.PBOpusCategoryType Category {
      get { return category_; }
    }
    
    public const int SodoTypeFieldNumber = 9;
    private bool hasSodoType;
    private global::hdsense.PBOpusSodoType sodoType_ = global::hdsense.PBOpusSodoType.SODO_RENXIANG;
    public bool HasSodoType {
      get { return hasSodoType; }
    }
    public global::hdsense.PBOpusSodoType SodoType {
      get { return sodoType_; }
    }
    
    public const int IsWithAppImageFieldNumber = 16;
    private bool hasIsWithAppImage;
    private bool isWithAppImage_;
    public bool HasIsWithAppImage {
      get { return hasIsWithAppImage; }
    }
    public bool IsWithAppImage {
      get { return isWithAppImage_; }
    }
    
    public const int NickNameFieldNumber = 21;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int AvatarFieldNumber = 22;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int GenderFieldNumber = 23;
    private bool hasGender;
    private bool gender_;
    public bool HasGender {
      get { return hasGender; }
    }
    public bool Gender {
      get { return gender_; }
    }
    
    public const int SignatureFieldNumber = 24;
    private bool hasSignature;
    private string signature_ = "";
    public bool HasSignature {
      get { return hasSignature; }
    }
    public string Signature {
      get { return signature_; }
    }
    
    public const int VipFieldNumber = 25;
    private bool hasVip;
    private int vip_;
    public bool HasVip {
      get { return hasVip; }
    }
    public int Vip {
      get { return vip_; }
    }
    
    public const int LocationFieldNumber = 26;
    private bool hasLocation;
    private string location_ = "";
    public bool HasLocation {
      get { return hasLocation; }
    }
    public string Location {
      get { return location_; }
    }
    
    public const int DrawDataFieldNumber = 31;
    private bool hasDrawData;
    private global::hdsense.PBDraw drawData_;
    public bool HasDrawData {
      get { return hasDrawData; }
    }
    public global::hdsense.PBDraw DrawData {
      get { return drawData_ ?? global::hdsense.PBDraw.DefaultInstance; }
    }
    
    public const int TargetUserIdFieldNumber = 32;
    private bool hasTargetUserId;
    private string targetUserId_ = "";
    public bool HasTargetUserId {
      get { return hasTargetUserId; }
    }
    public string TargetUserId {
      get { return targetUserId_; }
    }
    
    public const int TargetUserNickNameFieldNumber = 33;
    private bool hasTargetUserNickName;
    private string targetUserNickName_ = "";
    public bool HasTargetUserNickName {
      get { return hasTargetUserNickName; }
    }
    public string TargetUserNickName {
      get { return targetUserNickName_; }
    }
    
    public const int HistoryScoreFieldNumber = 34;
    private bool hasHistoryScore;
    private double historyScore_;
    public bool HasHistoryScore {
      get { return hasHistoryScore; }
    }
    public double HistoryScore {
      get { return historyScore_; }
    }
    
    public const int OpusDescFieldNumber = 35;
    private bool hasOpusDesc;
    private string opusDesc_ = "";
    public bool HasOpusDesc {
      get { return hasOpusDesc; }
    }
    public string OpusDesc {
      get { return opusDesc_; }
    }
    
    public const int DrawDataUrlFieldNumber = 36;
    private bool hasDrawDataUrl;
    private string drawDataUrl_ = "";
    public bool HasDrawDataUrl {
      get { return hasDrawDataUrl; }
    }
    public string DrawDataUrl {
      get { return drawDataUrl_; }
    }
    
    public const int TagsFieldNumber = 37;
    private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TagsList {
      get { return pbc::Lists.AsReadOnly(tags_); }
    }
    public int TagsCount {
      get { return tags_.Count; }
    }
    public string GetTags(int index) {
      return tags_[index];
    }
    
    public const int SpendTimeFieldNumber = 38;
    private bool hasSpendTime;
    private int spendTime_;
    public bool HasSpendTime {
      get { return hasSpendTime; }
    }
    public int SpendTime {
      get { return spendTime_; }
    }
    
    public const int OpusIdFieldNumber = 41;
    private bool hasOpusId;
    private string opusId_ = "";
    public bool HasOpusId {
      get { return hasOpusId; }
    }
    public string OpusId {
      get { return opusId_; }
    }
    
    public const int IsCorrectFieldNumber = 42;
    private bool hasIsCorrect;
    private bool isCorrect_;
    public bool HasIsCorrect {
      get { return hasIsCorrect; }
    }
    public bool IsCorrect {
      get { return isCorrect_; }
    }
    
    public const int ScoreFieldNumber = 43;
    private bool hasScore;
    private int score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public int Score {
      get { return score_; }
    }
    
    public const int GuessWordsFieldNumber = 44;
    private pbc::PopsicleList<string> guessWords_ = new pbc::PopsicleList<string>();
    public scg::IList<string> GuessWordsList {
      get { return pbc::Lists.AsReadOnly(guessWords_); }
    }
    public int GuessWordsCount {
      get { return guessWords_.Count; }
    }
    public string GetGuessWords(int index) {
      return guessWords_[index];
    }
    
    public const int OpusStatusFieldNumber = 45;
    private bool hasOpusStatus;
    private int opusStatus_;
    public bool HasOpusStatus {
      get { return hasOpusStatus; }
    }
    public int OpusStatus {
      get { return opusStatus_; }
    }
    
    public const int CommentFieldNumber = 51;
    private bool hasComment;
    private string comment_ = "";
    public bool HasComment {
      get { return hasComment; }
    }
    public string Comment {
      get { return comment_; }
    }
    
    public const int CommentInfoFieldNumber = 52;
    private bool hasCommentInfo;
    private global::hdsense.PBCommentInfo commentInfo_;
    public bool HasCommentInfo {
      get { return hasCommentInfo; }
    }
    public global::hdsense.PBCommentInfo CommentInfo {
      get { return commentInfo_ ?? global::hdsense.PBCommentInfo.DefaultInstance; }
    }
    
    public const int CameraParaFieldNumber = 55;
    private bool hasCameraPara;
    private global::hdsense.PBCameraParameter cameraPara_;
    public bool HasCameraPara {
      get { return hasCameraPara; }
    }
    public global::hdsense.PBCameraParameter CameraPara {
      get { return cameraPara_ ?? global::hdsense.PBCameraParameter.DefaultInstance; }
    }
    
    public const int MatchTimesFieldNumber = 61;
    private bool hasMatchTimes;
    private int matchTimes_;
    public bool HasMatchTimes {
      get { return hasMatchTimes; }
    }
    public int MatchTimes {
      get { return matchTimes_; }
    }
    
    public const int CorrectTimesFieldNumber = 62;
    private bool hasCorrectTimes;
    private int correctTimes_;
    public bool HasCorrectTimes {
      get { return hasCorrectTimes; }
    }
    public int CorrectTimes {
      get { return correctTimes_; }
    }
    
    public const int GuessTimesFieldNumber = 63;
    private bool hasGuessTimes;
    private int guessTimes_;
    public bool HasGuessTimes {
      get { return hasGuessTimes; }
    }
    public int GuessTimes {
      get { return guessTimes_; }
    }
    
    public const int CommentTimesFieldNumber = 64;
    private bool hasCommentTimes;
    private int commentTimes_;
    public bool HasCommentTimes {
      get { return hasCommentTimes; }
    }
    public int CommentTimes {
      get { return commentTimes_; }
    }
    
    public const int FeedTimesFieldNumber = 65;
    private pbc::PopsicleList<global::hdsense.PBFeedTimes> feedTimes_ = new pbc::PopsicleList<global::hdsense.PBFeedTimes>();
    public scg::IList<global::hdsense.PBFeedTimes> FeedTimesList {
      get { return feedTimes_; }
    }
    public int FeedTimesCount {
      get { return feedTimes_.Count; }
    }
    public global::hdsense.PBFeedTimes GetFeedTimes(int index) {
      return feedTimes_[index];
    }
    
    public const int OpusCreatorUserIdFieldNumber = 71;
    private bool hasOpusCreatorUserId;
    private string opusCreatorUserId_ = "";
    public bool HasOpusCreatorUserId {
      get { return hasOpusCreatorUserId; }
    }
    public string OpusCreatorUserId {
      get { return opusCreatorUserId_; }
    }
    
    public const int OpusCreatorNickNameFieldNumber = 72;
    private bool hasOpusCreatorNickName;
    private string opusCreatorNickName_ = "";
    public bool HasOpusCreatorNickName {
      get { return hasOpusCreatorNickName; }
    }
    public string OpusCreatorNickName {
      get { return opusCreatorNickName_; }
    }
    
    public const int OpusCreatorGenderFieldNumber = 73;
    private bool hasOpusCreatorGender;
    private bool opusCreatorGender_;
    public bool HasOpusCreatorGender {
      get { return hasOpusCreatorGender; }
    }
    public bool OpusCreatorGender {
      get { return opusCreatorGender_; }
    }
    
    public const int OpusCreatorAvatarFieldNumber = 74;
    private bool hasOpusCreatorAvatar;
    private string opusCreatorAvatar_ = "";
    public bool HasOpusCreatorAvatar {
      get { return hasOpusCreatorAvatar; }
    }
    public string OpusCreatorAvatar {
      get { return opusCreatorAvatar_; }
    }
    
    public const int OpusWordFieldNumber = 81;
    private bool hasOpusWord;
    private string opusWord_ = "";
    public bool HasOpusWord {
      get { return hasOpusWord; }
    }
    public string OpusWord {
      get { return opusWord_; }
    }
    
    public const int OpusImageFieldNumber = 82;
    private bool hasOpusImage;
    private string opusImage_ = "";
    public bool HasOpusImage {
      get { return hasOpusImage; }
    }
    public string OpusImage {
      get { return opusImage_; }
    }
    
    public const int OpusThumbImageFieldNumber = 83;
    private bool hasOpusThumbImage;
    private string opusThumbImage_ = "";
    public bool HasOpusThumbImage {
      get { return hasOpusThumbImage; }
    }
    public string OpusThumbImage {
      get { return opusThumbImage_; }
    }
    
    public const int DataUrlFieldNumber = 84;
    private bool hasDataUrl;
    private string dataUrl_ = "";
    public bool HasDataUrl {
      get { return hasDataUrl; }
    }
    public string DataUrl {
      get { return dataUrl_; }
    }
    
    public const int QrUrlFieldNumber = 85;
    private bool hasQrUrl;
    private string qrUrl_ = "";
    public bool HasQrUrl {
      get { return hasQrUrl; }
    }
    public string QrUrl {
      get { return qrUrl_; }
    }
    
    public const int ContestUrlFieldNumber = 88;
    private bool hasContestUrl;
    private string contestUrl_ = "";
    public bool HasContestUrl {
      get { return hasContestUrl; }
    }
    public string ContestUrl {
      get { return contestUrl_; }
    }
    
    public const int ContestCommentFieldNumber = 89;
    private bool hasContestComment;
    private string contestComment_ = "";
    public bool HasContestComment {
      get { return hasContestComment; }
    }
    public string ContestComment {
      get { return contestComment_; }
    }
    
    public const int ContestNameFieldNumber = 90;
    private bool hasContestName;
    private string contestName_ = "";
    public bool HasContestName {
      get { return hasContestName; }
    }
    public string ContestName {
      get { return contestName_; }
    }
    
    public const int ContestIdFieldNumber = 91;
    private bool hasContestId;
    private string contestId_ = "";
    public bool HasContestId {
      get { return hasContestId; }
    }
    public string ContestId {
      get { return contestId_; }
    }
    
    public const int VoteTimesFieldNumber = 92;
    private bool hasVoteTimes;
    private int voteTimes_;
    public bool HasVoteTimes {
      get { return hasVoteTimes; }
    }
    public int VoteTimes {
      get { return voteTimes_; }
    }
    
    public const int ContestScoreFieldNumber = 93;
    private bool hasContestScore;
    private double contestScore_;
    public bool HasContestScore {
      get { return hasContestScore; }
    }
    public double ContestScore {
      get { return contestScore_; }
    }
    
    public const int RankInfoFieldNumber = 94;
    private pbc::PopsicleList<global::hdsense.PBOpusRank> rankInfo_ = new pbc::PopsicleList<global::hdsense.PBOpusRank>();
    public scg::IList<global::hdsense.PBOpusRank> RankInfoList {
      get { return rankInfo_; }
    }
    public int RankInfoCount {
      get { return rankInfo_.Count; }
    }
    public global::hdsense.PBOpusRank GetRankInfo(int index) {
      return rankInfo_[index];
    }
    
    public const int RankInTopFieldNumber = 95;
    private bool hasRankInTop;
    private int rankInTop_;
    public bool HasRankInTop {
      get { return hasRankInTop; }
    }
    public int RankInTop {
      get { return rankInTop_; }
    }
    
    public const int RankNameFieldNumber = 96;
    private bool hasRankName;
    private string rankName_ = "";
    public bool HasRankName {
      get { return hasRankName; }
    }
    public string RankName {
      get { return rankName_; }
    }
    
    public const int ActivityTypeFieldNumber = 97;
    private bool hasActivityType;
    private int activityType_;
    public bool HasActivityType {
      get { return hasActivityType; }
    }
    public int ActivityType {
      get { return activityType_; }
    }
    
    public const int LearnDrawFieldNumber = 100;
    private bool hasLearnDraw;
    private global::hdsense.PBLearnDraw learnDraw_;
    public bool HasLearnDraw {
      get { return hasLearnDraw; }
    }
    public global::hdsense.PBLearnDraw LearnDraw {
      get { return learnDraw_ ?? global::hdsense.PBLearnDraw.DefaultInstance; }
    }
    
    public const int SingFieldNumber = 101;
    private bool hasSing;
    private global::hdsense.PBSingOpus sing_;
    public bool HasSing {
      get { return hasSing; }
    }
    public global::hdsense.PBSingOpus Sing {
      get { return sing_ ?? global::hdsense.PBSingOpus.DefaultInstance; }
    }
    
    public const int OriginalStatusFieldNumber = 106;
    private bool hasOriginalStatus;
    private int originalStatus_;
    public bool HasOriginalStatus {
      get { return hasOriginalStatus; }
    }
    public int OriginalStatus {
      get { return originalStatus_; }
    }
    
    public const int PrintStatusFieldNumber = 107;
    private bool hasPrintStatus;
    private int printStatus_;
    public bool HasPrintStatus {
      get { return hasPrintStatus; }
    }
    public int PrintStatus {
      get { return printStatus_; }
    }
    
    public const int DescLabelInfoFieldNumber = 200;
    private bool hasDescLabelInfo;
    private global::hdsense.PBLabelInfo descLabelInfo_;
    public bool HasDescLabelInfo {
      get { return hasDescLabelInfo; }
    }
    public global::hdsense.PBLabelInfo DescLabelInfo {
      get { return descLabelInfo_ ?? global::hdsense.PBLabelInfo.DefaultInstance; }
    }
    
    public const int CanvasSizeFieldNumber = 201;
    private bool hasCanvasSize;
    private global::hdsense.PBSize canvasSize_;
    public bool HasCanvasSize {
      get { return hasCanvasSize; }
    }
    public global::hdsense.PBSize CanvasSize {
      get { return canvasSize_ ?? global::hdsense.PBSize.DefaultInstance; }
    }
    
    public const int OpusTagsFieldNumber = 205;
    private pbc::PopsicleList<global::hdsense.PBSodoTag> opusTags_ = new pbc::PopsicleList<global::hdsense.PBSodoTag>();
    public scg::IList<global::hdsense.PBSodoTag> OpusTagsList {
      get { return opusTags_; }
    }
    public int OpusTagsCount {
      get { return opusTags_.Count; }
    }
    public global::hdsense.PBSodoTag GetOpusTags(int index) {
      return opusTags_[index];
    }
    
    public const int OpusTagIdsFieldNumber = 206;
    private pbc::PopsicleList<string> opusTagIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> OpusTagIdsList {
      get { return pbc::Lists.AsReadOnly(opusTagIds_); }
    }
    public int OpusTagIdsCount {
      get { return opusTagIds_.Count; }
    }
    public string GetOpusTagIds(int index) {
      return opusTagIds_[index];
    }
    
    public const int AlbumNumberFieldNumber = 210;
    private bool hasAlbumNumber;
    private int albumNumber_;
    public bool HasAlbumNumber {
      get { return hasAlbumNumber; }
    }
    public int AlbumNumber {
      get { return albumNumber_; }
    }
    
    public const int AlbumsFieldNumber = 211;
    private pbc::PopsicleList<global::hdsense.PBAlbum> albums_ = new pbc::PopsicleList<global::hdsense.PBAlbum>();
    public scg::IList<global::hdsense.PBAlbum> AlbumsList {
      get { return albums_; }
    }
    public int AlbumsCount {
      get { return albums_.Count; }
    }
    public global::hdsense.PBAlbum GetAlbums(int index) {
      return albums_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFeedId) return false;
        if (!hasUserId) return false;
        if (!hasActionType) return false;
        if (!hasCreateDate) return false;
        if (HasDrawData) {
          if (!DrawData.IsInitialized) return false;
        }
        if (HasCommentInfo) {
          if (!CommentInfo.IsInitialized) return false;
        }
        foreach (global::hdsense.PBFeedTimes element in FeedTimesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBOpusRank element in RankInfoList) {
          if (!element.IsInitialized) return false;
        }
        if (HasLearnDraw) {
          if (!LearnDraw.IsInitialized) return false;
        }
        if (HasSing) {
          if (!Sing.IsInitialized) return false;
        }
        foreach (global::hdsense.PBSodoTag element in OpusTagsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBAlbum element in AlbumsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBFeedFieldNames;
      if (hasFeedId) {
        output.WriteString(1, field_names[24], FeedId);
      }
      if (hasUserId) {
        output.WriteString(2, field_names[63], UserId);
      }
      if (hasActionType) {
        output.WriteInt32(3, field_names[0], ActionType);
      }
      if (hasCreateDate) {
        output.WriteInt32(4, field_names[17], CreateDate);
      }
      if (hasDeviceType) {
        output.WriteInt32(5, field_names[21], DeviceType);
      }
      if (hasDeviceName) {
        output.WriteString(6, field_names[20], DeviceName);
      }
      if (hasGameId) {
        output.WriteString(7, field_names[26], GameId);
      }
      if (hasCategory) {
        output.WriteEnum(8, field_names[7], (int) Category, Category);
      }
      if (hasSodoType) {
        output.WriteEnum(9, field_names[58], (int) SodoType, SodoType);
      }
      if (hasIsWithAppImage) {
        output.WriteBool(16, field_names[32], IsWithAppImage);
      }
      if (hasNickName) {
        output.WriteString(21, field_names[36], NickName);
      }
      if (hasAvatar) {
        output.WriteString(22, field_names[4], Avatar);
      }
      if (hasGender) {
        output.WriteBool(23, field_names[27], Gender);
      }
      if (hasSignature) {
        output.WriteString(24, field_names[56], Signature);
      }
      if (hasVip) {
        output.WriteInt32(25, field_names[64], Vip);
      }
      if (hasLocation) {
        output.WriteString(26, field_names[34], Location);
      }
      if (hasDrawData) {
        output.WriteMessage(31, field_names[22], DrawData);
      }
      if (hasTargetUserId) {
        output.WriteString(32, field_names[61], TargetUserId);
      }
      if (hasTargetUserNickName) {
        output.WriteString(33, field_names[62], TargetUserNickName);
      }
      if (hasHistoryScore) {
        output.WriteDouble(34, field_names[30], HistoryScore);
      }
      if (hasOpusDesc) {
        output.WriteString(35, field_names[41], OpusDesc);
      }
      if (hasDrawDataUrl) {
        output.WriteString(36, field_names[23], DrawDataUrl);
      }
      if (tags_.Count > 0) {
        output.WriteStringArray(37, field_names[60], tags_);
      }
      if (hasSpendTime) {
        output.WriteInt32(38, field_names[59], SpendTime);
      }
      if (hasOpusId) {
        output.WriteString(41, field_names[42], OpusId);
      }
      if (hasIsCorrect) {
        output.WriteBool(42, field_names[31], IsCorrect);
      }
      if (hasScore) {
        output.WriteInt32(43, field_names[55], Score);
      }
      if (guessWords_.Count > 0) {
        output.WriteStringArray(44, field_names[29], guessWords_);
      }
      if (hasOpusStatus) {
        output.WriteInt32(45, field_names[44], OpusStatus);
      }
      if (hasComment) {
        output.WriteString(51, field_names[8], Comment);
      }
      if (hasCommentInfo) {
        output.WriteMessage(52, field_names[9], CommentInfo);
      }
      if (hasCameraPara) {
        output.WriteMessage(55, field_names[5], CameraPara);
      }
      if (hasMatchTimes) {
        output.WriteInt32(61, field_names[35], MatchTimes);
      }
      if (hasCorrectTimes) {
        output.WriteInt32(62, field_names[16], CorrectTimes);
      }
      if (hasGuessTimes) {
        output.WriteInt32(63, field_names[28], GuessTimes);
      }
      if (hasCommentTimes) {
        output.WriteInt32(64, field_names[10], CommentTimes);
      }
      if (feedTimes_.Count > 0) {
        output.WriteMessageArray(65, field_names[25], feedTimes_);
      }
      if (hasOpusCreatorUserId) {
        output.WriteString(71, field_names[40], OpusCreatorUserId);
      }
      if (hasOpusCreatorNickName) {
        output.WriteString(72, field_names[39], OpusCreatorNickName);
      }
      if (hasOpusCreatorGender) {
        output.WriteBool(73, field_names[38], OpusCreatorGender);
      }
      if (hasOpusCreatorAvatar) {
        output.WriteString(74, field_names[37], OpusCreatorAvatar);
      }
      if (hasOpusWord) {
        output.WriteString(81, field_names[48], OpusWord);
      }
      if (hasOpusImage) {
        output.WriteString(82, field_names[43], OpusImage);
      }
      if (hasOpusThumbImage) {
        output.WriteString(83, field_names[47], OpusThumbImage);
      }
      if (hasDataUrl) {
        output.WriteString(84, field_names[18], DataUrl);
      }
      if (hasQrUrl) {
        output.WriteString(85, field_names[51], QrUrl);
      }
      if (hasContestUrl) {
        output.WriteString(88, field_names[15], ContestUrl);
      }
      if (hasContestComment) {
        output.WriteString(89, field_names[11], ContestComment);
      }
      if (hasContestName) {
        output.WriteString(90, field_names[13], ContestName);
      }
      if (hasContestId) {
        output.WriteString(91, field_names[12], ContestId);
      }
      if (hasVoteTimes) {
        output.WriteInt32(92, field_names[65], VoteTimes);
      }
      if (hasContestScore) {
        output.WriteDouble(93, field_names[14], ContestScore);
      }
      if (rankInfo_.Count > 0) {
        output.WriteMessageArray(94, field_names[53], rankInfo_);
      }
      if (hasRankInTop) {
        output.WriteInt32(95, field_names[52], RankInTop);
      }
      if (hasRankName) {
        output.WriteString(96, field_names[54], RankName);
      }
      if (hasActivityType) {
        output.WriteInt32(97, field_names[1], ActivityType);
      }
      if (hasLearnDraw) {
        output.WriteMessage(100, field_names[33], LearnDraw);
      }
      if (hasSing) {
        output.WriteMessage(101, field_names[57], Sing);
      }
      if (hasOriginalStatus) {
        output.WriteInt32(106, field_names[49], OriginalStatus);
      }
      if (hasPrintStatus) {
        output.WriteInt32(107, field_names[50], PrintStatus);
      }
      if (hasDescLabelInfo) {
        output.WriteMessage(200, field_names[19], DescLabelInfo);
      }
      if (hasCanvasSize) {
        output.WriteMessage(201, field_names[6], CanvasSize);
      }
      if (opusTags_.Count > 0) {
        output.WriteMessageArray(205, field_names[46], opusTags_);
      }
      if (opusTagIds_.Count > 0) {
        output.WriteStringArray(206, field_names[45], opusTagIds_);
      }
      if (hasAlbumNumber) {
        output.WriteInt32(210, field_names[2], AlbumNumber);
      }
      if (albums_.Count > 0) {
        output.WriteMessageArray(211, field_names[3], albums_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFeedId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FeedId);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserId);
        }
        if (hasActionType) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ActionType);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, CreateDate);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, DeviceType);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, DeviceName);
        }
        if (hasGameId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, GameId);
        }
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) Category);
        }
        if (hasSodoType) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) SodoType);
        }
        if (hasIsWithAppImage) {
          size += pb::CodedOutputStream.ComputeBoolSize(16, IsWithAppImage);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(21, NickName);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(22, Avatar);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeBoolSize(23, Gender);
        }
        if (hasSignature) {
          size += pb::CodedOutputStream.ComputeStringSize(24, Signature);
        }
        if (hasVip) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, Vip);
        }
        if (hasLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(26, Location);
        }
        if (hasDrawData) {
          size += pb::CodedOutputStream.ComputeMessageSize(31, DrawData);
        }
        if (hasTargetUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(32, TargetUserId);
        }
        if (hasTargetUserNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(33, TargetUserNickName);
        }
        if (hasHistoryScore) {
          size += pb::CodedOutputStream.ComputeDoubleSize(34, HistoryScore);
        }
        if (hasOpusDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(35, OpusDesc);
        }
        if (hasDrawDataUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(36, DrawDataUrl);
        }
        {
          int dataSize = 0;
          foreach (string element in TagsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * tags_.Count;
        }
        if (hasSpendTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(38, SpendTime);
        }
        if (hasOpusId) {
          size += pb::CodedOutputStream.ComputeStringSize(41, OpusId);
        }
        if (hasIsCorrect) {
          size += pb::CodedOutputStream.ComputeBoolSize(42, IsCorrect);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeInt32Size(43, Score);
        }
        {
          int dataSize = 0;
          foreach (string element in GuessWordsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * guessWords_.Count;
        }
        if (hasOpusStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(45, OpusStatus);
        }
        if (hasComment) {
          size += pb::CodedOutputStream.ComputeStringSize(51, Comment);
        }
        if (hasCommentInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(52, CommentInfo);
        }
        if (hasCameraPara) {
          size += pb::CodedOutputStream.ComputeMessageSize(55, CameraPara);
        }
        if (hasMatchTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(61, MatchTimes);
        }
        if (hasCorrectTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(62, CorrectTimes);
        }
        if (hasGuessTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(63, GuessTimes);
        }
        if (hasCommentTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(64, CommentTimes);
        }
        foreach (global::hdsense.PBFeedTimes element in FeedTimesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(65, element);
        }
        if (hasOpusCreatorUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(71, OpusCreatorUserId);
        }
        if (hasOpusCreatorNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(72, OpusCreatorNickName);
        }
        if (hasOpusCreatorGender) {
          size += pb::CodedOutputStream.ComputeBoolSize(73, OpusCreatorGender);
        }
        if (hasOpusCreatorAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(74, OpusCreatorAvatar);
        }
        if (hasOpusWord) {
          size += pb::CodedOutputStream.ComputeStringSize(81, OpusWord);
        }
        if (hasOpusImage) {
          size += pb::CodedOutputStream.ComputeStringSize(82, OpusImage);
        }
        if (hasOpusThumbImage) {
          size += pb::CodedOutputStream.ComputeStringSize(83, OpusThumbImage);
        }
        if (hasDataUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(84, DataUrl);
        }
        if (hasQrUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(85, QrUrl);
        }
        if (hasContestUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(88, ContestUrl);
        }
        if (hasContestComment) {
          size += pb::CodedOutputStream.ComputeStringSize(89, ContestComment);
        }
        if (hasContestName) {
          size += pb::CodedOutputStream.ComputeStringSize(90, ContestName);
        }
        if (hasContestId) {
          size += pb::CodedOutputStream.ComputeStringSize(91, ContestId);
        }
        if (hasVoteTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(92, VoteTimes);
        }
        if (hasContestScore) {
          size += pb::CodedOutputStream.ComputeDoubleSize(93, ContestScore);
        }
        foreach (global::hdsense.PBOpusRank element in RankInfoList) {
          size += pb::CodedOutputStream.ComputeMessageSize(94, element);
        }
        if (hasRankInTop) {
          size += pb::CodedOutputStream.ComputeInt32Size(95, RankInTop);
        }
        if (hasRankName) {
          size += pb::CodedOutputStream.ComputeStringSize(96, RankName);
        }
        if (hasActivityType) {
          size += pb::CodedOutputStream.ComputeInt32Size(97, ActivityType);
        }
        if (hasLearnDraw) {
          size += pb::CodedOutputStream.ComputeMessageSize(100, LearnDraw);
        }
        if (hasSing) {
          size += pb::CodedOutputStream.ComputeMessageSize(101, Sing);
        }
        if (hasOriginalStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(106, OriginalStatus);
        }
        if (hasPrintStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(107, PrintStatus);
        }
        if (hasDescLabelInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(200, DescLabelInfo);
        }
        if (hasCanvasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(201, CanvasSize);
        }
        foreach (global::hdsense.PBSodoTag element in OpusTagsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(205, element);
        }
        {
          int dataSize = 0;
          foreach (string element in OpusTagIdsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * opusTagIds_.Count;
        }
        if (hasAlbumNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(210, AlbumNumber);
        }
        foreach (global::hdsense.PBAlbum element in AlbumsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(211, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBFeed ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFeed ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFeed ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFeed ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFeed ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFeed ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBFeed ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBFeed ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBFeed ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFeed ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBFeed MakeReadOnly() {
      tags_.MakeReadOnly();
      guessWords_.MakeReadOnly();
      feedTimes_.MakeReadOnly();
      rankInfo_.MakeReadOnly();
      opusTags_.MakeReadOnly();
      opusTagIds_.MakeReadOnly();
      albums_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBFeed prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBFeed, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBFeed cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBFeed result;
      
      private PBFeed PrepareBuilder() {
        if (resultIsReadOnly) {
          PBFeed original = result;
          result = new PBFeed();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBFeed MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBFeed.Descriptor; }
      }
      
      public override PBFeed DefaultInstanceForType {
        get { return global::hdsense.PBFeed.DefaultInstance; }
      }
      
      public override PBFeed BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBFeed) {
          return MergeFrom((PBFeed) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBFeed other) {
        if (other == global::hdsense.PBFeed.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFeedId) {
          FeedId = other.FeedId;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasActionType) {
          ActionType = other.ActionType;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasGameId) {
          GameId = other.GameId;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasSodoType) {
          SodoType = other.SodoType;
        }
        if (other.HasIsWithAppImage) {
          IsWithAppImage = other.IsWithAppImage;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        if (other.HasSignature) {
          Signature = other.Signature;
        }
        if (other.HasVip) {
          Vip = other.Vip;
        }
        if (other.HasLocation) {
          Location = other.Location;
        }
        if (other.HasDrawData) {
          MergeDrawData(other.DrawData);
        }
        if (other.HasTargetUserId) {
          TargetUserId = other.TargetUserId;
        }
        if (other.HasTargetUserNickName) {
          TargetUserNickName = other.TargetUserNickName;
        }
        if (other.HasHistoryScore) {
          HistoryScore = other.HistoryScore;
        }
        if (other.HasOpusDesc) {
          OpusDesc = other.OpusDesc;
        }
        if (other.HasDrawDataUrl) {
          DrawDataUrl = other.DrawDataUrl;
        }
        if (other.tags_.Count != 0) {
          result.tags_.Add(other.tags_);
        }
        if (other.HasSpendTime) {
          SpendTime = other.SpendTime;
        }
        if (other.HasOpusId) {
          OpusId = other.OpusId;
        }
        if (other.HasIsCorrect) {
          IsCorrect = other.IsCorrect;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.guessWords_.Count != 0) {
          result.guessWords_.Add(other.guessWords_);
        }
        if (other.HasOpusStatus) {
          OpusStatus = other.OpusStatus;
        }
        if (other.HasComment) {
          Comment = other.Comment;
        }
        if (other.HasCommentInfo) {
          MergeCommentInfo(other.CommentInfo);
        }
        if (other.HasCameraPara) {
          MergeCameraPara(other.CameraPara);
        }
        if (other.HasMatchTimes) {
          MatchTimes = other.MatchTimes;
        }
        if (other.HasCorrectTimes) {
          CorrectTimes = other.CorrectTimes;
        }
        if (other.HasGuessTimes) {
          GuessTimes = other.GuessTimes;
        }
        if (other.HasCommentTimes) {
          CommentTimes = other.CommentTimes;
        }
        if (other.feedTimes_.Count != 0) {
          result.feedTimes_.Add(other.feedTimes_);
        }
        if (other.HasOpusCreatorUserId) {
          OpusCreatorUserId = other.OpusCreatorUserId;
        }
        if (other.HasOpusCreatorNickName) {
          OpusCreatorNickName = other.OpusCreatorNickName;
        }
        if (other.HasOpusCreatorGender) {
          OpusCreatorGender = other.OpusCreatorGender;
        }
        if (other.HasOpusCreatorAvatar) {
          OpusCreatorAvatar = other.OpusCreatorAvatar;
        }
        if (other.HasOpusWord) {
          OpusWord = other.OpusWord;
        }
        if (other.HasOpusImage) {
          OpusImage = other.OpusImage;
        }
        if (other.HasOpusThumbImage) {
          OpusThumbImage = other.OpusThumbImage;
        }
        if (other.HasDataUrl) {
          DataUrl = other.DataUrl;
        }
        if (other.HasQrUrl) {
          QrUrl = other.QrUrl;
        }
        if (other.HasContestUrl) {
          ContestUrl = other.ContestUrl;
        }
        if (other.HasContestComment) {
          ContestComment = other.ContestComment;
        }
        if (other.HasContestName) {
          ContestName = other.ContestName;
        }
        if (other.HasContestId) {
          ContestId = other.ContestId;
        }
        if (other.HasVoteTimes) {
          VoteTimes = other.VoteTimes;
        }
        if (other.HasContestScore) {
          ContestScore = other.ContestScore;
        }
        if (other.rankInfo_.Count != 0) {
          result.rankInfo_.Add(other.rankInfo_);
        }
        if (other.HasRankInTop) {
          RankInTop = other.RankInTop;
        }
        if (other.HasRankName) {
          RankName = other.RankName;
        }
        if (other.HasActivityType) {
          ActivityType = other.ActivityType;
        }
        if (other.HasLearnDraw) {
          MergeLearnDraw(other.LearnDraw);
        }
        if (other.HasSing) {
          MergeSing(other.Sing);
        }
        if (other.HasOriginalStatus) {
          OriginalStatus = other.OriginalStatus;
        }
        if (other.HasPrintStatus) {
          PrintStatus = other.PrintStatus;
        }
        if (other.HasDescLabelInfo) {
          MergeDescLabelInfo(other.DescLabelInfo);
        }
        if (other.HasCanvasSize) {
          MergeCanvasSize(other.CanvasSize);
        }
        if (other.opusTags_.Count != 0) {
          result.opusTags_.Add(other.opusTags_);
        }
        if (other.opusTagIds_.Count != 0) {
          result.opusTagIds_.Add(other.opusTagIds_);
        }
        if (other.HasAlbumNumber) {
          AlbumNumber = other.AlbumNumber;
        }
        if (other.albums_.Count != 0) {
          result.albums_.Add(other.albums_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBFeedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBFeedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFeedId = input.ReadString(ref result.feedId_);
              break;
            }
            case 18: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 24: {
              result.hasActionType = input.ReadInt32(ref result.actionType_);
              break;
            }
            case 32: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 40: {
              result.hasDeviceType = input.ReadInt32(ref result.deviceType_);
              break;
            }
            case 50: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
            case 58: {
              result.hasGameId = input.ReadString(ref result.gameId_);
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.category_, out unknown)) {
                result.hasCategory = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.sodoType_, out unknown)) {
                result.hasSodoType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 128: {
              result.hasIsWithAppImage = input.ReadBool(ref result.isWithAppImage_);
              break;
            }
            case 170: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 178: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 184: {
              result.hasGender = input.ReadBool(ref result.gender_);
              break;
            }
            case 194: {
              result.hasSignature = input.ReadString(ref result.signature_);
              break;
            }
            case 200: {
              result.hasVip = input.ReadInt32(ref result.vip_);
              break;
            }
            case 210: {
              result.hasLocation = input.ReadString(ref result.location_);
              break;
            }
            case 250: {
              global::hdsense.PBDraw.Builder subBuilder = global::hdsense.PBDraw.CreateBuilder();
              if (result.hasDrawData) {
                subBuilder.MergeFrom(DrawData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DrawData = subBuilder.BuildPartial();
              break;
            }
            case 258: {
              result.hasTargetUserId = input.ReadString(ref result.targetUserId_);
              break;
            }
            case 266: {
              result.hasTargetUserNickName = input.ReadString(ref result.targetUserNickName_);
              break;
            }
            case 273: {
              result.hasHistoryScore = input.ReadDouble(ref result.historyScore_);
              break;
            }
            case 282: {
              result.hasOpusDesc = input.ReadString(ref result.opusDesc_);
              break;
            }
            case 290: {
              result.hasDrawDataUrl = input.ReadString(ref result.drawDataUrl_);
              break;
            }
            case 298: {
              input.ReadStringArray(tag, field_name, result.tags_);
              break;
            }
            case 304: {
              result.hasSpendTime = input.ReadInt32(ref result.spendTime_);
              break;
            }
            case 330: {
              result.hasOpusId = input.ReadString(ref result.opusId_);
              break;
            }
            case 336: {
              result.hasIsCorrect = input.ReadBool(ref result.isCorrect_);
              break;
            }
            case 344: {
              result.hasScore = input.ReadInt32(ref result.score_);
              break;
            }
            case 354: {
              input.ReadStringArray(tag, field_name, result.guessWords_);
              break;
            }
            case 360: {
              result.hasOpusStatus = input.ReadInt32(ref result.opusStatus_);
              break;
            }
            case 410: {
              result.hasComment = input.ReadString(ref result.comment_);
              break;
            }
            case 418: {
              global::hdsense.PBCommentInfo.Builder subBuilder = global::hdsense.PBCommentInfo.CreateBuilder();
              if (result.hasCommentInfo) {
                subBuilder.MergeFrom(CommentInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CommentInfo = subBuilder.BuildPartial();
              break;
            }
            case 442: {
              global::hdsense.PBCameraParameter.Builder subBuilder = global::hdsense.PBCameraParameter.CreateBuilder();
              if (result.hasCameraPara) {
                subBuilder.MergeFrom(CameraPara);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CameraPara = subBuilder.BuildPartial();
              break;
            }
            case 488: {
              result.hasMatchTimes = input.ReadInt32(ref result.matchTimes_);
              break;
            }
            case 496: {
              result.hasCorrectTimes = input.ReadInt32(ref result.correctTimes_);
              break;
            }
            case 504: {
              result.hasGuessTimes = input.ReadInt32(ref result.guessTimes_);
              break;
            }
            case 512: {
              result.hasCommentTimes = input.ReadInt32(ref result.commentTimes_);
              break;
            }
            case 522: {
              input.ReadMessageArray(tag, field_name, result.feedTimes_, global::hdsense.PBFeedTimes.DefaultInstance, extensionRegistry);
              break;
            }
            case 570: {
              result.hasOpusCreatorUserId = input.ReadString(ref result.opusCreatorUserId_);
              break;
            }
            case 578: {
              result.hasOpusCreatorNickName = input.ReadString(ref result.opusCreatorNickName_);
              break;
            }
            case 584: {
              result.hasOpusCreatorGender = input.ReadBool(ref result.opusCreatorGender_);
              break;
            }
            case 594: {
              result.hasOpusCreatorAvatar = input.ReadString(ref result.opusCreatorAvatar_);
              break;
            }
            case 650: {
              result.hasOpusWord = input.ReadString(ref result.opusWord_);
              break;
            }
            case 658: {
              result.hasOpusImage = input.ReadString(ref result.opusImage_);
              break;
            }
            case 666: {
              result.hasOpusThumbImage = input.ReadString(ref result.opusThumbImage_);
              break;
            }
            case 674: {
              result.hasDataUrl = input.ReadString(ref result.dataUrl_);
              break;
            }
            case 682: {
              result.hasQrUrl = input.ReadString(ref result.qrUrl_);
              break;
            }
            case 706: {
              result.hasContestUrl = input.ReadString(ref result.contestUrl_);
              break;
            }
            case 714: {
              result.hasContestComment = input.ReadString(ref result.contestComment_);
              break;
            }
            case 722: {
              result.hasContestName = input.ReadString(ref result.contestName_);
              break;
            }
            case 730: {
              result.hasContestId = input.ReadString(ref result.contestId_);
              break;
            }
            case 736: {
              result.hasVoteTimes = input.ReadInt32(ref result.voteTimes_);
              break;
            }
            case 745: {
              result.hasContestScore = input.ReadDouble(ref result.contestScore_);
              break;
            }
            case 754: {
              input.ReadMessageArray(tag, field_name, result.rankInfo_, global::hdsense.PBOpusRank.DefaultInstance, extensionRegistry);
              break;
            }
            case 760: {
              result.hasRankInTop = input.ReadInt32(ref result.rankInTop_);
              break;
            }
            case 770: {
              result.hasRankName = input.ReadString(ref result.rankName_);
              break;
            }
            case 776: {
              result.hasActivityType = input.ReadInt32(ref result.activityType_);
              break;
            }
            case 802: {
              global::hdsense.PBLearnDraw.Builder subBuilder = global::hdsense.PBLearnDraw.CreateBuilder();
              if (result.hasLearnDraw) {
                subBuilder.MergeFrom(LearnDraw);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LearnDraw = subBuilder.BuildPartial();
              break;
            }
            case 810: {
              global::hdsense.PBSingOpus.Builder subBuilder = global::hdsense.PBSingOpus.CreateBuilder();
              if (result.hasSing) {
                subBuilder.MergeFrom(Sing);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Sing = subBuilder.BuildPartial();
              break;
            }
            case 848: {
              result.hasOriginalStatus = input.ReadInt32(ref result.originalStatus_);
              break;
            }
            case 856: {
              result.hasPrintStatus = input.ReadInt32(ref result.printStatus_);
              break;
            }
            case 1602: {
              global::hdsense.PBLabelInfo.Builder subBuilder = global::hdsense.PBLabelInfo.CreateBuilder();
              if (result.hasDescLabelInfo) {
                subBuilder.MergeFrom(DescLabelInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DescLabelInfo = subBuilder.BuildPartial();
              break;
            }
            case 1610: {
              global::hdsense.PBSize.Builder subBuilder = global::hdsense.PBSize.CreateBuilder();
              if (result.hasCanvasSize) {
                subBuilder.MergeFrom(CanvasSize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CanvasSize = subBuilder.BuildPartial();
              break;
            }
            case 1642: {
              input.ReadMessageArray(tag, field_name, result.opusTags_, global::hdsense.PBSodoTag.DefaultInstance, extensionRegistry);
              break;
            }
            case 1650: {
              input.ReadStringArray(tag, field_name, result.opusTagIds_);
              break;
            }
            case 1680: {
              result.hasAlbumNumber = input.ReadInt32(ref result.albumNumber_);
              break;
            }
            case 1690: {
              input.ReadMessageArray(tag, field_name, result.albums_, global::hdsense.PBAlbum.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFeedId {
        get { return result.hasFeedId; }
      }
      public string FeedId {
        get { return result.FeedId; }
        set { SetFeedId(value); }
      }
      public Builder SetFeedId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFeedId = true;
        result.feedId_ = value;
        return this;
      }
      public Builder ClearFeedId() {
        PrepareBuilder();
        result.hasFeedId = false;
        result.feedId_ = "";
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasActionType {
        get { return result.hasActionType; }
      }
      public int ActionType {
        get { return result.ActionType; }
        set { SetActionType(value); }
      }
      public Builder SetActionType(int value) {
        PrepareBuilder();
        result.hasActionType = true;
        result.actionType_ = value;
        return this;
      }
      public Builder ClearActionType() {
        PrepareBuilder();
        result.hasActionType = false;
        result.actionType_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public int DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(int value) {
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = 0;
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
      
      public bool HasGameId {
        get { return result.hasGameId; }
      }
      public string GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder ClearGameId() {
        PrepareBuilder();
        result.hasGameId = false;
        result.gameId_ = "";
        return this;
      }
      
      public bool HasCategory {
       get { return result.hasCategory; }
      }
      public global::hdsense.PBOpusCategoryType Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(global::hdsense.PBOpusCategoryType value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = global::hdsense.PBOpusCategoryType.DRAW_CATEGORY;
        return this;
      }
      
      public bool HasSodoType {
       get { return result.hasSodoType; }
      }
      public global::hdsense.PBOpusSodoType SodoType {
        get { return result.SodoType; }
        set { SetSodoType(value); }
      }
      public Builder SetSodoType(global::hdsense.PBOpusSodoType value) {
        PrepareBuilder();
        result.hasSodoType = true;
        result.sodoType_ = value;
        return this;
      }
      public Builder ClearSodoType() {
        PrepareBuilder();
        result.hasSodoType = false;
        result.sodoType_ = global::hdsense.PBOpusSodoType.SODO_RENXIANG;
        return this;
      }
      
      public bool HasIsWithAppImage {
        get { return result.hasIsWithAppImage; }
      }
      public bool IsWithAppImage {
        get { return result.IsWithAppImage; }
        set { SetIsWithAppImage(value); }
      }
      public Builder SetIsWithAppImage(bool value) {
        PrepareBuilder();
        result.hasIsWithAppImage = true;
        result.isWithAppImage_ = value;
        return this;
      }
      public Builder ClearIsWithAppImage() {
        PrepareBuilder();
        result.hasIsWithAppImage = false;
        result.isWithAppImage_ = false;
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public bool Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(bool value) {
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = false;
        return this;
      }
      
      public bool HasSignature {
        get { return result.hasSignature; }
      }
      public string Signature {
        get { return result.Signature; }
        set { SetSignature(value); }
      }
      public Builder SetSignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignature = true;
        result.signature_ = value;
        return this;
      }
      public Builder ClearSignature() {
        PrepareBuilder();
        result.hasSignature = false;
        result.signature_ = "";
        return this;
      }
      
      public bool HasVip {
        get { return result.hasVip; }
      }
      public int Vip {
        get { return result.Vip; }
        set { SetVip(value); }
      }
      public Builder SetVip(int value) {
        PrepareBuilder();
        result.hasVip = true;
        result.vip_ = value;
        return this;
      }
      public Builder ClearVip() {
        PrepareBuilder();
        result.hasVip = false;
        result.vip_ = 0;
        return this;
      }
      
      public bool HasLocation {
        get { return result.hasLocation; }
      }
      public string Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = "";
        return this;
      }
      
      public bool HasDrawData {
       get { return result.hasDrawData; }
      }
      public global::hdsense.PBDraw DrawData {
        get { return result.DrawData; }
        set { SetDrawData(value); }
      }
      public Builder SetDrawData(global::hdsense.PBDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrawData = true;
        result.drawData_ = value;
        return this;
      }
      public Builder SetDrawData(global::hdsense.PBDraw.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDrawData = true;
        result.drawData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDrawData(global::hdsense.PBDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDrawData &&
            result.drawData_ != global::hdsense.PBDraw.DefaultInstance) {
            result.drawData_ = global::hdsense.PBDraw.CreateBuilder(result.drawData_).MergeFrom(value).BuildPartial();
        } else {
          result.drawData_ = value;
        }
        result.hasDrawData = true;
        return this;
      }
      public Builder ClearDrawData() {
        PrepareBuilder();
        result.hasDrawData = false;
        result.drawData_ = null;
        return this;
      }
      
      public bool HasTargetUserId {
        get { return result.hasTargetUserId; }
      }
      public string TargetUserId {
        get { return result.TargetUserId; }
        set { SetTargetUserId(value); }
      }
      public Builder SetTargetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetUserId = true;
        result.targetUserId_ = value;
        return this;
      }
      public Builder ClearTargetUserId() {
        PrepareBuilder();
        result.hasTargetUserId = false;
        result.targetUserId_ = "";
        return this;
      }
      
      public bool HasTargetUserNickName {
        get { return result.hasTargetUserNickName; }
      }
      public string TargetUserNickName {
        get { return result.TargetUserNickName; }
        set { SetTargetUserNickName(value); }
      }
      public Builder SetTargetUserNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetUserNickName = true;
        result.targetUserNickName_ = value;
        return this;
      }
      public Builder ClearTargetUserNickName() {
        PrepareBuilder();
        result.hasTargetUserNickName = false;
        result.targetUserNickName_ = "";
        return this;
      }
      
      public bool HasHistoryScore {
        get { return result.hasHistoryScore; }
      }
      public double HistoryScore {
        get { return result.HistoryScore; }
        set { SetHistoryScore(value); }
      }
      public Builder SetHistoryScore(double value) {
        PrepareBuilder();
        result.hasHistoryScore = true;
        result.historyScore_ = value;
        return this;
      }
      public Builder ClearHistoryScore() {
        PrepareBuilder();
        result.hasHistoryScore = false;
        result.historyScore_ = 0D;
        return this;
      }
      
      public bool HasOpusDesc {
        get { return result.hasOpusDesc; }
      }
      public string OpusDesc {
        get { return result.OpusDesc; }
        set { SetOpusDesc(value); }
      }
      public Builder SetOpusDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusDesc = true;
        result.opusDesc_ = value;
        return this;
      }
      public Builder ClearOpusDesc() {
        PrepareBuilder();
        result.hasOpusDesc = false;
        result.opusDesc_ = "";
        return this;
      }
      
      public bool HasDrawDataUrl {
        get { return result.hasDrawDataUrl; }
      }
      public string DrawDataUrl {
        get { return result.DrawDataUrl; }
        set { SetDrawDataUrl(value); }
      }
      public Builder SetDrawDataUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrawDataUrl = true;
        result.drawDataUrl_ = value;
        return this;
      }
      public Builder ClearDrawDataUrl() {
        PrepareBuilder();
        result.hasDrawDataUrl = false;
        result.drawDataUrl_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> TagsList {
        get { return PrepareBuilder().tags_; }
      }
      public int TagsCount {
        get { return result.TagsCount; }
      }
      public string GetTags(int index) {
        return result.GetTags(index);
      }
      public Builder SetTags(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tags_[index] = value;
        return this;
      }
      public Builder AddTags(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tags_.Add(value);
        return this;
      }
      public Builder AddRangeTags(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.tags_.Add(values);
        return this;
      }
      public Builder ClearTags() {
        PrepareBuilder();
        result.tags_.Clear();
        return this;
      }
      
      public bool HasSpendTime {
        get { return result.hasSpendTime; }
      }
      public int SpendTime {
        get { return result.SpendTime; }
        set { SetSpendTime(value); }
      }
      public Builder SetSpendTime(int value) {
        PrepareBuilder();
        result.hasSpendTime = true;
        result.spendTime_ = value;
        return this;
      }
      public Builder ClearSpendTime() {
        PrepareBuilder();
        result.hasSpendTime = false;
        result.spendTime_ = 0;
        return this;
      }
      
      public bool HasOpusId {
        get { return result.hasOpusId; }
      }
      public string OpusId {
        get { return result.OpusId; }
        set { SetOpusId(value); }
      }
      public Builder SetOpusId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusId = true;
        result.opusId_ = value;
        return this;
      }
      public Builder ClearOpusId() {
        PrepareBuilder();
        result.hasOpusId = false;
        result.opusId_ = "";
        return this;
      }
      
      public bool HasIsCorrect {
        get { return result.hasIsCorrect; }
      }
      public bool IsCorrect {
        get { return result.IsCorrect; }
        set { SetIsCorrect(value); }
      }
      public Builder SetIsCorrect(bool value) {
        PrepareBuilder();
        result.hasIsCorrect = true;
        result.isCorrect_ = value;
        return this;
      }
      public Builder ClearIsCorrect() {
        PrepareBuilder();
        result.hasIsCorrect = false;
        result.isCorrect_ = false;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public int Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(int value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> GuessWordsList {
        get { return PrepareBuilder().guessWords_; }
      }
      public int GuessWordsCount {
        get { return result.GuessWordsCount; }
      }
      public string GetGuessWords(int index) {
        return result.GetGuessWords(index);
      }
      public Builder SetGuessWords(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guessWords_[index] = value;
        return this;
      }
      public Builder AddGuessWords(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guessWords_.Add(value);
        return this;
      }
      public Builder AddRangeGuessWords(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.guessWords_.Add(values);
        return this;
      }
      public Builder ClearGuessWords() {
        PrepareBuilder();
        result.guessWords_.Clear();
        return this;
      }
      
      public bool HasOpusStatus {
        get { return result.hasOpusStatus; }
      }
      public int OpusStatus {
        get { return result.OpusStatus; }
        set { SetOpusStatus(value); }
      }
      public Builder SetOpusStatus(int value) {
        PrepareBuilder();
        result.hasOpusStatus = true;
        result.opusStatus_ = value;
        return this;
      }
      public Builder ClearOpusStatus() {
        PrepareBuilder();
        result.hasOpusStatus = false;
        result.opusStatus_ = 0;
        return this;
      }
      
      public bool HasComment {
        get { return result.hasComment; }
      }
      public string Comment {
        get { return result.Comment; }
        set { SetComment(value); }
      }
      public Builder SetComment(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasComment = true;
        result.comment_ = value;
        return this;
      }
      public Builder ClearComment() {
        PrepareBuilder();
        result.hasComment = false;
        result.comment_ = "";
        return this;
      }
      
      public bool HasCommentInfo {
       get { return result.hasCommentInfo; }
      }
      public global::hdsense.PBCommentInfo CommentInfo {
        get { return result.CommentInfo; }
        set { SetCommentInfo(value); }
      }
      public Builder SetCommentInfo(global::hdsense.PBCommentInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommentInfo = true;
        result.commentInfo_ = value;
        return this;
      }
      public Builder SetCommentInfo(global::hdsense.PBCommentInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCommentInfo = true;
        result.commentInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCommentInfo(global::hdsense.PBCommentInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCommentInfo &&
            result.commentInfo_ != global::hdsense.PBCommentInfo.DefaultInstance) {
            result.commentInfo_ = global::hdsense.PBCommentInfo.CreateBuilder(result.commentInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.commentInfo_ = value;
        }
        result.hasCommentInfo = true;
        return this;
      }
      public Builder ClearCommentInfo() {
        PrepareBuilder();
        result.hasCommentInfo = false;
        result.commentInfo_ = null;
        return this;
      }
      
      public bool HasCameraPara {
       get { return result.hasCameraPara; }
      }
      public global::hdsense.PBCameraParameter CameraPara {
        get { return result.CameraPara; }
        set { SetCameraPara(value); }
      }
      public Builder SetCameraPara(global::hdsense.PBCameraParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraPara = true;
        result.cameraPara_ = value;
        return this;
      }
      public Builder SetCameraPara(global::hdsense.PBCameraParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCameraPara = true;
        result.cameraPara_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCameraPara(global::hdsense.PBCameraParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCameraPara &&
            result.cameraPara_ != global::hdsense.PBCameraParameter.DefaultInstance) {
            result.cameraPara_ = global::hdsense.PBCameraParameter.CreateBuilder(result.cameraPara_).MergeFrom(value).BuildPartial();
        } else {
          result.cameraPara_ = value;
        }
        result.hasCameraPara = true;
        return this;
      }
      public Builder ClearCameraPara() {
        PrepareBuilder();
        result.hasCameraPara = false;
        result.cameraPara_ = null;
        return this;
      }
      
      public bool HasMatchTimes {
        get { return result.hasMatchTimes; }
      }
      public int MatchTimes {
        get { return result.MatchTimes; }
        set { SetMatchTimes(value); }
      }
      public Builder SetMatchTimes(int value) {
        PrepareBuilder();
        result.hasMatchTimes = true;
        result.matchTimes_ = value;
        return this;
      }
      public Builder ClearMatchTimes() {
        PrepareBuilder();
        result.hasMatchTimes = false;
        result.matchTimes_ = 0;
        return this;
      }
      
      public bool HasCorrectTimes {
        get { return result.hasCorrectTimes; }
      }
      public int CorrectTimes {
        get { return result.CorrectTimes; }
        set { SetCorrectTimes(value); }
      }
      public Builder SetCorrectTimes(int value) {
        PrepareBuilder();
        result.hasCorrectTimes = true;
        result.correctTimes_ = value;
        return this;
      }
      public Builder ClearCorrectTimes() {
        PrepareBuilder();
        result.hasCorrectTimes = false;
        result.correctTimes_ = 0;
        return this;
      }
      
      public bool HasGuessTimes {
        get { return result.hasGuessTimes; }
      }
      public int GuessTimes {
        get { return result.GuessTimes; }
        set { SetGuessTimes(value); }
      }
      public Builder SetGuessTimes(int value) {
        PrepareBuilder();
        result.hasGuessTimes = true;
        result.guessTimes_ = value;
        return this;
      }
      public Builder ClearGuessTimes() {
        PrepareBuilder();
        result.hasGuessTimes = false;
        result.guessTimes_ = 0;
        return this;
      }
      
      public bool HasCommentTimes {
        get { return result.hasCommentTimes; }
      }
      public int CommentTimes {
        get { return result.CommentTimes; }
        set { SetCommentTimes(value); }
      }
      public Builder SetCommentTimes(int value) {
        PrepareBuilder();
        result.hasCommentTimes = true;
        result.commentTimes_ = value;
        return this;
      }
      public Builder ClearCommentTimes() {
        PrepareBuilder();
        result.hasCommentTimes = false;
        result.commentTimes_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBFeedTimes> FeedTimesList {
        get { return PrepareBuilder().feedTimes_; }
      }
      public int FeedTimesCount {
        get { return result.FeedTimesCount; }
      }
      public global::hdsense.PBFeedTimes GetFeedTimes(int index) {
        return result.GetFeedTimes(index);
      }
      public Builder SetFeedTimes(int index, global::hdsense.PBFeedTimes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.feedTimes_[index] = value;
        return this;
      }
      public Builder SetFeedTimes(int index, global::hdsense.PBFeedTimes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.feedTimes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFeedTimes(global::hdsense.PBFeedTimes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.feedTimes_.Add(value);
        return this;
      }
      public Builder AddFeedTimes(global::hdsense.PBFeedTimes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.feedTimes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFeedTimes(scg::IEnumerable<global::hdsense.PBFeedTimes> values) {
        PrepareBuilder();
        result.feedTimes_.Add(values);
        return this;
      }
      public Builder ClearFeedTimes() {
        PrepareBuilder();
        result.feedTimes_.Clear();
        return this;
      }
      
      public bool HasOpusCreatorUserId {
        get { return result.hasOpusCreatorUserId; }
      }
      public string OpusCreatorUserId {
        get { return result.OpusCreatorUserId; }
        set { SetOpusCreatorUserId(value); }
      }
      public Builder SetOpusCreatorUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusCreatorUserId = true;
        result.opusCreatorUserId_ = value;
        return this;
      }
      public Builder ClearOpusCreatorUserId() {
        PrepareBuilder();
        result.hasOpusCreatorUserId = false;
        result.opusCreatorUserId_ = "";
        return this;
      }
      
      public bool HasOpusCreatorNickName {
        get { return result.hasOpusCreatorNickName; }
      }
      public string OpusCreatorNickName {
        get { return result.OpusCreatorNickName; }
        set { SetOpusCreatorNickName(value); }
      }
      public Builder SetOpusCreatorNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusCreatorNickName = true;
        result.opusCreatorNickName_ = value;
        return this;
      }
      public Builder ClearOpusCreatorNickName() {
        PrepareBuilder();
        result.hasOpusCreatorNickName = false;
        result.opusCreatorNickName_ = "";
        return this;
      }
      
      public bool HasOpusCreatorGender {
        get { return result.hasOpusCreatorGender; }
      }
      public bool OpusCreatorGender {
        get { return result.OpusCreatorGender; }
        set { SetOpusCreatorGender(value); }
      }
      public Builder SetOpusCreatorGender(bool value) {
        PrepareBuilder();
        result.hasOpusCreatorGender = true;
        result.opusCreatorGender_ = value;
        return this;
      }
      public Builder ClearOpusCreatorGender() {
        PrepareBuilder();
        result.hasOpusCreatorGender = false;
        result.opusCreatorGender_ = false;
        return this;
      }
      
      public bool HasOpusCreatorAvatar {
        get { return result.hasOpusCreatorAvatar; }
      }
      public string OpusCreatorAvatar {
        get { return result.OpusCreatorAvatar; }
        set { SetOpusCreatorAvatar(value); }
      }
      public Builder SetOpusCreatorAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusCreatorAvatar = true;
        result.opusCreatorAvatar_ = value;
        return this;
      }
      public Builder ClearOpusCreatorAvatar() {
        PrepareBuilder();
        result.hasOpusCreatorAvatar = false;
        result.opusCreatorAvatar_ = "";
        return this;
      }
      
      public bool HasOpusWord {
        get { return result.hasOpusWord; }
      }
      public string OpusWord {
        get { return result.OpusWord; }
        set { SetOpusWord(value); }
      }
      public Builder SetOpusWord(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusWord = true;
        result.opusWord_ = value;
        return this;
      }
      public Builder ClearOpusWord() {
        PrepareBuilder();
        result.hasOpusWord = false;
        result.opusWord_ = "";
        return this;
      }
      
      public bool HasOpusImage {
        get { return result.hasOpusImage; }
      }
      public string OpusImage {
        get { return result.OpusImage; }
        set { SetOpusImage(value); }
      }
      public Builder SetOpusImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusImage = true;
        result.opusImage_ = value;
        return this;
      }
      public Builder ClearOpusImage() {
        PrepareBuilder();
        result.hasOpusImage = false;
        result.opusImage_ = "";
        return this;
      }
      
      public bool HasOpusThumbImage {
        get { return result.hasOpusThumbImage; }
      }
      public string OpusThumbImage {
        get { return result.OpusThumbImage; }
        set { SetOpusThumbImage(value); }
      }
      public Builder SetOpusThumbImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusThumbImage = true;
        result.opusThumbImage_ = value;
        return this;
      }
      public Builder ClearOpusThumbImage() {
        PrepareBuilder();
        result.hasOpusThumbImage = false;
        result.opusThumbImage_ = "";
        return this;
      }
      
      public bool HasDataUrl {
        get { return result.hasDataUrl; }
      }
      public string DataUrl {
        get { return result.DataUrl; }
        set { SetDataUrl(value); }
      }
      public Builder SetDataUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDataUrl = true;
        result.dataUrl_ = value;
        return this;
      }
      public Builder ClearDataUrl() {
        PrepareBuilder();
        result.hasDataUrl = false;
        result.dataUrl_ = "";
        return this;
      }
      
      public bool HasQrUrl {
        get { return result.hasQrUrl; }
      }
      public string QrUrl {
        get { return result.QrUrl; }
        set { SetQrUrl(value); }
      }
      public Builder SetQrUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQrUrl = true;
        result.qrUrl_ = value;
        return this;
      }
      public Builder ClearQrUrl() {
        PrepareBuilder();
        result.hasQrUrl = false;
        result.qrUrl_ = "";
        return this;
      }
      
      public bool HasContestUrl {
        get { return result.hasContestUrl; }
      }
      public string ContestUrl {
        get { return result.ContestUrl; }
        set { SetContestUrl(value); }
      }
      public Builder SetContestUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestUrl = true;
        result.contestUrl_ = value;
        return this;
      }
      public Builder ClearContestUrl() {
        PrepareBuilder();
        result.hasContestUrl = false;
        result.contestUrl_ = "";
        return this;
      }
      
      public bool HasContestComment {
        get { return result.hasContestComment; }
      }
      public string ContestComment {
        get { return result.ContestComment; }
        set { SetContestComment(value); }
      }
      public Builder SetContestComment(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestComment = true;
        result.contestComment_ = value;
        return this;
      }
      public Builder ClearContestComment() {
        PrepareBuilder();
        result.hasContestComment = false;
        result.contestComment_ = "";
        return this;
      }
      
      public bool HasContestName {
        get { return result.hasContestName; }
      }
      public string ContestName {
        get { return result.ContestName; }
        set { SetContestName(value); }
      }
      public Builder SetContestName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestName = true;
        result.contestName_ = value;
        return this;
      }
      public Builder ClearContestName() {
        PrepareBuilder();
        result.hasContestName = false;
        result.contestName_ = "";
        return this;
      }
      
      public bool HasContestId {
        get { return result.hasContestId; }
      }
      public string ContestId {
        get { return result.ContestId; }
        set { SetContestId(value); }
      }
      public Builder SetContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestId = true;
        result.contestId_ = value;
        return this;
      }
      public Builder ClearContestId() {
        PrepareBuilder();
        result.hasContestId = false;
        result.contestId_ = "";
        return this;
      }
      
      public bool HasVoteTimes {
        get { return result.hasVoteTimes; }
      }
      public int VoteTimes {
        get { return result.VoteTimes; }
        set { SetVoteTimes(value); }
      }
      public Builder SetVoteTimes(int value) {
        PrepareBuilder();
        result.hasVoteTimes = true;
        result.voteTimes_ = value;
        return this;
      }
      public Builder ClearVoteTimes() {
        PrepareBuilder();
        result.hasVoteTimes = false;
        result.voteTimes_ = 0;
        return this;
      }
      
      public bool HasContestScore {
        get { return result.hasContestScore; }
      }
      public double ContestScore {
        get { return result.ContestScore; }
        set { SetContestScore(value); }
      }
      public Builder SetContestScore(double value) {
        PrepareBuilder();
        result.hasContestScore = true;
        result.contestScore_ = value;
        return this;
      }
      public Builder ClearContestScore() {
        PrepareBuilder();
        result.hasContestScore = false;
        result.contestScore_ = 0D;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBOpusRank> RankInfoList {
        get { return PrepareBuilder().rankInfo_; }
      }
      public int RankInfoCount {
        get { return result.RankInfoCount; }
      }
      public global::hdsense.PBOpusRank GetRankInfo(int index) {
        return result.GetRankInfo(index);
      }
      public Builder SetRankInfo(int index, global::hdsense.PBOpusRank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rankInfo_[index] = value;
        return this;
      }
      public Builder SetRankInfo(int index, global::hdsense.PBOpusRank.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rankInfo_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRankInfo(global::hdsense.PBOpusRank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rankInfo_.Add(value);
        return this;
      }
      public Builder AddRankInfo(global::hdsense.PBOpusRank.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rankInfo_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRankInfo(scg::IEnumerable<global::hdsense.PBOpusRank> values) {
        PrepareBuilder();
        result.rankInfo_.Add(values);
        return this;
      }
      public Builder ClearRankInfo() {
        PrepareBuilder();
        result.rankInfo_.Clear();
        return this;
      }
      
      public bool HasRankInTop {
        get { return result.hasRankInTop; }
      }
      public int RankInTop {
        get { return result.RankInTop; }
        set { SetRankInTop(value); }
      }
      public Builder SetRankInTop(int value) {
        PrepareBuilder();
        result.hasRankInTop = true;
        result.rankInTop_ = value;
        return this;
      }
      public Builder ClearRankInTop() {
        PrepareBuilder();
        result.hasRankInTop = false;
        result.rankInTop_ = 0;
        return this;
      }
      
      public bool HasRankName {
        get { return result.hasRankName; }
      }
      public string RankName {
        get { return result.RankName; }
        set { SetRankName(value); }
      }
      public Builder SetRankName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRankName = true;
        result.rankName_ = value;
        return this;
      }
      public Builder ClearRankName() {
        PrepareBuilder();
        result.hasRankName = false;
        result.rankName_ = "";
        return this;
      }
      
      public bool HasActivityType {
        get { return result.hasActivityType; }
      }
      public int ActivityType {
        get { return result.ActivityType; }
        set { SetActivityType(value); }
      }
      public Builder SetActivityType(int value) {
        PrepareBuilder();
        result.hasActivityType = true;
        result.activityType_ = value;
        return this;
      }
      public Builder ClearActivityType() {
        PrepareBuilder();
        result.hasActivityType = false;
        result.activityType_ = 0;
        return this;
      }
      
      public bool HasLearnDraw {
       get { return result.hasLearnDraw; }
      }
      public global::hdsense.PBLearnDraw LearnDraw {
        get { return result.LearnDraw; }
        set { SetLearnDraw(value); }
      }
      public Builder SetLearnDraw(global::hdsense.PBLearnDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLearnDraw = true;
        result.learnDraw_ = value;
        return this;
      }
      public Builder SetLearnDraw(global::hdsense.PBLearnDraw.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLearnDraw = true;
        result.learnDraw_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLearnDraw(global::hdsense.PBLearnDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLearnDraw &&
            result.learnDraw_ != global::hdsense.PBLearnDraw.DefaultInstance) {
            result.learnDraw_ = global::hdsense.PBLearnDraw.CreateBuilder(result.learnDraw_).MergeFrom(value).BuildPartial();
        } else {
          result.learnDraw_ = value;
        }
        result.hasLearnDraw = true;
        return this;
      }
      public Builder ClearLearnDraw() {
        PrepareBuilder();
        result.hasLearnDraw = false;
        result.learnDraw_ = null;
        return this;
      }
      
      public bool HasSing {
       get { return result.hasSing; }
      }
      public global::hdsense.PBSingOpus Sing {
        get { return result.Sing; }
        set { SetSing(value); }
      }
      public Builder SetSing(global::hdsense.PBSingOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSing = true;
        result.sing_ = value;
        return this;
      }
      public Builder SetSing(global::hdsense.PBSingOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSing = true;
        result.sing_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSing(global::hdsense.PBSingOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSing &&
            result.sing_ != global::hdsense.PBSingOpus.DefaultInstance) {
            result.sing_ = global::hdsense.PBSingOpus.CreateBuilder(result.sing_).MergeFrom(value).BuildPartial();
        } else {
          result.sing_ = value;
        }
        result.hasSing = true;
        return this;
      }
      public Builder ClearSing() {
        PrepareBuilder();
        result.hasSing = false;
        result.sing_ = null;
        return this;
      }
      
      public bool HasOriginalStatus {
        get { return result.hasOriginalStatus; }
      }
      public int OriginalStatus {
        get { return result.OriginalStatus; }
        set { SetOriginalStatus(value); }
      }
      public Builder SetOriginalStatus(int value) {
        PrepareBuilder();
        result.hasOriginalStatus = true;
        result.originalStatus_ = value;
        return this;
      }
      public Builder ClearOriginalStatus() {
        PrepareBuilder();
        result.hasOriginalStatus = false;
        result.originalStatus_ = 0;
        return this;
      }
      
      public bool HasPrintStatus {
        get { return result.hasPrintStatus; }
      }
      public int PrintStatus {
        get { return result.PrintStatus; }
        set { SetPrintStatus(value); }
      }
      public Builder SetPrintStatus(int value) {
        PrepareBuilder();
        result.hasPrintStatus = true;
        result.printStatus_ = value;
        return this;
      }
      public Builder ClearPrintStatus() {
        PrepareBuilder();
        result.hasPrintStatus = false;
        result.printStatus_ = 0;
        return this;
      }
      
      public bool HasDescLabelInfo {
       get { return result.hasDescLabelInfo; }
      }
      public global::hdsense.PBLabelInfo DescLabelInfo {
        get { return result.DescLabelInfo; }
        set { SetDescLabelInfo(value); }
      }
      public Builder SetDescLabelInfo(global::hdsense.PBLabelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescLabelInfo = true;
        result.descLabelInfo_ = value;
        return this;
      }
      public Builder SetDescLabelInfo(global::hdsense.PBLabelInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDescLabelInfo = true;
        result.descLabelInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDescLabelInfo(global::hdsense.PBLabelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDescLabelInfo &&
            result.descLabelInfo_ != global::hdsense.PBLabelInfo.DefaultInstance) {
            result.descLabelInfo_ = global::hdsense.PBLabelInfo.CreateBuilder(result.descLabelInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.descLabelInfo_ = value;
        }
        result.hasDescLabelInfo = true;
        return this;
      }
      public Builder ClearDescLabelInfo() {
        PrepareBuilder();
        result.hasDescLabelInfo = false;
        result.descLabelInfo_ = null;
        return this;
      }
      
      public bool HasCanvasSize {
       get { return result.hasCanvasSize; }
      }
      public global::hdsense.PBSize CanvasSize {
        get { return result.CanvasSize; }
        set { SetCanvasSize(value); }
      }
      public Builder SetCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = value;
        return this;
      }
      public Builder SetCanvasSize(global::hdsense.PBSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCanvasSize &&
            result.canvasSize_ != global::hdsense.PBSize.DefaultInstance) {
            result.canvasSize_ = global::hdsense.PBSize.CreateBuilder(result.canvasSize_).MergeFrom(value).BuildPartial();
        } else {
          result.canvasSize_ = value;
        }
        result.hasCanvasSize = true;
        return this;
      }
      public Builder ClearCanvasSize() {
        PrepareBuilder();
        result.hasCanvasSize = false;
        result.canvasSize_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBSodoTag> OpusTagsList {
        get { return PrepareBuilder().opusTags_; }
      }
      public int OpusTagsCount {
        get { return result.OpusTagsCount; }
      }
      public global::hdsense.PBSodoTag GetOpusTags(int index) {
        return result.GetOpusTags(index);
      }
      public Builder SetOpusTags(int index, global::hdsense.PBSodoTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opusTags_[index] = value;
        return this;
      }
      public Builder SetOpusTags(int index, global::hdsense.PBSodoTag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.opusTags_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOpusTags(global::hdsense.PBSodoTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opusTags_.Add(value);
        return this;
      }
      public Builder AddOpusTags(global::hdsense.PBSodoTag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.opusTags_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOpusTags(scg::IEnumerable<global::hdsense.PBSodoTag> values) {
        PrepareBuilder();
        result.opusTags_.Add(values);
        return this;
      }
      public Builder ClearOpusTags() {
        PrepareBuilder();
        result.opusTags_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> OpusTagIdsList {
        get { return PrepareBuilder().opusTagIds_; }
      }
      public int OpusTagIdsCount {
        get { return result.OpusTagIdsCount; }
      }
      public string GetOpusTagIds(int index) {
        return result.GetOpusTagIds(index);
      }
      public Builder SetOpusTagIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opusTagIds_[index] = value;
        return this;
      }
      public Builder AddOpusTagIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opusTagIds_.Add(value);
        return this;
      }
      public Builder AddRangeOpusTagIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.opusTagIds_.Add(values);
        return this;
      }
      public Builder ClearOpusTagIds() {
        PrepareBuilder();
        result.opusTagIds_.Clear();
        return this;
      }
      
      public bool HasAlbumNumber {
        get { return result.hasAlbumNumber; }
      }
      public int AlbumNumber {
        get { return result.AlbumNumber; }
        set { SetAlbumNumber(value); }
      }
      public Builder SetAlbumNumber(int value) {
        PrepareBuilder();
        result.hasAlbumNumber = true;
        result.albumNumber_ = value;
        return this;
      }
      public Builder ClearAlbumNumber() {
        PrepareBuilder();
        result.hasAlbumNumber = false;
        result.albumNumber_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBAlbum> AlbumsList {
        get { return PrepareBuilder().albums_; }
      }
      public int AlbumsCount {
        get { return result.AlbumsCount; }
      }
      public global::hdsense.PBAlbum GetAlbums(int index) {
        return result.GetAlbums(index);
      }
      public Builder SetAlbums(int index, global::hdsense.PBAlbum value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.albums_[index] = value;
        return this;
      }
      public Builder SetAlbums(int index, global::hdsense.PBAlbum.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.albums_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAlbums(global::hdsense.PBAlbum value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.albums_.Add(value);
        return this;
      }
      public Builder AddAlbums(global::hdsense.PBAlbum.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.albums_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAlbums(scg::IEnumerable<global::hdsense.PBAlbum> values) {
        PrepareBuilder();
        result.albums_.Add(values);
        return this;
      }
      public Builder ClearAlbums() {
        PrepareBuilder();
        result.albums_.Clear();
        return this;
      }
    }
    static PBFeed() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPoint : pb::GeneratedMessage<PBPoint, PBPoint.Builder> {
    private PBPoint() { }
    private static readonly PBPoint defaultInstance = new PBPoint().MakeReadOnly();
    private static readonly string[] _pBPointFieldNames = new string[] { "x", "y" };
    private static readonly uint[] _pBPointFieldTags = new uint[] { 13, 21 };
    public static PBPoint DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPoint DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPoint ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBPoint__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPoint, PBPoint.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBPoint__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 1;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 2;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasX) return false;
        if (!hasY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPointFieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[1], Y);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPoint ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPoint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPoint ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPoint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPoint ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPoint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPoint ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPoint ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPoint ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPoint ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPoint MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPoint prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPoint, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPoint cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPoint result;
      
      private PBPoint PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPoint original = result;
          result = new PBPoint();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPoint MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBPoint.Descriptor; }
      }
      
      public override PBPoint DefaultInstanceForType {
        get { return global::hdsense.PBPoint.DefaultInstance; }
      }
      
      public override PBPoint BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPoint) {
          return MergeFrom((PBPoint) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPoint other) {
        if (other == global::hdsense.PBPoint.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPointFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPointFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
    }
    static PBPoint() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBColor : pb::GeneratedMessage<PBColor, PBColor.Builder> {
    private PBColor() { }
    private static readonly PBColor defaultInstance = new PBColor().MakeReadOnly();
    private static readonly string[] _pBColorFieldNames = new string[] { "alpha", "blue", "green", "red" };
    private static readonly uint[] _pBColorFieldTags = new uint[] { 37, 21, 29, 13 };
    public static PBColor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBColor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBColor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBColor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBColor, PBColor.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBColor__FieldAccessorTable; }
    }
    
    public const int RedFieldNumber = 1;
    private bool hasRed;
    private float red_;
    public bool HasRed {
      get { return hasRed; }
    }
    public float Red {
      get { return red_; }
    }
    
    public const int BlueFieldNumber = 2;
    private bool hasBlue;
    private float blue_;
    public bool HasBlue {
      get { return hasBlue; }
    }
    public float Blue {
      get { return blue_; }
    }
    
    public const int GreenFieldNumber = 3;
    private bool hasGreen;
    private float green_;
    public bool HasGreen {
      get { return hasGreen; }
    }
    public float Green {
      get { return green_; }
    }
    
    public const int AlphaFieldNumber = 4;
    private bool hasAlpha;
    private float alpha_;
    public bool HasAlpha {
      get { return hasAlpha; }
    }
    public float Alpha {
      get { return alpha_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRed) return false;
        if (!hasBlue) return false;
        if (!hasGreen) return false;
        if (!hasAlpha) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBColorFieldNames;
      if (hasRed) {
        output.WriteFloat(1, field_names[3], Red);
      }
      if (hasBlue) {
        output.WriteFloat(2, field_names[1], Blue);
      }
      if (hasGreen) {
        output.WriteFloat(3, field_names[2], Green);
      }
      if (hasAlpha) {
        output.WriteFloat(4, field_names[0], Alpha);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRed) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Red);
        }
        if (hasBlue) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Blue);
        }
        if (hasGreen) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Green);
        }
        if (hasAlpha) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Alpha);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBColor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBColor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBColor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBColor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBColor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBColor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBColor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBColor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBColor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBColor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBColor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBColor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBColor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBColor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBColor result;
      
      private PBColor PrepareBuilder() {
        if (resultIsReadOnly) {
          PBColor original = result;
          result = new PBColor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBColor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBColor.Descriptor; }
      }
      
      public override PBColor DefaultInstanceForType {
        get { return global::hdsense.PBColor.DefaultInstance; }
      }
      
      public override PBColor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBColor) {
          return MergeFrom((PBColor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBColor other) {
        if (other == global::hdsense.PBColor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRed) {
          Red = other.Red;
        }
        if (other.HasBlue) {
          Blue = other.Blue;
        }
        if (other.HasGreen) {
          Green = other.Green;
        }
        if (other.HasAlpha) {
          Alpha = other.Alpha;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBColorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBColorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasRed = input.ReadFloat(ref result.red_);
              break;
            }
            case 21: {
              result.hasBlue = input.ReadFloat(ref result.blue_);
              break;
            }
            case 29: {
              result.hasGreen = input.ReadFloat(ref result.green_);
              break;
            }
            case 37: {
              result.hasAlpha = input.ReadFloat(ref result.alpha_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRed {
        get { return result.hasRed; }
      }
      public float Red {
        get { return result.Red; }
        set { SetRed(value); }
      }
      public Builder SetRed(float value) {
        PrepareBuilder();
        result.hasRed = true;
        result.red_ = value;
        return this;
      }
      public Builder ClearRed() {
        PrepareBuilder();
        result.hasRed = false;
        result.red_ = 0F;
        return this;
      }
      
      public bool HasBlue {
        get { return result.hasBlue; }
      }
      public float Blue {
        get { return result.Blue; }
        set { SetBlue(value); }
      }
      public Builder SetBlue(float value) {
        PrepareBuilder();
        result.hasBlue = true;
        result.blue_ = value;
        return this;
      }
      public Builder ClearBlue() {
        PrepareBuilder();
        result.hasBlue = false;
        result.blue_ = 0F;
        return this;
      }
      
      public bool HasGreen {
        get { return result.hasGreen; }
      }
      public float Green {
        get { return result.Green; }
        set { SetGreen(value); }
      }
      public Builder SetGreen(float value) {
        PrepareBuilder();
        result.hasGreen = true;
        result.green_ = value;
        return this;
      }
      public Builder ClearGreen() {
        PrepareBuilder();
        result.hasGreen = false;
        result.green_ = 0F;
        return this;
      }
      
      public bool HasAlpha {
        get { return result.hasAlpha; }
      }
      public float Alpha {
        get { return result.Alpha; }
        set { SetAlpha(value); }
      }
      public Builder SetAlpha(float value) {
        PrepareBuilder();
        result.hasAlpha = true;
        result.alpha_ = value;
        return this;
      }
      public Builder ClearAlpha() {
        PrepareBuilder();
        result.hasAlpha = false;
        result.alpha_ = 0F;
        return this;
      }
    }
    static PBColor() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBNoCompressDrawAction : pb::GeneratedMessage<PBNoCompressDrawAction, PBNoCompressDrawAction.Builder> {
    private PBNoCompressDrawAction() { }
    private static readonly PBNoCompressDrawAction defaultInstance = new PBNoCompressDrawAction().MakeReadOnly();
    private static readonly string[] _pBNoCompressDrawActionFieldNames = new string[] { "alpha", "blue", "canvasSize", "color", "green", "penType", "point", "pointX", "pointY", "rectComponent", "red", "rgbColor", "shapeType", "type", "width" };
    private static readonly uint[] _pBNoCompressDrawActionFieldTags = new uint[] { 197, 181, 66, 26, 189, 40, 18, 93, 101, 61, 173, 160, 48, 8, 37 };
    public static PBNoCompressDrawAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBNoCompressDrawAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBNoCompressDrawAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBNoCompressDrawAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBNoCompressDrawAction, PBNoCompressDrawAction.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBNoCompressDrawAction__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int PointFieldNumber = 2;
    private pbc::PopsicleList<global::hdsense.PBPoint> point_ = new pbc::PopsicleList<global::hdsense.PBPoint>();
    public scg::IList<global::hdsense.PBPoint> PointList {
      get { return point_; }
    }
    public int PointCount {
      get { return point_.Count; }
    }
    public global::hdsense.PBPoint GetPoint(int index) {
      return point_[index];
    }
    
    public const int ColorFieldNumber = 3;
    private bool hasColor;
    private global::hdsense.PBColor color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public global::hdsense.PBColor Color {
      get { return color_ ?? global::hdsense.PBColor.DefaultInstance; }
    }
    
    public const int WidthFieldNumber = 4;
    private bool hasWidth;
    private float width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public float Width {
      get { return width_; }
    }
    
    public const int PenTypeFieldNumber = 5;
    private bool hasPenType;
    private int penType_;
    public bool HasPenType {
      get { return hasPenType; }
    }
    public int PenType {
      get { return penType_; }
    }
    
    public const int ShapeTypeFieldNumber = 6;
    private bool hasShapeType;
    private int shapeType_;
    public bool HasShapeType {
      get { return hasShapeType; }
    }
    public int ShapeType {
      get { return shapeType_; }
    }
    
    public const int RectComponentFieldNumber = 7;
    private pbc::PopsicleList<float> rectComponent_ = new pbc::PopsicleList<float>();
    public scg::IList<float> RectComponentList {
      get { return pbc::Lists.AsReadOnly(rectComponent_); }
    }
    public int RectComponentCount {
      get { return rectComponent_.Count; }
    }
    public float GetRectComponent(int index) {
      return rectComponent_[index];
    }
    
    public const int CanvasSizeFieldNumber = 8;
    private bool hasCanvasSize;
    private global::hdsense.PBSize canvasSize_;
    public bool HasCanvasSize {
      get { return hasCanvasSize; }
    }
    public global::hdsense.PBSize CanvasSize {
      get { return canvasSize_ ?? global::hdsense.PBSize.DefaultInstance; }
    }
    
    public const int PointXFieldNumber = 11;
    private pbc::PopsicleList<float> pointX_ = new pbc::PopsicleList<float>();
    public scg::IList<float> PointXList {
      get { return pbc::Lists.AsReadOnly(pointX_); }
    }
    public int PointXCount {
      get { return pointX_.Count; }
    }
    public float GetPointX(int index) {
      return pointX_[index];
    }
    
    public const int PointYFieldNumber = 12;
    private pbc::PopsicleList<float> pointY_ = new pbc::PopsicleList<float>();
    public scg::IList<float> PointYList {
      get { return pbc::Lists.AsReadOnly(pointY_); }
    }
    public int PointYCount {
      get { return pointY_.Count; }
    }
    public float GetPointY(int index) {
      return pointY_[index];
    }
    
    public const int RgbColorFieldNumber = 20;
    private bool hasRgbColor;
    private uint rgbColor_;
    public bool HasRgbColor {
      get { return hasRgbColor; }
    }
    [global::System.CLSCompliant(false)]
    public uint RgbColor {
      get { return rgbColor_; }
    }
    
    public const int RedFieldNumber = 21;
    private bool hasRed;
    private float red_;
    public bool HasRed {
      get { return hasRed; }
    }
    public float Red {
      get { return red_; }
    }
    
    public const int BlueFieldNumber = 22;
    private bool hasBlue;
    private float blue_;
    public bool HasBlue {
      get { return hasBlue; }
    }
    public float Blue {
      get { return blue_; }
    }
    
    public const int GreenFieldNumber = 23;
    private bool hasGreen;
    private float green_;
    public bool HasGreen {
      get { return hasGreen; }
    }
    public float Green {
      get { return green_; }
    }
    
    public const int AlphaFieldNumber = 24;
    private bool hasAlpha;
    private float alpha_;
    public bool HasAlpha {
      get { return hasAlpha; }
    }
    public float Alpha {
      get { return alpha_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        foreach (global::hdsense.PBPoint element in PointList) {
          if (!element.IsInitialized) return false;
        }
        if (HasColor) {
          if (!Color.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBNoCompressDrawActionFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[13], Type);
      }
      if (point_.Count > 0) {
        output.WriteMessageArray(2, field_names[6], point_);
      }
      if (hasColor) {
        output.WriteMessage(3, field_names[3], Color);
      }
      if (hasWidth) {
        output.WriteFloat(4, field_names[14], Width);
      }
      if (hasPenType) {
        output.WriteInt32(5, field_names[5], PenType);
      }
      if (hasShapeType) {
        output.WriteInt32(6, field_names[12], ShapeType);
      }
      if (rectComponent_.Count > 0) {
        output.WriteFloatArray(7, field_names[9], rectComponent_);
      }
      if (hasCanvasSize) {
        output.WriteMessage(8, field_names[2], CanvasSize);
      }
      if (pointX_.Count > 0) {
        output.WriteFloatArray(11, field_names[7], pointX_);
      }
      if (pointY_.Count > 0) {
        output.WriteFloatArray(12, field_names[8], pointY_);
      }
      if (hasRgbColor) {
        output.WriteUInt32(20, field_names[11], RgbColor);
      }
      if (hasRed) {
        output.WriteFloat(21, field_names[10], Red);
      }
      if (hasBlue) {
        output.WriteFloat(22, field_names[1], Blue);
      }
      if (hasGreen) {
        output.WriteFloat(23, field_names[4], Green);
      }
      if (hasAlpha) {
        output.WriteFloat(24, field_names[0], Alpha);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        foreach (global::hdsense.PBPoint element in PointList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        if (hasColor) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Color);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Width);
        }
        if (hasPenType) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, PenType);
        }
        if (hasShapeType) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, ShapeType);
        }
        {
          int dataSize = 0;
          dataSize = 4 * rectComponent_.Count;
          size += dataSize;
          size += 1 * rectComponent_.Count;
        }
        if (hasCanvasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, CanvasSize);
        }
        {
          int dataSize = 0;
          dataSize = 4 * pointX_.Count;
          size += dataSize;
          size += 1 * pointX_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * pointY_.Count;
          size += dataSize;
          size += 1 * pointY_.Count;
        }
        if (hasRgbColor) {
          size += pb::CodedOutputStream.ComputeUInt32Size(20, RgbColor);
        }
        if (hasRed) {
          size += pb::CodedOutputStream.ComputeFloatSize(21, Red);
        }
        if (hasBlue) {
          size += pb::CodedOutputStream.ComputeFloatSize(22, Blue);
        }
        if (hasGreen) {
          size += pb::CodedOutputStream.ComputeFloatSize(23, Green);
        }
        if (hasAlpha) {
          size += pb::CodedOutputStream.ComputeFloatSize(24, Alpha);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBNoCompressDrawAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBNoCompressDrawAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBNoCompressDrawAction MakeReadOnly() {
      point_.MakeReadOnly();
      rectComponent_.MakeReadOnly();
      pointX_.MakeReadOnly();
      pointY_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBNoCompressDrawAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBNoCompressDrawAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBNoCompressDrawAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBNoCompressDrawAction result;
      
      private PBNoCompressDrawAction PrepareBuilder() {
        if (resultIsReadOnly) {
          PBNoCompressDrawAction original = result;
          result = new PBNoCompressDrawAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBNoCompressDrawAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBNoCompressDrawAction.Descriptor; }
      }
      
      public override PBNoCompressDrawAction DefaultInstanceForType {
        get { return global::hdsense.PBNoCompressDrawAction.DefaultInstance; }
      }
      
      public override PBNoCompressDrawAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBNoCompressDrawAction) {
          return MergeFrom((PBNoCompressDrawAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBNoCompressDrawAction other) {
        if (other == global::hdsense.PBNoCompressDrawAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.point_.Count != 0) {
          result.point_.Add(other.point_);
        }
        if (other.HasColor) {
          MergeColor(other.Color);
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasPenType) {
          PenType = other.PenType;
        }
        if (other.HasShapeType) {
          ShapeType = other.ShapeType;
        }
        if (other.rectComponent_.Count != 0) {
          result.rectComponent_.Add(other.rectComponent_);
        }
        if (other.HasCanvasSize) {
          MergeCanvasSize(other.CanvasSize);
        }
        if (other.pointX_.Count != 0) {
          result.pointX_.Add(other.pointX_);
        }
        if (other.pointY_.Count != 0) {
          result.pointY_.Add(other.pointY_);
        }
        if (other.HasRgbColor) {
          RgbColor = other.RgbColor;
        }
        if (other.HasRed) {
          Red = other.Red;
        }
        if (other.HasBlue) {
          Blue = other.Blue;
        }
        if (other.HasGreen) {
          Green = other.Green;
        }
        if (other.HasAlpha) {
          Alpha = other.Alpha;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBNoCompressDrawActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBNoCompressDrawActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.point_, global::hdsense.PBPoint.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              global::hdsense.PBColor.Builder subBuilder = global::hdsense.PBColor.CreateBuilder();
              if (result.hasColor) {
                subBuilder.MergeFrom(Color);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Color = subBuilder.BuildPartial();
              break;
            }
            case 37: {
              result.hasWidth = input.ReadFloat(ref result.width_);
              break;
            }
            case 40: {
              result.hasPenType = input.ReadInt32(ref result.penType_);
              break;
            }
            case 48: {
              result.hasShapeType = input.ReadInt32(ref result.shapeType_);
              break;
            }
            case 58:
            case 61: {
              input.ReadFloatArray(tag, field_name, result.rectComponent_);
              break;
            }
            case 66: {
              global::hdsense.PBSize.Builder subBuilder = global::hdsense.PBSize.CreateBuilder();
              if (result.hasCanvasSize) {
                subBuilder.MergeFrom(CanvasSize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CanvasSize = subBuilder.BuildPartial();
              break;
            }
            case 90:
            case 93: {
              input.ReadFloatArray(tag, field_name, result.pointX_);
              break;
            }
            case 98:
            case 101: {
              input.ReadFloatArray(tag, field_name, result.pointY_);
              break;
            }
            case 160: {
              result.hasRgbColor = input.ReadUInt32(ref result.rgbColor_);
              break;
            }
            case 173: {
              result.hasRed = input.ReadFloat(ref result.red_);
              break;
            }
            case 181: {
              result.hasBlue = input.ReadFloat(ref result.blue_);
              break;
            }
            case 189: {
              result.hasGreen = input.ReadFloat(ref result.green_);
              break;
            }
            case 197: {
              result.hasAlpha = input.ReadFloat(ref result.alpha_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBPoint> PointList {
        get { return PrepareBuilder().point_; }
      }
      public int PointCount {
        get { return result.PointCount; }
      }
      public global::hdsense.PBPoint GetPoint(int index) {
        return result.GetPoint(index);
      }
      public Builder SetPoint(int index, global::hdsense.PBPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.point_[index] = value;
        return this;
      }
      public Builder SetPoint(int index, global::hdsense.PBPoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.point_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPoint(global::hdsense.PBPoint value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.point_.Add(value);
        return this;
      }
      public Builder AddPoint(global::hdsense.PBPoint.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.point_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePoint(scg::IEnumerable<global::hdsense.PBPoint> values) {
        PrepareBuilder();
        result.point_.Add(values);
        return this;
      }
      public Builder ClearPoint() {
        PrepareBuilder();
        result.point_.Clear();
        return this;
      }
      
      public bool HasColor {
       get { return result.hasColor; }
      }
      public global::hdsense.PBColor Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(global::hdsense.PBColor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder SetColor(global::hdsense.PBColor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = builderForValue.Build();
        return this;
      }
      public Builder MergeColor(global::hdsense.PBColor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasColor &&
            result.color_ != global::hdsense.PBColor.DefaultInstance) {
            result.color_ = global::hdsense.PBColor.CreateBuilder(result.color_).MergeFrom(value).BuildPartial();
        } else {
          result.color_ = value;
        }
        result.hasColor = true;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = null;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public float Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(float value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0F;
        return this;
      }
      
      public bool HasPenType {
        get { return result.hasPenType; }
      }
      public int PenType {
        get { return result.PenType; }
        set { SetPenType(value); }
      }
      public Builder SetPenType(int value) {
        PrepareBuilder();
        result.hasPenType = true;
        result.penType_ = value;
        return this;
      }
      public Builder ClearPenType() {
        PrepareBuilder();
        result.hasPenType = false;
        result.penType_ = 0;
        return this;
      }
      
      public bool HasShapeType {
        get { return result.hasShapeType; }
      }
      public int ShapeType {
        get { return result.ShapeType; }
        set { SetShapeType(value); }
      }
      public Builder SetShapeType(int value) {
        PrepareBuilder();
        result.hasShapeType = true;
        result.shapeType_ = value;
        return this;
      }
      public Builder ClearShapeType() {
        PrepareBuilder();
        result.hasShapeType = false;
        result.shapeType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<float> RectComponentList {
        get { return PrepareBuilder().rectComponent_; }
      }
      public int RectComponentCount {
        get { return result.RectComponentCount; }
      }
      public float GetRectComponent(int index) {
        return result.GetRectComponent(index);
      }
      public Builder SetRectComponent(int index, float value) {
        PrepareBuilder();
        result.rectComponent_[index] = value;
        return this;
      }
      public Builder AddRectComponent(float value) {
        PrepareBuilder();
        result.rectComponent_.Add(value);
        return this;
      }
      public Builder AddRangeRectComponent(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.rectComponent_.Add(values);
        return this;
      }
      public Builder ClearRectComponent() {
        PrepareBuilder();
        result.rectComponent_.Clear();
        return this;
      }
      
      public bool HasCanvasSize {
       get { return result.hasCanvasSize; }
      }
      public global::hdsense.PBSize CanvasSize {
        get { return result.CanvasSize; }
        set { SetCanvasSize(value); }
      }
      public Builder SetCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = value;
        return this;
      }
      public Builder SetCanvasSize(global::hdsense.PBSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCanvasSize &&
            result.canvasSize_ != global::hdsense.PBSize.DefaultInstance) {
            result.canvasSize_ = global::hdsense.PBSize.CreateBuilder(result.canvasSize_).MergeFrom(value).BuildPartial();
        } else {
          result.canvasSize_ = value;
        }
        result.hasCanvasSize = true;
        return this;
      }
      public Builder ClearCanvasSize() {
        PrepareBuilder();
        result.hasCanvasSize = false;
        result.canvasSize_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<float> PointXList {
        get { return PrepareBuilder().pointX_; }
      }
      public int PointXCount {
        get { return result.PointXCount; }
      }
      public float GetPointX(int index) {
        return result.GetPointX(index);
      }
      public Builder SetPointX(int index, float value) {
        PrepareBuilder();
        result.pointX_[index] = value;
        return this;
      }
      public Builder AddPointX(float value) {
        PrepareBuilder();
        result.pointX_.Add(value);
        return this;
      }
      public Builder AddRangePointX(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.pointX_.Add(values);
        return this;
      }
      public Builder ClearPointX() {
        PrepareBuilder();
        result.pointX_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> PointYList {
        get { return PrepareBuilder().pointY_; }
      }
      public int PointYCount {
        get { return result.PointYCount; }
      }
      public float GetPointY(int index) {
        return result.GetPointY(index);
      }
      public Builder SetPointY(int index, float value) {
        PrepareBuilder();
        result.pointY_[index] = value;
        return this;
      }
      public Builder AddPointY(float value) {
        PrepareBuilder();
        result.pointY_.Add(value);
        return this;
      }
      public Builder AddRangePointY(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.pointY_.Add(values);
        return this;
      }
      public Builder ClearPointY() {
        PrepareBuilder();
        result.pointY_.Clear();
        return this;
      }
      
      public bool HasRgbColor {
        get { return result.hasRgbColor; }
      }
      [global::System.CLSCompliant(false)]
      public uint RgbColor {
        get { return result.RgbColor; }
        set { SetRgbColor(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetRgbColor(uint value) {
        PrepareBuilder();
        result.hasRgbColor = true;
        result.rgbColor_ = value;
        return this;
      }
      public Builder ClearRgbColor() {
        PrepareBuilder();
        result.hasRgbColor = false;
        result.rgbColor_ = 0;
        return this;
      }
      
      public bool HasRed {
        get { return result.hasRed; }
      }
      public float Red {
        get { return result.Red; }
        set { SetRed(value); }
      }
      public Builder SetRed(float value) {
        PrepareBuilder();
        result.hasRed = true;
        result.red_ = value;
        return this;
      }
      public Builder ClearRed() {
        PrepareBuilder();
        result.hasRed = false;
        result.red_ = 0F;
        return this;
      }
      
      public bool HasBlue {
        get { return result.hasBlue; }
      }
      public float Blue {
        get { return result.Blue; }
        set { SetBlue(value); }
      }
      public Builder SetBlue(float value) {
        PrepareBuilder();
        result.hasBlue = true;
        result.blue_ = value;
        return this;
      }
      public Builder ClearBlue() {
        PrepareBuilder();
        result.hasBlue = false;
        result.blue_ = 0F;
        return this;
      }
      
      public bool HasGreen {
        get { return result.hasGreen; }
      }
      public float Green {
        get { return result.Green; }
        set { SetGreen(value); }
      }
      public Builder SetGreen(float value) {
        PrepareBuilder();
        result.hasGreen = true;
        result.green_ = value;
        return this;
      }
      public Builder ClearGreen() {
        PrepareBuilder();
        result.hasGreen = false;
        result.green_ = 0F;
        return this;
      }
      
      public bool HasAlpha {
        get { return result.hasAlpha; }
      }
      public float Alpha {
        get { return result.Alpha; }
        set { SetAlpha(value); }
      }
      public Builder SetAlpha(float value) {
        PrepareBuilder();
        result.hasAlpha = true;
        result.alpha_ = value;
        return this;
      }
      public Builder ClearAlpha() {
        PrepareBuilder();
        result.hasAlpha = false;
        result.alpha_ = 0F;
        return this;
      }
    }
    static PBNoCompressDrawAction() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBNoCompressDrawData : pb::GeneratedMessage<PBNoCompressDrawData, PBNoCompressDrawData.Builder> {
    private PBNoCompressDrawData() { }
    private static readonly PBNoCompressDrawData defaultInstance = new PBNoCompressDrawData().MakeReadOnly();
    private static readonly string[] _pBNoCompressDrawDataFieldNames = new string[] { "bgImageName", "canvasSize", "drawActionList", "drawActionList2", "drawToUser", "layer", "opusDesc", "version" };
    private static readonly uint[] _pBNoCompressDrawDataFieldTags = new uint[] { 66, 34, 10, 42, 50, 74, 58, 16 };
    public static PBNoCompressDrawData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBNoCompressDrawData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBNoCompressDrawData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBNoCompressDrawData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBNoCompressDrawData, PBNoCompressDrawData.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBNoCompressDrawData__FieldAccessorTable; }
    }
    
    public const int DrawActionListFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBNoCompressDrawAction> drawActionList_ = new pbc::PopsicleList<global::hdsense.PBNoCompressDrawAction>();
    public scg::IList<global::hdsense.PBNoCompressDrawAction> DrawActionListList {
      get { return drawActionList_; }
    }
    public int DrawActionListCount {
      get { return drawActionList_.Count; }
    }
    public global::hdsense.PBNoCompressDrawAction GetDrawActionList(int index) {
      return drawActionList_[index];
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int CanvasSizeFieldNumber = 4;
    private bool hasCanvasSize;
    private global::hdsense.PBSize canvasSize_;
    public bool HasCanvasSize {
      get { return hasCanvasSize; }
    }
    public global::hdsense.PBSize CanvasSize {
      get { return canvasSize_ ?? global::hdsense.PBSize.DefaultInstance; }
    }
    
    public const int DrawActionList2FieldNumber = 5;
    private pbc::PopsicleList<global::hdsense.PBDrawAction> drawActionList2_ = new pbc::PopsicleList<global::hdsense.PBDrawAction>();
    public scg::IList<global::hdsense.PBDrawAction> DrawActionList2List {
      get { return drawActionList2_; }
    }
    public int DrawActionList2Count {
      get { return drawActionList2_.Count; }
    }
    public global::hdsense.PBDrawAction GetDrawActionList2(int index) {
      return drawActionList2_[index];
    }
    
    public const int DrawToUserFieldNumber = 6;
    private bool hasDrawToUser;
    private global::hdsense.PBUserBasicInfo drawToUser_;
    public bool HasDrawToUser {
      get { return hasDrawToUser; }
    }
    public global::hdsense.PBUserBasicInfo DrawToUser {
      get { return drawToUser_ ?? global::hdsense.PBUserBasicInfo.DefaultInstance; }
    }
    
    public const int OpusDescFieldNumber = 7;
    private bool hasOpusDesc;
    private string opusDesc_ = "";
    public bool HasOpusDesc {
      get { return hasOpusDesc; }
    }
    public string OpusDesc {
      get { return opusDesc_; }
    }
    
    public const int BgImageNameFieldNumber = 8;
    private bool hasBgImageName;
    private string bgImageName_ = "";
    public bool HasBgImageName {
      get { return hasBgImageName; }
    }
    public string BgImageName {
      get { return bgImageName_; }
    }
    
    public const int LayerFieldNumber = 9;
    private pbc::PopsicleList<global::hdsense.PBLayer> layer_ = new pbc::PopsicleList<global::hdsense.PBLayer>();
    public scg::IList<global::hdsense.PBLayer> LayerList {
      get { return layer_; }
    }
    public int LayerCount {
      get { return layer_.Count; }
    }
    public global::hdsense.PBLayer GetLayer(int index) {
      return layer_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBNoCompressDrawAction element in DrawActionListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBDrawAction element in DrawActionList2List) {
          if (!element.IsInitialized) return false;
        }
        if (HasDrawToUser) {
          if (!DrawToUser.IsInitialized) return false;
        }
        foreach (global::hdsense.PBLayer element in LayerList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBNoCompressDrawDataFieldNames;
      if (drawActionList_.Count > 0) {
        output.WriteMessageArray(1, field_names[2], drawActionList_);
      }
      if (hasVersion) {
        output.WriteInt32(2, field_names[7], Version);
      }
      if (hasCanvasSize) {
        output.WriteMessage(4, field_names[1], CanvasSize);
      }
      if (drawActionList2_.Count > 0) {
        output.WriteMessageArray(5, field_names[3], drawActionList2_);
      }
      if (hasDrawToUser) {
        output.WriteMessage(6, field_names[4], DrawToUser);
      }
      if (hasOpusDesc) {
        output.WriteString(7, field_names[6], OpusDesc);
      }
      if (hasBgImageName) {
        output.WriteString(8, field_names[0], BgImageName);
      }
      if (layer_.Count > 0) {
        output.WriteMessageArray(9, field_names[5], layer_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBNoCompressDrawAction element in DrawActionListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        if (hasCanvasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, CanvasSize);
        }
        foreach (global::hdsense.PBDrawAction element in DrawActionList2List) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasDrawToUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, DrawToUser);
        }
        if (hasOpusDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(7, OpusDesc);
        }
        if (hasBgImageName) {
          size += pb::CodedOutputStream.ComputeStringSize(8, BgImageName);
        }
        foreach (global::hdsense.PBLayer element in LayerList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBNoCompressDrawData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBNoCompressDrawData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBNoCompressDrawData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBNoCompressDrawData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBNoCompressDrawData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBNoCompressDrawData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBNoCompressDrawData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBNoCompressDrawData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBNoCompressDrawData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBNoCompressDrawData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBNoCompressDrawData MakeReadOnly() {
      drawActionList_.MakeReadOnly();
      drawActionList2_.MakeReadOnly();
      layer_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBNoCompressDrawData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBNoCompressDrawData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBNoCompressDrawData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBNoCompressDrawData result;
      
      private PBNoCompressDrawData PrepareBuilder() {
        if (resultIsReadOnly) {
          PBNoCompressDrawData original = result;
          result = new PBNoCompressDrawData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBNoCompressDrawData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBNoCompressDrawData.Descriptor; }
      }
      
      public override PBNoCompressDrawData DefaultInstanceForType {
        get { return global::hdsense.PBNoCompressDrawData.DefaultInstance; }
      }
      
      public override PBNoCompressDrawData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBNoCompressDrawData) {
          return MergeFrom((PBNoCompressDrawData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBNoCompressDrawData other) {
        if (other == global::hdsense.PBNoCompressDrawData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.drawActionList_.Count != 0) {
          result.drawActionList_.Add(other.drawActionList_);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasCanvasSize) {
          MergeCanvasSize(other.CanvasSize);
        }
        if (other.drawActionList2_.Count != 0) {
          result.drawActionList2_.Add(other.drawActionList2_);
        }
        if (other.HasDrawToUser) {
          MergeDrawToUser(other.DrawToUser);
        }
        if (other.HasOpusDesc) {
          OpusDesc = other.OpusDesc;
        }
        if (other.HasBgImageName) {
          BgImageName = other.BgImageName;
        }
        if (other.layer_.Count != 0) {
          result.layer_.Add(other.layer_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBNoCompressDrawDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBNoCompressDrawDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.drawActionList_, global::hdsense.PBNoCompressDrawAction.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 34: {
              global::hdsense.PBSize.Builder subBuilder = global::hdsense.PBSize.CreateBuilder();
              if (result.hasCanvasSize) {
                subBuilder.MergeFrom(CanvasSize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CanvasSize = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.drawActionList2_, global::hdsense.PBDrawAction.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              global::hdsense.PBUserBasicInfo.Builder subBuilder = global::hdsense.PBUserBasicInfo.CreateBuilder();
              if (result.hasDrawToUser) {
                subBuilder.MergeFrom(DrawToUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DrawToUser = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              result.hasOpusDesc = input.ReadString(ref result.opusDesc_);
              break;
            }
            case 66: {
              result.hasBgImageName = input.ReadString(ref result.bgImageName_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.layer_, global::hdsense.PBLayer.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBNoCompressDrawAction> DrawActionListList {
        get { return PrepareBuilder().drawActionList_; }
      }
      public int DrawActionListCount {
        get { return result.DrawActionListCount; }
      }
      public global::hdsense.PBNoCompressDrawAction GetDrawActionList(int index) {
        return result.GetDrawActionList(index);
      }
      public Builder SetDrawActionList(int index, global::hdsense.PBNoCompressDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawActionList_[index] = value;
        return this;
      }
      public Builder SetDrawActionList(int index, global::hdsense.PBNoCompressDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawActionList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawActionList(global::hdsense.PBNoCompressDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawActionList_.Add(value);
        return this;
      }
      public Builder AddDrawActionList(global::hdsense.PBNoCompressDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawActionList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawActionList(scg::IEnumerable<global::hdsense.PBNoCompressDrawAction> values) {
        PrepareBuilder();
        result.drawActionList_.Add(values);
        return this;
      }
      public Builder ClearDrawActionList() {
        PrepareBuilder();
        result.drawActionList_.Clear();
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasCanvasSize {
       get { return result.hasCanvasSize; }
      }
      public global::hdsense.PBSize CanvasSize {
        get { return result.CanvasSize; }
        set { SetCanvasSize(value); }
      }
      public Builder SetCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = value;
        return this;
      }
      public Builder SetCanvasSize(global::hdsense.PBSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCanvasSize &&
            result.canvasSize_ != global::hdsense.PBSize.DefaultInstance) {
            result.canvasSize_ = global::hdsense.PBSize.CreateBuilder(result.canvasSize_).MergeFrom(value).BuildPartial();
        } else {
          result.canvasSize_ = value;
        }
        result.hasCanvasSize = true;
        return this;
      }
      public Builder ClearCanvasSize() {
        PrepareBuilder();
        result.hasCanvasSize = false;
        result.canvasSize_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBDrawAction> DrawActionList2List {
        get { return PrepareBuilder().drawActionList2_; }
      }
      public int DrawActionList2Count {
        get { return result.DrawActionList2Count; }
      }
      public global::hdsense.PBDrawAction GetDrawActionList2(int index) {
        return result.GetDrawActionList2(index);
      }
      public Builder SetDrawActionList2(int index, global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawActionList2_[index] = value;
        return this;
      }
      public Builder SetDrawActionList2(int index, global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawActionList2_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawActionList2(global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawActionList2_.Add(value);
        return this;
      }
      public Builder AddDrawActionList2(global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawActionList2_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawActionList2(scg::IEnumerable<global::hdsense.PBDrawAction> values) {
        PrepareBuilder();
        result.drawActionList2_.Add(values);
        return this;
      }
      public Builder ClearDrawActionList2() {
        PrepareBuilder();
        result.drawActionList2_.Clear();
        return this;
      }
      
      public bool HasDrawToUser {
       get { return result.hasDrawToUser; }
      }
      public global::hdsense.PBUserBasicInfo DrawToUser {
        get { return result.DrawToUser; }
        set { SetDrawToUser(value); }
      }
      public Builder SetDrawToUser(global::hdsense.PBUserBasicInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrawToUser = true;
        result.drawToUser_ = value;
        return this;
      }
      public Builder SetDrawToUser(global::hdsense.PBUserBasicInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDrawToUser = true;
        result.drawToUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDrawToUser(global::hdsense.PBUserBasicInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDrawToUser &&
            result.drawToUser_ != global::hdsense.PBUserBasicInfo.DefaultInstance) {
            result.drawToUser_ = global::hdsense.PBUserBasicInfo.CreateBuilder(result.drawToUser_).MergeFrom(value).BuildPartial();
        } else {
          result.drawToUser_ = value;
        }
        result.hasDrawToUser = true;
        return this;
      }
      public Builder ClearDrawToUser() {
        PrepareBuilder();
        result.hasDrawToUser = false;
        result.drawToUser_ = null;
        return this;
      }
      
      public bool HasOpusDesc {
        get { return result.hasOpusDesc; }
      }
      public string OpusDesc {
        get { return result.OpusDesc; }
        set { SetOpusDesc(value); }
      }
      public Builder SetOpusDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusDesc = true;
        result.opusDesc_ = value;
        return this;
      }
      public Builder ClearOpusDesc() {
        PrepareBuilder();
        result.hasOpusDesc = false;
        result.opusDesc_ = "";
        return this;
      }
      
      public bool HasBgImageName {
        get { return result.hasBgImageName; }
      }
      public string BgImageName {
        get { return result.BgImageName; }
        set { SetBgImageName(value); }
      }
      public Builder SetBgImageName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBgImageName = true;
        result.bgImageName_ = value;
        return this;
      }
      public Builder ClearBgImageName() {
        PrepareBuilder();
        result.hasBgImageName = false;
        result.bgImageName_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBLayer> LayerList {
        get { return PrepareBuilder().layer_; }
      }
      public int LayerCount {
        get { return result.LayerCount; }
      }
      public global::hdsense.PBLayer GetLayer(int index) {
        return result.GetLayer(index);
      }
      public Builder SetLayer(int index, global::hdsense.PBLayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.layer_[index] = value;
        return this;
      }
      public Builder SetLayer(int index, global::hdsense.PBLayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.layer_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLayer(global::hdsense.PBLayer value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.layer_.Add(value);
        return this;
      }
      public Builder AddLayer(global::hdsense.PBLayer.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.layer_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLayer(scg::IEnumerable<global::hdsense.PBLayer> values) {
        PrepareBuilder();
        result.layer_.Add(values);
        return this;
      }
      public Builder ClearLayer() {
        PrepareBuilder();
        result.layer_.Clear();
        return this;
      }
    }
    static PBNoCompressDrawData() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBDrawBgGroup : pb::GeneratedMessage<PBDrawBgGroup, PBDrawBgGroup.Builder> {
    private PBDrawBgGroup() { }
    private static readonly PBDrawBgGroup defaultInstance = new PBDrawBgGroup().MakeReadOnly();
    private static readonly string[] _pBDrawBgGroupFieldNames = new string[] { "drawBgs", "groupId", "name" };
    private static readonly uint[] _pBDrawBgGroupFieldTags = new uint[] { 18, 8, 26 };
    public static PBDrawBgGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBDrawBgGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBDrawBgGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBDrawBgGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBDrawBgGroup, PBDrawBgGroup.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBDrawBgGroup__FieldAccessorTable; }
    }
    
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private int groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public int GroupId {
      get { return groupId_; }
    }
    
    public const int DrawBgsFieldNumber = 2;
    private pbc::PopsicleList<global::hdsense.PBDrawBg> drawBgs_ = new pbc::PopsicleList<global::hdsense.PBDrawBg>();
    public scg::IList<global::hdsense.PBDrawBg> DrawBgsList {
      get { return drawBgs_; }
    }
    public int DrawBgsCount {
      get { return drawBgs_.Count; }
    }
    public global::hdsense.PBDrawBg GetDrawBgs(int index) {
      return drawBgs_[index];
    }
    
    public const int NameFieldNumber = 3;
    private pbc::PopsicleList<global::hdsense.PBLocalizeString> name_ = new pbc::PopsicleList<global::hdsense.PBLocalizeString>();
    public scg::IList<global::hdsense.PBLocalizeString> NameList {
      get { return name_; }
    }
    public int NameCount {
      get { return name_.Count; }
    }
    public global::hdsense.PBLocalizeString GetName(int index) {
      return name_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGroupId) return false;
        foreach (global::hdsense.PBDrawBg element in DrawBgsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBLocalizeString element in NameList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBDrawBgGroupFieldNames;
      if (hasGroupId) {
        output.WriteInt32(1, field_names[1], GroupId);
      }
      if (drawBgs_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], drawBgs_);
      }
      if (name_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], name_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, GroupId);
        }
        foreach (global::hdsense.PBDrawBg element in DrawBgsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        foreach (global::hdsense.PBLocalizeString element in NameList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBDrawBgGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawBgGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBgGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawBgGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBgGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawBgGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBgGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBDrawBgGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBDrawBgGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawBgGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBDrawBgGroup MakeReadOnly() {
      drawBgs_.MakeReadOnly();
      name_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBDrawBgGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBDrawBgGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBDrawBgGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBDrawBgGroup result;
      
      private PBDrawBgGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          PBDrawBgGroup original = result;
          result = new PBDrawBgGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBDrawBgGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBDrawBgGroup.Descriptor; }
      }
      
      public override PBDrawBgGroup DefaultInstanceForType {
        get { return global::hdsense.PBDrawBgGroup.DefaultInstance; }
      }
      
      public override PBDrawBgGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBDrawBgGroup) {
          return MergeFrom((PBDrawBgGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBDrawBgGroup other) {
        if (other == global::hdsense.PBDrawBgGroup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.drawBgs_.Count != 0) {
          result.drawBgs_.Add(other.drawBgs_);
        }
        if (other.name_.Count != 0) {
          result.name_.Add(other.name_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBDrawBgGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBDrawBgGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGroupId = input.ReadInt32(ref result.groupId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.drawBgs_, global::hdsense.PBDrawBg.DefaultInstance, extensionRegistry);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.name_, global::hdsense.PBLocalizeString.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public int GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(int value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBDrawBg> DrawBgsList {
        get { return PrepareBuilder().drawBgs_; }
      }
      public int DrawBgsCount {
        get { return result.DrawBgsCount; }
      }
      public global::hdsense.PBDrawBg GetDrawBgs(int index) {
        return result.GetDrawBgs(index);
      }
      public Builder SetDrawBgs(int index, global::hdsense.PBDrawBg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawBgs_[index] = value;
        return this;
      }
      public Builder SetDrawBgs(int index, global::hdsense.PBDrawBg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawBgs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawBgs(global::hdsense.PBDrawBg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawBgs_.Add(value);
        return this;
      }
      public Builder AddDrawBgs(global::hdsense.PBDrawBg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawBgs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawBgs(scg::IEnumerable<global::hdsense.PBDrawBg> values) {
        PrepareBuilder();
        result.drawBgs_.Add(values);
        return this;
      }
      public Builder ClearDrawBgs() {
        PrepareBuilder();
        result.drawBgs_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBLocalizeString> NameList {
        get { return PrepareBuilder().name_; }
      }
      public int NameCount {
        get { return result.NameCount; }
      }
      public global::hdsense.PBLocalizeString GetName(int index) {
        return result.GetName(index);
      }
      public Builder SetName(int index, global::hdsense.PBLocalizeString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_[index] = value;
        return this;
      }
      public Builder SetName(int index, global::hdsense.PBLocalizeString.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.name_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddName(global::hdsense.PBLocalizeString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.name_.Add(value);
        return this;
      }
      public Builder AddName(global::hdsense.PBLocalizeString.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.name_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeName(scg::IEnumerable<global::hdsense.PBLocalizeString> values) {
        PrepareBuilder();
        result.name_.Add(values);
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.name_.Clear();
        return this;
      }
    }
    static PBDrawBgGroup() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBDrawBgMeta : pb::GeneratedMessage<PBDrawBgMeta, PBDrawBgMeta.Builder> {
    private PBDrawBgMeta() { }
    private static readonly PBDrawBgMeta defaultInstance = new PBDrawBgMeta().MakeReadOnly();
    private static readonly string[] _pBDrawBgMetaFieldNames = new string[] { "drawBgGroup" };
    private static readonly uint[] _pBDrawBgMetaFieldTags = new uint[] { 10 };
    public static PBDrawBgMeta DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBDrawBgMeta DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBDrawBgMeta ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBDrawBgMeta__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBDrawBgMeta, PBDrawBgMeta.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBDrawBgMeta__FieldAccessorTable; }
    }
    
    public const int DrawBgGroupFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBDrawBgGroup> drawBgGroup_ = new pbc::PopsicleList<global::hdsense.PBDrawBgGroup>();
    public scg::IList<global::hdsense.PBDrawBgGroup> DrawBgGroupList {
      get { return drawBgGroup_; }
    }
    public int DrawBgGroupCount {
      get { return drawBgGroup_.Count; }
    }
    public global::hdsense.PBDrawBgGroup GetDrawBgGroup(int index) {
      return drawBgGroup_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBDrawBgGroup element in DrawBgGroupList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBDrawBgMetaFieldNames;
      if (drawBgGroup_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], drawBgGroup_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBDrawBgGroup element in DrawBgGroupList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBDrawBgMeta ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawBgMeta ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBgMeta ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawBgMeta ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBgMeta ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawBgMeta ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBgMeta ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBDrawBgMeta ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBDrawBgMeta ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawBgMeta ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBDrawBgMeta MakeReadOnly() {
      drawBgGroup_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBDrawBgMeta prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBDrawBgMeta, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBDrawBgMeta cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBDrawBgMeta result;
      
      private PBDrawBgMeta PrepareBuilder() {
        if (resultIsReadOnly) {
          PBDrawBgMeta original = result;
          result = new PBDrawBgMeta();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBDrawBgMeta MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBDrawBgMeta.Descriptor; }
      }
      
      public override PBDrawBgMeta DefaultInstanceForType {
        get { return global::hdsense.PBDrawBgMeta.DefaultInstance; }
      }
      
      public override PBDrawBgMeta BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBDrawBgMeta) {
          return MergeFrom((PBDrawBgMeta) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBDrawBgMeta other) {
        if (other == global::hdsense.PBDrawBgMeta.DefaultInstance) return this;
        PrepareBuilder();
        if (other.drawBgGroup_.Count != 0) {
          result.drawBgGroup_.Add(other.drawBgGroup_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBDrawBgMetaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBDrawBgMetaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.drawBgGroup_, global::hdsense.PBDrawBgGroup.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBDrawBgGroup> DrawBgGroupList {
        get { return PrepareBuilder().drawBgGroup_; }
      }
      public int DrawBgGroupCount {
        get { return result.DrawBgGroupCount; }
      }
      public global::hdsense.PBDrawBgGroup GetDrawBgGroup(int index) {
        return result.GetDrawBgGroup(index);
      }
      public Builder SetDrawBgGroup(int index, global::hdsense.PBDrawBgGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawBgGroup_[index] = value;
        return this;
      }
      public Builder SetDrawBgGroup(int index, global::hdsense.PBDrawBgGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawBgGroup_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawBgGroup(global::hdsense.PBDrawBgGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawBgGroup_.Add(value);
        return this;
      }
      public Builder AddDrawBgGroup(global::hdsense.PBDrawBgGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawBgGroup_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawBgGroup(scg::IEnumerable<global::hdsense.PBDrawBgGroup> values) {
        PrepareBuilder();
        result.drawBgGroup_.Add(values);
        return this;
      }
      public Builder ClearDrawBgGroup() {
        PrepareBuilder();
        result.drawBgGroup_.Clear();
        return this;
      }
    }
    static PBDrawBgMeta() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBImageShapeGroup : pb::GeneratedMessage<PBImageShapeGroup, PBImageShapeGroup.Builder> {
    private PBImageShapeGroup() { }
    private static readonly PBImageShapeGroup defaultInstance = new PBImageShapeGroup().MakeReadOnly();
    private static readonly string[] _pBImageShapeGroupFieldNames = new string[] { "groupId", "groupName", "shapeType" };
    private static readonly uint[] _pBImageShapeGroupFieldTags = new uint[] { 8, 18, 26 };
    public static PBImageShapeGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBImageShapeGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBImageShapeGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBImageShapeGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBImageShapeGroup, PBImageShapeGroup.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBImageShapeGroup__FieldAccessorTable; }
    }
    
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private int groupId_;
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public int GroupId {
      get { return groupId_; }
    }
    
    public const int GroupNameFieldNumber = 2;
    private pbc::PopsicleList<global::hdsense.PBLocalizeString> groupName_ = new pbc::PopsicleList<global::hdsense.PBLocalizeString>();
    public scg::IList<global::hdsense.PBLocalizeString> GroupNameList {
      get { return groupName_; }
    }
    public int GroupNameCount {
      get { return groupName_.Count; }
    }
    public global::hdsense.PBLocalizeString GetGroupName(int index) {
      return groupName_[index];
    }
    
    public const int ShapeTypeFieldNumber = 3;
    private int shapeTypeMemoizedSerializedSize;
    private pbc::PopsicleList<int> shapeType_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ShapeTypeList {
      get { return pbc::Lists.AsReadOnly(shapeType_); }
    }
    public int ShapeTypeCount {
      get { return shapeType_.Count; }
    }
    public int GetShapeType(int index) {
      return shapeType_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGroupId) return false;
        foreach (global::hdsense.PBLocalizeString element in GroupNameList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBImageShapeGroupFieldNames;
      if (hasGroupId) {
        output.WriteInt32(1, field_names[0], GroupId);
      }
      if (groupName_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], groupName_);
      }
      if (shapeType_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[2], shapeTypeMemoizedSerializedSize, shapeType_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, GroupId);
        }
        foreach (global::hdsense.PBLocalizeString element in GroupNameList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        {
          int dataSize = 0;
          foreach (int element in ShapeTypeList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (shapeType_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          shapeTypeMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBImageShapeGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBImageShapeGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBImageShapeGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBImageShapeGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBImageShapeGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBImageShapeGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBImageShapeGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBImageShapeGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBImageShapeGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBImageShapeGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBImageShapeGroup MakeReadOnly() {
      groupName_.MakeReadOnly();
      shapeType_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBImageShapeGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBImageShapeGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBImageShapeGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBImageShapeGroup result;
      
      private PBImageShapeGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          PBImageShapeGroup original = result;
          result = new PBImageShapeGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBImageShapeGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBImageShapeGroup.Descriptor; }
      }
      
      public override PBImageShapeGroup DefaultInstanceForType {
        get { return global::hdsense.PBImageShapeGroup.DefaultInstance; }
      }
      
      public override PBImageShapeGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBImageShapeGroup) {
          return MergeFrom((PBImageShapeGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBImageShapeGroup other) {
        if (other == global::hdsense.PBImageShapeGroup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.groupName_.Count != 0) {
          result.groupName_.Add(other.groupName_);
        }
        if (other.shapeType_.Count != 0) {
          result.shapeType_.Add(other.shapeType_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBImageShapeGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBImageShapeGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGroupId = input.ReadInt32(ref result.groupId_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.groupName_, global::hdsense.PBLocalizeString.DefaultInstance, extensionRegistry);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.shapeType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public int GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(int value) {
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBLocalizeString> GroupNameList {
        get { return PrepareBuilder().groupName_; }
      }
      public int GroupNameCount {
        get { return result.GroupNameCount; }
      }
      public global::hdsense.PBLocalizeString GetGroupName(int index) {
        return result.GetGroupName(index);
      }
      public Builder SetGroupName(int index, global::hdsense.PBLocalizeString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupName_[index] = value;
        return this;
      }
      public Builder SetGroupName(int index, global::hdsense.PBLocalizeString.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupName_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroupName(global::hdsense.PBLocalizeString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupName_.Add(value);
        return this;
      }
      public Builder AddGroupName(global::hdsense.PBLocalizeString.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupName_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroupName(scg::IEnumerable<global::hdsense.PBLocalizeString> values) {
        PrepareBuilder();
        result.groupName_.Add(values);
        return this;
      }
      public Builder ClearGroupName() {
        PrepareBuilder();
        result.groupName_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> ShapeTypeList {
        get { return PrepareBuilder().shapeType_; }
      }
      public int ShapeTypeCount {
        get { return result.ShapeTypeCount; }
      }
      public int GetShapeType(int index) {
        return result.GetShapeType(index);
      }
      public Builder SetShapeType(int index, int value) {
        PrepareBuilder();
        result.shapeType_[index] = value;
        return this;
      }
      public Builder AddShapeType(int value) {
        PrepareBuilder();
        result.shapeType_.Add(value);
        return this;
      }
      public Builder AddRangeShapeType(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.shapeType_.Add(values);
        return this;
      }
      public Builder ClearShapeType() {
        PrepareBuilder();
        result.shapeType_.Clear();
        return this;
      }
    }
    static PBImageShapeGroup() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBImageShapeGroupMeta : pb::GeneratedMessage<PBImageShapeGroupMeta, PBImageShapeGroupMeta.Builder> {
    private PBImageShapeGroupMeta() { }
    private static readonly PBImageShapeGroupMeta defaultInstance = new PBImageShapeGroupMeta().MakeReadOnly();
    private static readonly string[] _pBImageShapeGroupMetaFieldNames = new string[] { "imageShapeGroup" };
    private static readonly uint[] _pBImageShapeGroupMetaFieldTags = new uint[] { 10 };
    public static PBImageShapeGroupMeta DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBImageShapeGroupMeta DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBImageShapeGroupMeta ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBImageShapeGroupMeta__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBImageShapeGroupMeta, PBImageShapeGroupMeta.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBImageShapeGroupMeta__FieldAccessorTable; }
    }
    
    public const int ImageShapeGroupFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBImageShapeGroup> imageShapeGroup_ = new pbc::PopsicleList<global::hdsense.PBImageShapeGroup>();
    public scg::IList<global::hdsense.PBImageShapeGroup> ImageShapeGroupList {
      get { return imageShapeGroup_; }
    }
    public int ImageShapeGroupCount {
      get { return imageShapeGroup_.Count; }
    }
    public global::hdsense.PBImageShapeGroup GetImageShapeGroup(int index) {
      return imageShapeGroup_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBImageShapeGroup element in ImageShapeGroupList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBImageShapeGroupMetaFieldNames;
      if (imageShapeGroup_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], imageShapeGroup_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBImageShapeGroup element in ImageShapeGroupList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBImageShapeGroupMeta ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBImageShapeGroupMeta ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBImageShapeGroupMeta MakeReadOnly() {
      imageShapeGroup_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBImageShapeGroupMeta prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBImageShapeGroupMeta, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBImageShapeGroupMeta cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBImageShapeGroupMeta result;
      
      private PBImageShapeGroupMeta PrepareBuilder() {
        if (resultIsReadOnly) {
          PBImageShapeGroupMeta original = result;
          result = new PBImageShapeGroupMeta();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBImageShapeGroupMeta MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBImageShapeGroupMeta.Descriptor; }
      }
      
      public override PBImageShapeGroupMeta DefaultInstanceForType {
        get { return global::hdsense.PBImageShapeGroupMeta.DefaultInstance; }
      }
      
      public override PBImageShapeGroupMeta BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBImageShapeGroupMeta) {
          return MergeFrom((PBImageShapeGroupMeta) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBImageShapeGroupMeta other) {
        if (other == global::hdsense.PBImageShapeGroupMeta.DefaultInstance) return this;
        PrepareBuilder();
        if (other.imageShapeGroup_.Count != 0) {
          result.imageShapeGroup_.Add(other.imageShapeGroup_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBImageShapeGroupMetaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBImageShapeGroupMetaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.imageShapeGroup_, global::hdsense.PBImageShapeGroup.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBImageShapeGroup> ImageShapeGroupList {
        get { return PrepareBuilder().imageShapeGroup_; }
      }
      public int ImageShapeGroupCount {
        get { return result.ImageShapeGroupCount; }
      }
      public global::hdsense.PBImageShapeGroup GetImageShapeGroup(int index) {
        return result.GetImageShapeGroup(index);
      }
      public Builder SetImageShapeGroup(int index, global::hdsense.PBImageShapeGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.imageShapeGroup_[index] = value;
        return this;
      }
      public Builder SetImageShapeGroup(int index, global::hdsense.PBImageShapeGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.imageShapeGroup_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddImageShapeGroup(global::hdsense.PBImageShapeGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.imageShapeGroup_.Add(value);
        return this;
      }
      public Builder AddImageShapeGroup(global::hdsense.PBImageShapeGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.imageShapeGroup_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeImageShapeGroup(scg::IEnumerable<global::hdsense.PBImageShapeGroup> values) {
        PrepareBuilder();
        result.imageShapeGroup_.Add(values);
        return this;
      }
      public Builder ClearImageShapeGroup() {
        PrepareBuilder();
        result.imageShapeGroup_.Clear();
        return this;
      }
    }
    static PBImageShapeGroupMeta() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBHotWord : pb::GeneratedMessage<PBHotWord, PBHotWord.Builder> {
    private PBHotWord() { }
    private static readonly PBHotWord defaultInstance = new PBHotWord().MakeReadOnly();
    private static readonly string[] _pBHotWordFieldNames = new string[] { "coins", "source", "word", "wordId" };
    private static readonly uint[] _pBHotWordFieldTags = new uint[] { 24, 82, 18, 10 };
    public static PBHotWord DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBHotWord DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBHotWord ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBHotWord__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBHotWord, PBHotWord.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBHotWord__FieldAccessorTable; }
    }
    
    public const int WordIdFieldNumber = 1;
    private bool hasWordId;
    private string wordId_ = "";
    public bool HasWordId {
      get { return hasWordId; }
    }
    public string WordId {
      get { return wordId_; }
    }
    
    public const int WordFieldNumber = 2;
    private bool hasWord;
    private string word_ = "";
    public bool HasWord {
      get { return hasWord; }
    }
    public string Word {
      get { return word_; }
    }
    
    public const int CoinsFieldNumber = 3;
    private bool hasCoins;
    private int coins_;
    public bool HasCoins {
      get { return hasCoins; }
    }
    public int Coins {
      get { return coins_; }
    }
    
    public const int SourceFieldNumber = 10;
    private bool hasSource;
    private string source_ = "";
    public bool HasSource {
      get { return hasSource; }
    }
    public string Source {
      get { return source_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWordId) return false;
        if (!hasWord) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBHotWordFieldNames;
      if (hasWordId) {
        output.WriteString(1, field_names[3], WordId);
      }
      if (hasWord) {
        output.WriteString(2, field_names[2], Word);
      }
      if (hasCoins) {
        output.WriteInt32(3, field_names[0], Coins);
      }
      if (hasSource) {
        output.WriteString(10, field_names[1], Source);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWordId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WordId);
        }
        if (hasWord) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Word);
        }
        if (hasCoins) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Coins);
        }
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeStringSize(10, Source);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBHotWord ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBHotWord ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBHotWord ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBHotWord ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBHotWord ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBHotWord ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBHotWord ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBHotWord ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBHotWord ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBHotWord ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBHotWord MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBHotWord prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBHotWord, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBHotWord cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBHotWord result;
      
      private PBHotWord PrepareBuilder() {
        if (resultIsReadOnly) {
          PBHotWord original = result;
          result = new PBHotWord();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBHotWord MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBHotWord.Descriptor; }
      }
      
      public override PBHotWord DefaultInstanceForType {
        get { return global::hdsense.PBHotWord.DefaultInstance; }
      }
      
      public override PBHotWord BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBHotWord) {
          return MergeFrom((PBHotWord) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBHotWord other) {
        if (other == global::hdsense.PBHotWord.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWordId) {
          WordId = other.WordId;
        }
        if (other.HasWord) {
          Word = other.Word;
        }
        if (other.HasCoins) {
          Coins = other.Coins;
        }
        if (other.HasSource) {
          Source = other.Source;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBHotWordFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBHotWordFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWordId = input.ReadString(ref result.wordId_);
              break;
            }
            case 18: {
              result.hasWord = input.ReadString(ref result.word_);
              break;
            }
            case 24: {
              result.hasCoins = input.ReadInt32(ref result.coins_);
              break;
            }
            case 82: {
              result.hasSource = input.ReadString(ref result.source_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWordId {
        get { return result.hasWordId; }
      }
      public string WordId {
        get { return result.WordId; }
        set { SetWordId(value); }
      }
      public Builder SetWordId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWordId = true;
        result.wordId_ = value;
        return this;
      }
      public Builder ClearWordId() {
        PrepareBuilder();
        result.hasWordId = false;
        result.wordId_ = "";
        return this;
      }
      
      public bool HasWord {
        get { return result.hasWord; }
      }
      public string Word {
        get { return result.Word; }
        set { SetWord(value); }
      }
      public Builder SetWord(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWord = true;
        result.word_ = value;
        return this;
      }
      public Builder ClearWord() {
        PrepareBuilder();
        result.hasWord = false;
        result.word_ = "";
        return this;
      }
      
      public bool HasCoins {
        get { return result.hasCoins; }
      }
      public int Coins {
        get { return result.Coins; }
        set { SetCoins(value); }
      }
      public Builder SetCoins(int value) {
        PrepareBuilder();
        result.hasCoins = true;
        result.coins_ = value;
        return this;
      }
      public Builder ClearCoins() {
        PrepareBuilder();
        result.hasCoins = false;
        result.coins_ = 0;
        return this;
      }
      
      public bool HasSource {
        get { return result.hasSource; }
      }
      public string Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = "";
        return this;
      }
    }
    static PBHotWord() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBHotWordList : pb::GeneratedMessage<PBHotWordList, PBHotWordList.Builder> {
    private PBHotWordList() { }
    private static readonly PBHotWordList defaultInstance = new PBHotWordList().MakeReadOnly();
    private static readonly string[] _pBHotWordListFieldNames = new string[] { "words" };
    private static readonly uint[] _pBHotWordListFieldTags = new uint[] { 10 };
    public static PBHotWordList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBHotWordList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBHotWordList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBHotWordList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBHotWordList, PBHotWordList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBHotWordList__FieldAccessorTable; }
    }
    
    public const int WordsFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBHotWord> words_ = new pbc::PopsicleList<global::hdsense.PBHotWord>();
    public scg::IList<global::hdsense.PBHotWord> WordsList {
      get { return words_; }
    }
    public int WordsCount {
      get { return words_.Count; }
    }
    public global::hdsense.PBHotWord GetWords(int index) {
      return words_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBHotWord element in WordsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBHotWordListFieldNames;
      if (words_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], words_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBHotWord element in WordsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBHotWordList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBHotWordList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBHotWordList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBHotWordList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBHotWordList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBHotWordList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBHotWordList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBHotWordList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBHotWordList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBHotWordList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBHotWordList MakeReadOnly() {
      words_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBHotWordList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBHotWordList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBHotWordList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBHotWordList result;
      
      private PBHotWordList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBHotWordList original = result;
          result = new PBHotWordList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBHotWordList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBHotWordList.Descriptor; }
      }
      
      public override PBHotWordList DefaultInstanceForType {
        get { return global::hdsense.PBHotWordList.DefaultInstance; }
      }
      
      public override PBHotWordList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBHotWordList) {
          return MergeFrom((PBHotWordList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBHotWordList other) {
        if (other == global::hdsense.PBHotWordList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.words_.Count != 0) {
          result.words_.Add(other.words_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBHotWordListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBHotWordListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.words_, global::hdsense.PBHotWord.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBHotWord> WordsList {
        get { return PrepareBuilder().words_; }
      }
      public int WordsCount {
        get { return result.WordsCount; }
      }
      public global::hdsense.PBHotWord GetWords(int index) {
        return result.GetWords(index);
      }
      public Builder SetWords(int index, global::hdsense.PBHotWord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.words_[index] = value;
        return this;
      }
      public Builder SetWords(int index, global::hdsense.PBHotWord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.words_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWords(global::hdsense.PBHotWord value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.words_.Add(value);
        return this;
      }
      public Builder AddWords(global::hdsense.PBHotWord.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.words_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWords(scg::IEnumerable<global::hdsense.PBHotWord> values) {
        PrepareBuilder();
        result.words_.Add(values);
        return this;
      }
      public Builder ClearWords() {
        PrepareBuilder();
        result.words_.Clear();
        return this;
      }
    }
    static PBHotWordList() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBWallOpus : pb::GeneratedMessage<PBWallOpus, PBWallOpus.Builder> {
    private PBWallOpus() { }
    private static readonly PBWallOpus defaultInstance = new PBWallOpus().MakeReadOnly();
    private static readonly string[] _pBWallOpusFieldNames = new string[] { "frame", "idOnWall", "opus" };
    private static readonly uint[] _pBWallOpusFieldTags = new uint[] { 26, 8, 18 };
    public static PBWallOpus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBWallOpus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBWallOpus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBWallOpus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBWallOpus, PBWallOpus.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBWallOpus__FieldAccessorTable; }
    }
    
    public const int IdOnWallFieldNumber = 1;
    private bool hasIdOnWall;
    private int idOnWall_;
    public bool HasIdOnWall {
      get { return hasIdOnWall; }
    }
    public int IdOnWall {
      get { return idOnWall_; }
    }
    
    public const int OpusFieldNumber = 2;
    private bool hasOpus;
    private global::hdsense.PBFeed opus_;
    public bool HasOpus {
      get { return hasOpus; }
    }
    public global::hdsense.PBFeed Opus {
      get { return opus_ ?? global::hdsense.PBFeed.DefaultInstance; }
    }
    
    public const int FrameFieldNumber = 3;
    private bool hasFrame;
    private global::hdsense.PBFrame frame_;
    public bool HasFrame {
      get { return hasFrame; }
    }
    public global::hdsense.PBFrame Frame {
      get { return frame_ ?? global::hdsense.PBFrame.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIdOnWall) return false;
        if (HasOpus) {
          if (!Opus.IsInitialized) return false;
        }
        if (HasFrame) {
          if (!Frame.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBWallOpusFieldNames;
      if (hasIdOnWall) {
        output.WriteInt32(1, field_names[1], IdOnWall);
      }
      if (hasOpus) {
        output.WriteMessage(2, field_names[2], Opus);
      }
      if (hasFrame) {
        output.WriteMessage(3, field_names[0], Frame);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIdOnWall) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, IdOnWall);
        }
        if (hasOpus) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Opus);
        }
        if (hasFrame) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Frame);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBWallOpus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBWallOpus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBWallOpus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBWallOpus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBWallOpus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBWallOpus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBWallOpus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBWallOpus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBWallOpus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBWallOpus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBWallOpus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBWallOpus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBWallOpus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBWallOpus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBWallOpus result;
      
      private PBWallOpus PrepareBuilder() {
        if (resultIsReadOnly) {
          PBWallOpus original = result;
          result = new PBWallOpus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBWallOpus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBWallOpus.Descriptor; }
      }
      
      public override PBWallOpus DefaultInstanceForType {
        get { return global::hdsense.PBWallOpus.DefaultInstance; }
      }
      
      public override PBWallOpus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBWallOpus) {
          return MergeFrom((PBWallOpus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBWallOpus other) {
        if (other == global::hdsense.PBWallOpus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIdOnWall) {
          IdOnWall = other.IdOnWall;
        }
        if (other.HasOpus) {
          MergeOpus(other.Opus);
        }
        if (other.HasFrame) {
          MergeFrame(other.Frame);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBWallOpusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBWallOpusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIdOnWall = input.ReadInt32(ref result.idOnWall_);
              break;
            }
            case 18: {
              global::hdsense.PBFeed.Builder subBuilder = global::hdsense.PBFeed.CreateBuilder();
              if (result.hasOpus) {
                subBuilder.MergeFrom(Opus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Opus = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::hdsense.PBFrame.Builder subBuilder = global::hdsense.PBFrame.CreateBuilder();
              if (result.hasFrame) {
                subBuilder.MergeFrom(Frame);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Frame = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIdOnWall {
        get { return result.hasIdOnWall; }
      }
      public int IdOnWall {
        get { return result.IdOnWall; }
        set { SetIdOnWall(value); }
      }
      public Builder SetIdOnWall(int value) {
        PrepareBuilder();
        result.hasIdOnWall = true;
        result.idOnWall_ = value;
        return this;
      }
      public Builder ClearIdOnWall() {
        PrepareBuilder();
        result.hasIdOnWall = false;
        result.idOnWall_ = 0;
        return this;
      }
      
      public bool HasOpus {
       get { return result.hasOpus; }
      }
      public global::hdsense.PBFeed Opus {
        get { return result.Opus; }
        set { SetOpus(value); }
      }
      public Builder SetOpus(global::hdsense.PBFeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpus = true;
        result.opus_ = value;
        return this;
      }
      public Builder SetOpus(global::hdsense.PBFeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOpus = true;
        result.opus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOpus(global::hdsense.PBFeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOpus &&
            result.opus_ != global::hdsense.PBFeed.DefaultInstance) {
            result.opus_ = global::hdsense.PBFeed.CreateBuilder(result.opus_).MergeFrom(value).BuildPartial();
        } else {
          result.opus_ = value;
        }
        result.hasOpus = true;
        return this;
      }
      public Builder ClearOpus() {
        PrepareBuilder();
        result.hasOpus = false;
        result.opus_ = null;
        return this;
      }
      
      public bool HasFrame {
       get { return result.hasFrame; }
      }
      public global::hdsense.PBFrame Frame {
        get { return result.Frame; }
        set { SetFrame(value); }
      }
      public Builder SetFrame(global::hdsense.PBFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = value;
        return this;
      }
      public Builder SetFrame(global::hdsense.PBFrame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFrame = true;
        result.frame_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFrame(global::hdsense.PBFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFrame &&
            result.frame_ != global::hdsense.PBFrame.DefaultInstance) {
            result.frame_ = global::hdsense.PBFrame.CreateBuilder(result.frame_).MergeFrom(value).BuildPartial();
        } else {
          result.frame_ = value;
        }
        result.hasFrame = true;
        return this;
      }
      public Builder ClearFrame() {
        PrepareBuilder();
        result.hasFrame = false;
        result.frame_ = null;
        return this;
      }
    }
    static PBWallOpus() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBWall : pb::GeneratedMessage<PBWall, PBWall.Builder> {
    private PBWall() { }
    private static readonly PBWall defaultInstance = new PBWall().MakeReadOnly();
    private static readonly string[] _pBWallFieldNames = new string[] { "content", "musicUrl", "name", "type", "userId", "wallId" };
    private static readonly uint[] _pBWallFieldTags = new uint[] { 58, 82, 50, 16, 26, 10 };
    public static PBWall DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBWall DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBWall ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBWall__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBWall, PBWall.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBWall__FieldAccessorTable; }
    }
    
    public const int WallIdFieldNumber = 1;
    private bool hasWallId;
    private string wallId_ = "";
    public bool HasWallId {
      get { return hasWallId; }
    }
    public string WallId {
      get { return wallId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::hdsense.PBWallType type_ = global::hdsense.PBWallType.Opuses;
    public bool HasType {
      get { return hasType; }
    }
    public global::hdsense.PBWallType Type {
      get { return type_; }
    }
    
    public const int UserIdFieldNumber = 3;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int NameFieldNumber = 6;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ContentFieldNumber = 7;
    private bool hasContent;
    private global::hdsense.PBLayout content_;
    public bool HasContent {
      get { return hasContent; }
    }
    public global::hdsense.PBLayout Content {
      get { return content_ ?? global::hdsense.PBLayout.DefaultInstance; }
    }
    
    public const int MusicUrlFieldNumber = 10;
    private bool hasMusicUrl;
    private string musicUrl_ = "";
    public bool HasMusicUrl {
      get { return hasMusicUrl; }
    }
    public string MusicUrl {
      get { return musicUrl_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasWallId) return false;
        if (!hasType) return false;
        if (!hasUserId) return false;
        if (HasContent) {
          if (!Content.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBWallFieldNames;
      if (hasWallId) {
        output.WriteString(1, field_names[5], WallId);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[3], (int) Type, Type);
      }
      if (hasUserId) {
        output.WriteString(3, field_names[4], UserId);
      }
      if (hasName) {
        output.WriteString(6, field_names[2], Name);
      }
      if (hasContent) {
        output.WriteMessage(7, field_names[0], Content);
      }
      if (hasMusicUrl) {
        output.WriteString(10, field_names[1], MusicUrl);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWallId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, WallId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, UserId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Name);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, Content);
        }
        if (hasMusicUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(10, MusicUrl);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBWall ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBWall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBWall ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBWall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBWall ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBWall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBWall ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBWall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBWall ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBWall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBWall MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBWall prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBWall, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBWall cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBWall result;
      
      private PBWall PrepareBuilder() {
        if (resultIsReadOnly) {
          PBWall original = result;
          result = new PBWall();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBWall MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBWall.Descriptor; }
      }
      
      public override PBWall DefaultInstanceForType {
        get { return global::hdsense.PBWall.DefaultInstance; }
      }
      
      public override PBWall BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBWall) {
          return MergeFrom((PBWall) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBWall other) {
        if (other == global::hdsense.PBWall.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWallId) {
          WallId = other.WallId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasContent) {
          MergeContent(other.Content);
        }
        if (other.HasMusicUrl) {
          MusicUrl = other.MusicUrl;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBWallFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBWallFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasWallId = input.ReadString(ref result.wallId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 50: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 58: {
              global::hdsense.PBLayout.Builder subBuilder = global::hdsense.PBLayout.CreateBuilder();
              if (result.hasContent) {
                subBuilder.MergeFrom(Content);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Content = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              result.hasMusicUrl = input.ReadString(ref result.musicUrl_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWallId {
        get { return result.hasWallId; }
      }
      public string WallId {
        get { return result.WallId; }
        set { SetWallId(value); }
      }
      public Builder SetWallId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWallId = true;
        result.wallId_ = value;
        return this;
      }
      public Builder ClearWallId() {
        PrepareBuilder();
        result.hasWallId = false;
        result.wallId_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::hdsense.PBWallType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::hdsense.PBWallType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::hdsense.PBWallType.Opuses;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasContent {
       get { return result.hasContent; }
      }
      public global::hdsense.PBLayout Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(global::hdsense.PBLayout value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder SetContent(global::hdsense.PBLayout.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContent(global::hdsense.PBLayout value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContent &&
            result.content_ != global::hdsense.PBLayout.DefaultInstance) {
            result.content_ = global::hdsense.PBLayout.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
        } else {
          result.content_ = value;
        }
        result.hasContent = true;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = null;
        return this;
      }
      
      public bool HasMusicUrl {
        get { return result.hasMusicUrl; }
      }
      public string MusicUrl {
        get { return result.MusicUrl; }
        set { SetMusicUrl(value); }
      }
      public Builder SetMusicUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMusicUrl = true;
        result.musicUrl_ = value;
        return this;
      }
      public Builder ClearMusicUrl() {
        PrepareBuilder();
        result.hasMusicUrl = false;
        result.musicUrl_ = "";
        return this;
      }
    }
    static PBWall() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBRect : pb::GeneratedMessage<PBRect, PBRect.Builder> {
    private PBRect() { }
    private static readonly PBRect defaultInstance = new PBRect().MakeReadOnly();
    private static readonly string[] _pBRectFieldNames = new string[] { "height", "width", "x", "y" };
    private static readonly uint[] _pBRectFieldTags = new uint[] { 112, 104, 88, 96 };
    public static PBRect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBRect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBRect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBRect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBRect, PBRect.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBRect__FieldAccessorTable; }
    }
    
    public const int XFieldNumber = 11;
    private bool hasX;
    private int x_;
    public bool HasX {
      get { return hasX; }
    }
    public int X {
      get { return x_; }
    }
    
    public const int YFieldNumber = 12;
    private bool hasY;
    private int y_;
    public bool HasY {
      get { return hasY; }
    }
    public int Y {
      get { return y_; }
    }
    
    public const int WidthFieldNumber = 13;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 14;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBRectFieldNames;
      if (hasX) {
        output.WriteInt32(11, field_names[2], X);
      }
      if (hasY) {
        output.WriteInt32(12, field_names[3], Y);
      }
      if (hasWidth) {
        output.WriteInt32(13, field_names[1], Width);
      }
      if (hasHeight) {
        output.WriteInt32(14, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasX) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, X);
        }
        if (hasY) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, Y);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBRect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBRect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBRect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBRect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBRect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBRect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBRect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBRect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBRect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBRect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBRect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBRect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBRect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBRect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBRect result;
      
      private PBRect PrepareBuilder() {
        if (resultIsReadOnly) {
          PBRect original = result;
          result = new PBRect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBRect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBRect.Descriptor; }
      }
      
      public override PBRect DefaultInstanceForType {
        get { return global::hdsense.PBRect.DefaultInstance; }
      }
      
      public override PBRect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBRect) {
          return MergeFrom((PBRect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBRect other) {
        if (other == global::hdsense.PBRect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBRectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBRectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 88: {
              result.hasX = input.ReadInt32(ref result.x_);
              break;
            }
            case 96: {
              result.hasY = input.ReadInt32(ref result.y_);
              break;
            }
            case 104: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 112: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasX {
        get { return result.hasX; }
      }
      public int X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(int value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      public bool HasY {
        get { return result.hasY; }
      }
      public int Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(int value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
    }
    static PBRect() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBFrame : pb::GeneratedMessage<PBFrame, PBFrame.Builder> {
    private PBFrame() { }
    private static readonly PBFrame defaultInstance = new PBFrame().MakeReadOnly();
    private static readonly string[] _pBFrameFieldNames = new string[] { "frameId", "imageUrl", "opusIpadRect", "opusIphoneRect", "price", "type" };
    private static readonly uint[] _pBFrameFieldTags = new uint[] { 8, 82, 114, 106, 144, 16 };
    public static PBFrame DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBFrame DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBFrame ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFrame__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBFrame, PBFrame.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFrame__FieldAccessorTable; }
    }
    
    public const int FrameIdFieldNumber = 1;
    private bool hasFrameId;
    private int frameId_;
    public bool HasFrameId {
      get { return hasFrameId; }
    }
    public int FrameId {
      get { return frameId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int ImageUrlFieldNumber = 10;
    private bool hasImageUrl;
    private string imageUrl_ = "";
    public bool HasImageUrl {
      get { return hasImageUrl; }
    }
    public string ImageUrl {
      get { return imageUrl_; }
    }
    
    public const int OpusIphoneRectFieldNumber = 13;
    private bool hasOpusIphoneRect;
    private global::hdsense.PBRect opusIphoneRect_;
    public bool HasOpusIphoneRect {
      get { return hasOpusIphoneRect; }
    }
    public global::hdsense.PBRect OpusIphoneRect {
      get { return opusIphoneRect_ ?? global::hdsense.PBRect.DefaultInstance; }
    }
    
    public const int OpusIpadRectFieldNumber = 14;
    private bool hasOpusIpadRect;
    private global::hdsense.PBRect opusIpadRect_;
    public bool HasOpusIpadRect {
      get { return hasOpusIpadRect; }
    }
    public global::hdsense.PBRect OpusIpadRect {
      get { return opusIpadRect_ ?? global::hdsense.PBRect.DefaultInstance; }
    }
    
    public const int PriceFieldNumber = 18;
    private bool hasPrice;
    private int price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public int Price {
      get { return price_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasFrameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBFrameFieldNames;
      if (hasFrameId) {
        output.WriteInt32(1, field_names[0], FrameId);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[5], Type);
      }
      if (hasImageUrl) {
        output.WriteString(10, field_names[1], ImageUrl);
      }
      if (hasOpusIphoneRect) {
        output.WriteMessage(13, field_names[3], OpusIphoneRect);
      }
      if (hasOpusIpadRect) {
        output.WriteMessage(14, field_names[2], OpusIpadRect);
      }
      if (hasPrice) {
        output.WriteInt32(18, field_names[4], Price);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFrameId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, FrameId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(10, ImageUrl);
        }
        if (hasOpusIphoneRect) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, OpusIphoneRect);
        }
        if (hasOpusIpadRect) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, OpusIpadRect);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, Price);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBFrame ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFrame ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFrame ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFrame ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFrame ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFrame ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBFrame ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBFrame ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBFrame ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFrame ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBFrame MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBFrame prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBFrame, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBFrame cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBFrame result;
      
      private PBFrame PrepareBuilder() {
        if (resultIsReadOnly) {
          PBFrame original = result;
          result = new PBFrame();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBFrame MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBFrame.Descriptor; }
      }
      
      public override PBFrame DefaultInstanceForType {
        get { return global::hdsense.PBFrame.DefaultInstance; }
      }
      
      public override PBFrame BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBFrame) {
          return MergeFrom((PBFrame) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBFrame other) {
        if (other == global::hdsense.PBFrame.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFrameId) {
          FrameId = other.FrameId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasImageUrl) {
          ImageUrl = other.ImageUrl;
        }
        if (other.HasOpusIphoneRect) {
          MergeOpusIphoneRect(other.OpusIphoneRect);
        }
        if (other.HasOpusIpadRect) {
          MergeOpusIpadRect(other.OpusIpadRect);
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBFrameFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBFrameFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasFrameId = input.ReadInt32(ref result.frameId_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 82: {
              result.hasImageUrl = input.ReadString(ref result.imageUrl_);
              break;
            }
            case 106: {
              global::hdsense.PBRect.Builder subBuilder = global::hdsense.PBRect.CreateBuilder();
              if (result.hasOpusIphoneRect) {
                subBuilder.MergeFrom(OpusIphoneRect);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OpusIphoneRect = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::hdsense.PBRect.Builder subBuilder = global::hdsense.PBRect.CreateBuilder();
              if (result.hasOpusIpadRect) {
                subBuilder.MergeFrom(OpusIpadRect);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OpusIpadRect = subBuilder.BuildPartial();
              break;
            }
            case 144: {
              result.hasPrice = input.ReadInt32(ref result.price_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFrameId {
        get { return result.hasFrameId; }
      }
      public int FrameId {
        get { return result.FrameId; }
        set { SetFrameId(value); }
      }
      public Builder SetFrameId(int value) {
        PrepareBuilder();
        result.hasFrameId = true;
        result.frameId_ = value;
        return this;
      }
      public Builder ClearFrameId() {
        PrepareBuilder();
        result.hasFrameId = false;
        result.frameId_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasImageUrl {
        get { return result.hasImageUrl; }
      }
      public string ImageUrl {
        get { return result.ImageUrl; }
        set { SetImageUrl(value); }
      }
      public Builder SetImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageUrl = true;
        result.imageUrl_ = value;
        return this;
      }
      public Builder ClearImageUrl() {
        PrepareBuilder();
        result.hasImageUrl = false;
        result.imageUrl_ = "";
        return this;
      }
      
      public bool HasOpusIphoneRect {
       get { return result.hasOpusIphoneRect; }
      }
      public global::hdsense.PBRect OpusIphoneRect {
        get { return result.OpusIphoneRect; }
        set { SetOpusIphoneRect(value); }
      }
      public Builder SetOpusIphoneRect(global::hdsense.PBRect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusIphoneRect = true;
        result.opusIphoneRect_ = value;
        return this;
      }
      public Builder SetOpusIphoneRect(global::hdsense.PBRect.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOpusIphoneRect = true;
        result.opusIphoneRect_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOpusIphoneRect(global::hdsense.PBRect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOpusIphoneRect &&
            result.opusIphoneRect_ != global::hdsense.PBRect.DefaultInstance) {
            result.opusIphoneRect_ = global::hdsense.PBRect.CreateBuilder(result.opusIphoneRect_).MergeFrom(value).BuildPartial();
        } else {
          result.opusIphoneRect_ = value;
        }
        result.hasOpusIphoneRect = true;
        return this;
      }
      public Builder ClearOpusIphoneRect() {
        PrepareBuilder();
        result.hasOpusIphoneRect = false;
        result.opusIphoneRect_ = null;
        return this;
      }
      
      public bool HasOpusIpadRect {
       get { return result.hasOpusIpadRect; }
      }
      public global::hdsense.PBRect OpusIpadRect {
        get { return result.OpusIpadRect; }
        set { SetOpusIpadRect(value); }
      }
      public Builder SetOpusIpadRect(global::hdsense.PBRect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusIpadRect = true;
        result.opusIpadRect_ = value;
        return this;
      }
      public Builder SetOpusIpadRect(global::hdsense.PBRect.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOpusIpadRect = true;
        result.opusIpadRect_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOpusIpadRect(global::hdsense.PBRect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOpusIpadRect &&
            result.opusIpadRect_ != global::hdsense.PBRect.DefaultInstance) {
            result.opusIpadRect_ = global::hdsense.PBRect.CreateBuilder(result.opusIpadRect_).MergeFrom(value).BuildPartial();
        } else {
          result.opusIpadRect_ = value;
        }
        result.hasOpusIpadRect = true;
        return this;
      }
      public Builder ClearOpusIpadRect() {
        PrepareBuilder();
        result.hasOpusIpadRect = false;
        result.opusIpadRect_ = null;
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0;
        return this;
      }
    }
    static PBFrame() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBFrameList : pb::GeneratedMessage<PBFrameList, PBFrameList.Builder> {
    private PBFrameList() { }
    private static readonly PBFrameList defaultInstance = new PBFrameList().MakeReadOnly();
    private static readonly string[] _pBFrameListFieldNames = new string[] { "frames" };
    private static readonly uint[] _pBFrameListFieldTags = new uint[] { 10 };
    public static PBFrameList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBFrameList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBFrameList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFrameList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBFrameList, PBFrameList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBFrameList__FieldAccessorTable; }
    }
    
    public const int FramesFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBFrame> frames_ = new pbc::PopsicleList<global::hdsense.PBFrame>();
    public scg::IList<global::hdsense.PBFrame> FramesList {
      get { return frames_; }
    }
    public int FramesCount {
      get { return frames_.Count; }
    }
    public global::hdsense.PBFrame GetFrames(int index) {
      return frames_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBFrame element in FramesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBFrameListFieldNames;
      if (frames_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], frames_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBFrame element in FramesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBFrameList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFrameList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFrameList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBFrameList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBFrameList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFrameList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBFrameList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBFrameList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBFrameList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBFrameList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBFrameList MakeReadOnly() {
      frames_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBFrameList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBFrameList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBFrameList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBFrameList result;
      
      private PBFrameList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBFrameList original = result;
          result = new PBFrameList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBFrameList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBFrameList.Descriptor; }
      }
      
      public override PBFrameList DefaultInstanceForType {
        get { return global::hdsense.PBFrameList.DefaultInstance; }
      }
      
      public override PBFrameList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBFrameList) {
          return MergeFrom((PBFrameList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBFrameList other) {
        if (other == global::hdsense.PBFrameList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.frames_.Count != 0) {
          result.frames_.Add(other.frames_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBFrameListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBFrameListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.frames_, global::hdsense.PBFrame.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBFrame> FramesList {
        get { return PrepareBuilder().frames_; }
      }
      public int FramesCount {
        get { return result.FramesCount; }
      }
      public global::hdsense.PBFrame GetFrames(int index) {
        return result.GetFrames(index);
      }
      public Builder SetFrames(int index, global::hdsense.PBFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frames_[index] = value;
        return this;
      }
      public Builder SetFrames(int index, global::hdsense.PBFrame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frames_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFrames(global::hdsense.PBFrame value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.frames_.Add(value);
        return this;
      }
      public Builder AddFrames(global::hdsense.PBFrame.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.frames_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFrames(scg::IEnumerable<global::hdsense.PBFrame> values) {
        PrepareBuilder();
        result.frames_.Add(values);
        return this;
      }
      public Builder ClearFrames() {
        PrepareBuilder();
        result.frames_.Clear();
        return this;
      }
    }
    static PBFrameList() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBLayout : pb::GeneratedMessage<PBLayout, PBLayout.Builder> {
    private PBLayout() { }
    private static readonly PBLayout defaultInstance = new PBLayout().MakeReadOnly();
    private static readonly string[] _pBLayoutFieldNames = new string[] { "displayMode", "imageUrl", "layoutId", "name", "price", "wallOpuses" };
    private static readonly uint[] _pBLayoutFieldTags = new uint[] { 24, 58, 8, 18, 144, 42 };
    public static PBLayout DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBLayout DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBLayout ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLayout__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBLayout, PBLayout.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLayout__FieldAccessorTable; }
    }
    
    public const int LayoutIdFieldNumber = 1;
    private bool hasLayoutId;
    private int layoutId_;
    public bool HasLayoutId {
      get { return hasLayoutId; }
    }
    public int LayoutId {
      get { return layoutId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DisplayModeFieldNumber = 3;
    private bool hasDisplayMode;
    private int displayMode_;
    public bool HasDisplayMode {
      get { return hasDisplayMode; }
    }
    public int DisplayMode {
      get { return displayMode_; }
    }
    
    public const int WallOpusesFieldNumber = 5;
    private pbc::PopsicleList<global::hdsense.PBWallOpus> wallOpuses_ = new pbc::PopsicleList<global::hdsense.PBWallOpus>();
    public scg::IList<global::hdsense.PBWallOpus> WallOpusesList {
      get { return wallOpuses_; }
    }
    public int WallOpusesCount {
      get { return wallOpuses_.Count; }
    }
    public global::hdsense.PBWallOpus GetWallOpuses(int index) {
      return wallOpuses_[index];
    }
    
    public const int ImageUrlFieldNumber = 7;
    private bool hasImageUrl;
    private string imageUrl_ = "";
    public bool HasImageUrl {
      get { return hasImageUrl; }
    }
    public string ImageUrl {
      get { return imageUrl_; }
    }
    
    public const int PriceFieldNumber = 18;
    private bool hasPrice;
    private int price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public int Price {
      get { return price_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLayoutId) return false;
        foreach (global::hdsense.PBWallOpus element in WallOpusesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBLayoutFieldNames;
      if (hasLayoutId) {
        output.WriteInt32(1, field_names[2], LayoutId);
      }
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (hasDisplayMode) {
        output.WriteInt32(3, field_names[0], DisplayMode);
      }
      if (wallOpuses_.Count > 0) {
        output.WriteMessageArray(5, field_names[5], wallOpuses_);
      }
      if (hasImageUrl) {
        output.WriteString(7, field_names[1], ImageUrl);
      }
      if (hasPrice) {
        output.WriteInt32(18, field_names[4], Price);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLayoutId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, LayoutId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDisplayMode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, DisplayMode);
        }
        foreach (global::hdsense.PBWallOpus element in WallOpusesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ImageUrl);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, Price);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBLayout ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLayout ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLayout ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLayout ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLayout ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLayout ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBLayout ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBLayout ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBLayout ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLayout ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBLayout MakeReadOnly() {
      wallOpuses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBLayout prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBLayout, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBLayout cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBLayout result;
      
      private PBLayout PrepareBuilder() {
        if (resultIsReadOnly) {
          PBLayout original = result;
          result = new PBLayout();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBLayout MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBLayout.Descriptor; }
      }
      
      public override PBLayout DefaultInstanceForType {
        get { return global::hdsense.PBLayout.DefaultInstance; }
      }
      
      public override PBLayout BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBLayout) {
          return MergeFrom((PBLayout) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBLayout other) {
        if (other == global::hdsense.PBLayout.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLayoutId) {
          LayoutId = other.LayoutId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDisplayMode) {
          DisplayMode = other.DisplayMode;
        }
        if (other.wallOpuses_.Count != 0) {
          result.wallOpuses_.Add(other.wallOpuses_);
        }
        if (other.HasImageUrl) {
          ImageUrl = other.ImageUrl;
        }
        if (other.HasPrice) {
          Price = other.Price;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBLayoutFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBLayoutFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLayoutId = input.ReadInt32(ref result.layoutId_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasDisplayMode = input.ReadInt32(ref result.displayMode_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.wallOpuses_, global::hdsense.PBWallOpus.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              result.hasImageUrl = input.ReadString(ref result.imageUrl_);
              break;
            }
            case 144: {
              result.hasPrice = input.ReadInt32(ref result.price_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLayoutId {
        get { return result.hasLayoutId; }
      }
      public int LayoutId {
        get { return result.LayoutId; }
        set { SetLayoutId(value); }
      }
      public Builder SetLayoutId(int value) {
        PrepareBuilder();
        result.hasLayoutId = true;
        result.layoutId_ = value;
        return this;
      }
      public Builder ClearLayoutId() {
        PrepareBuilder();
        result.hasLayoutId = false;
        result.layoutId_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDisplayMode {
        get { return result.hasDisplayMode; }
      }
      public int DisplayMode {
        get { return result.DisplayMode; }
        set { SetDisplayMode(value); }
      }
      public Builder SetDisplayMode(int value) {
        PrepareBuilder();
        result.hasDisplayMode = true;
        result.displayMode_ = value;
        return this;
      }
      public Builder ClearDisplayMode() {
        PrepareBuilder();
        result.hasDisplayMode = false;
        result.displayMode_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBWallOpus> WallOpusesList {
        get { return PrepareBuilder().wallOpuses_; }
      }
      public int WallOpusesCount {
        get { return result.WallOpusesCount; }
      }
      public global::hdsense.PBWallOpus GetWallOpuses(int index) {
        return result.GetWallOpuses(index);
      }
      public Builder SetWallOpuses(int index, global::hdsense.PBWallOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wallOpuses_[index] = value;
        return this;
      }
      public Builder SetWallOpuses(int index, global::hdsense.PBWallOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wallOpuses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWallOpuses(global::hdsense.PBWallOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wallOpuses_.Add(value);
        return this;
      }
      public Builder AddWallOpuses(global::hdsense.PBWallOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wallOpuses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWallOpuses(scg::IEnumerable<global::hdsense.PBWallOpus> values) {
        PrepareBuilder();
        result.wallOpuses_.Add(values);
        return this;
      }
      public Builder ClearWallOpuses() {
        PrepareBuilder();
        result.wallOpuses_.Clear();
        return this;
      }
      
      public bool HasImageUrl {
        get { return result.hasImageUrl; }
      }
      public string ImageUrl {
        get { return result.ImageUrl; }
        set { SetImageUrl(value); }
      }
      public Builder SetImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageUrl = true;
        result.imageUrl_ = value;
        return this;
      }
      public Builder ClearImageUrl() {
        PrepareBuilder();
        result.hasImageUrl = false;
        result.imageUrl_ = "";
        return this;
      }
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0;
        return this;
      }
    }
    static PBLayout() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBLayoutList : pb::GeneratedMessage<PBLayoutList, PBLayoutList.Builder> {
    private PBLayoutList() { }
    private static readonly PBLayoutList defaultInstance = new PBLayoutList().MakeReadOnly();
    private static readonly string[] _pBLayoutListFieldNames = new string[] { "layouts" };
    private static readonly uint[] _pBLayoutListFieldTags = new uint[] { 10 };
    public static PBLayoutList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBLayoutList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBLayoutList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLayoutList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBLayoutList, PBLayoutList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Draw.internal__static_hdsense_PBLayoutList__FieldAccessorTable; }
    }
    
    public const int LayoutsFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBLayout> layouts_ = new pbc::PopsicleList<global::hdsense.PBLayout>();
    public scg::IList<global::hdsense.PBLayout> LayoutsList {
      get { return layouts_; }
    }
    public int LayoutsCount {
      get { return layouts_.Count; }
    }
    public global::hdsense.PBLayout GetLayouts(int index) {
      return layouts_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBLayout element in LayoutsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBLayoutListFieldNames;
      if (layouts_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], layouts_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBLayout element in LayoutsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBLayoutList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLayoutList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLayoutList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLayoutList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLayoutList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLayoutList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBLayoutList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBLayoutList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBLayoutList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLayoutList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBLayoutList MakeReadOnly() {
      layouts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBLayoutList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBLayoutList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBLayoutList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBLayoutList result;
      
      private PBLayoutList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBLayoutList original = result;
          result = new PBLayoutList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBLayoutList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBLayoutList.Descriptor; }
      }
      
      public override PBLayoutList DefaultInstanceForType {
        get { return global::hdsense.PBLayoutList.DefaultInstance; }
      }
      
      public override PBLayoutList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBLayoutList) {
          return MergeFrom((PBLayoutList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBLayoutList other) {
        if (other == global::hdsense.PBLayoutList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.layouts_.Count != 0) {
          result.layouts_.Add(other.layouts_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBLayoutListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBLayoutListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.layouts_, global::hdsense.PBLayout.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBLayout> LayoutsList {
        get { return PrepareBuilder().layouts_; }
      }
      public int LayoutsCount {
        get { return result.LayoutsCount; }
      }
      public global::hdsense.PBLayout GetLayouts(int index) {
        return result.GetLayouts(index);
      }
      public Builder SetLayouts(int index, global::hdsense.PBLayout value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.layouts_[index] = value;
        return this;
      }
      public Builder SetLayouts(int index, global::hdsense.PBLayout.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.layouts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLayouts(global::hdsense.PBLayout value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.layouts_.Add(value);
        return this;
      }
      public Builder AddLayouts(global::hdsense.PBLayout.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.layouts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLayouts(scg::IEnumerable<global::hdsense.PBLayout> values) {
        PrepareBuilder();
        result.layouts_.Add(values);
        return this;
      }
      public Builder ClearLayouts() {
        PrepareBuilder();
        result.layouts_.Clear();
        return this;
      }
    }
    static PBLayoutList() {
      object.ReferenceEquals(global::hdsense.Draw.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
