// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Sing {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSongCategory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSongCategory, global::hdsense.PBSongCategory.Builder> internal__static_hdsense_PBSongCategory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSongCategoryList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSongCategoryList, global::hdsense.PBSongCategoryList.Builder> internal__static_hdsense_PBSongCategoryList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSong__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSong, global::hdsense.PBSong.Builder> internal__static_hdsense_PBSong__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSongList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSongList, global::hdsense.PBSongList.Builder> internal__static_hdsense_PBSongList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSingOpus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSingOpus, global::hdsense.PBSingOpus.Builder> internal__static_hdsense_PBSingOpus__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Sing() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpTaW5nLnByb3RvEgdoZHNlbnNlIjAKDlBCU29uZ0NhdGVnb3J5EgwKBG5h" + 
          "bWUYASACKAkSEAoIc29uZ1RhZ3MYAyADKAkiQAoSUEJTb25nQ2F0ZWdvcnlM" + 
          "aXN0EioKCWNhdGVnb3J5cxgBIAMoCzIXLmhkc2Vuc2UuUEJTb25nQ2F0ZWdv" + 
          "cnkiZAoGUEJTb25nEg4KBnNvbmdJZBgBIAIoCRIMCgRuYW1lGAIgAigJEg4K" + 
          "BmF1dGhvchgDIAEoCRINCgVseXJpYxgEIAEoCRIQCghseXJpY1VybBgFIAEo" + 
          "CRILCgN0YWcYFCADKAkiLAoKUEJTb25nTGlzdBIeCgVzb25ncxgBIAMoCzIP" + 
          "Lmhkc2Vuc2UuUEJTb25nIsIBCgpQQlNpbmdPcHVzEh0KBHNvbmcYASABKAsy" + 
          "Dy5oZHNlbnNlLlBCU29uZxInCgl2b2ljZVR5cGUYAiABKA4yFC5oZHNlbnNl" + 
          "LlBCVm9pY2VUeXBlEhMKCGR1cmF0aW9uGAMgASgCOgExEhAKBXBpdGNoGAQg" + 
          "ASgCOgExEhIKB2Zvcm1hbnQYBSABKAI6ATESFQoNdm9pY2VEdXJhdGlvbhgU" + 
          "IAEoAhIaChJsb2NhbE5hdGl2ZURhdGFVUkwYZCABKAkqhgEKC1BCVm9pY2VU" + 
          "eXBlEhMKD1ZvaWNlVHlwZU9yaWdpbhAAEhMKD1ZvaWNlVHlwZVRvbUNhdBAB" + 
          "EhEKDVZvaWNlVHlwZU1hbGUQAhITCg9Wb2ljZVR5cGVGZW1hbGUQAxIRCg1W" + 
          "b2ljZVR5cGVEdWNrEAQSEgoOVm9pY2VUeXBlQ2hpbGQQBUI1Cidjb20uaGRz" + 
          "ZW5zZS5uZXR3b3JrLmdhbWUucHJvdG9jb2wubW9kZWxCClNpbmdQcm90b3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBSongCategory__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBSongCategory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSongCategory, global::hdsense.PBSongCategory.Builder>(internal__static_hdsense_PBSongCategory__Descriptor,
                new string[] { "Name", "SongTags", });
        internal__static_hdsense_PBSongCategoryList__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBSongCategoryList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSongCategoryList, global::hdsense.PBSongCategoryList.Builder>(internal__static_hdsense_PBSongCategoryList__Descriptor,
                new string[] { "Categorys", });
        internal__static_hdsense_PBSong__Descriptor = Descriptor.MessageTypes[2];
        internal__static_hdsense_PBSong__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSong, global::hdsense.PBSong.Builder>(internal__static_hdsense_PBSong__Descriptor,
                new string[] { "SongId", "Name", "Author", "Lyric", "LyricUrl", "Tag", });
        internal__static_hdsense_PBSongList__Descriptor = Descriptor.MessageTypes[3];
        internal__static_hdsense_PBSongList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSongList, global::hdsense.PBSongList.Builder>(internal__static_hdsense_PBSongList__Descriptor,
                new string[] { "Songs", });
        internal__static_hdsense_PBSingOpus__Descriptor = Descriptor.MessageTypes[4];
        internal__static_hdsense_PBSingOpus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSingOpus, global::hdsense.PBSingOpus.Builder>(internal__static_hdsense_PBSingOpus__Descriptor,
                new string[] { "Song", "VoiceType", "Duration", "Pitch", "Formant", "VoiceDuration", "LocalNativeDataURL", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PBVoiceType {
    VoiceTypeOrigin = 0,
    VoiceTypeTomCat = 1,
    VoiceTypeMale = 2,
    VoiceTypeFemale = 3,
    VoiceTypeDuck = 4,
    VoiceTypeChild = 5,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSongCategory : pb::GeneratedMessage<PBSongCategory, PBSongCategory.Builder> {
    private PBSongCategory() { }
    private static readonly PBSongCategory defaultInstance = new PBSongCategory().MakeReadOnly();
    private static readonly string[] _pBSongCategoryFieldNames = new string[] { "name", "songTags" };
    private static readonly uint[] _pBSongCategoryFieldTags = new uint[] { 10, 26 };
    public static PBSongCategory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSongCategory DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSongCategory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSongCategory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSongCategory, PBSongCategory.Builder> InternalFieldAccessors {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSongCategory__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int SongTagsFieldNumber = 3;
    private pbc::PopsicleList<string> songTags_ = new pbc::PopsicleList<string>();
    public scg::IList<string> SongTagsList {
      get { return pbc::Lists.AsReadOnly(songTags_); }
    }
    public int SongTagsCount {
      get { return songTags_.Count; }
    }
    public string GetSongTags(int index) {
      return songTags_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSongCategoryFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (songTags_.Count > 0) {
        output.WriteStringArray(3, field_names[1], songTags_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        {
          int dataSize = 0;
          foreach (string element in SongTagsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * songTags_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSongCategory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSongCategory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSongCategory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSongCategory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSongCategory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSongCategory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSongCategory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSongCategory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSongCategory ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSongCategory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSongCategory MakeReadOnly() {
      songTags_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSongCategory prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSongCategory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSongCategory cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSongCategory result;
      
      private PBSongCategory PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSongCategory original = result;
          result = new PBSongCategory();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSongCategory MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSongCategory.Descriptor; }
      }
      
      public override PBSongCategory DefaultInstanceForType {
        get { return global::hdsense.PBSongCategory.DefaultInstance; }
      }
      
      public override PBSongCategory BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSongCategory) {
          return MergeFrom((PBSongCategory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSongCategory other) {
        if (other == global::hdsense.PBSongCategory.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.songTags_.Count != 0) {
          result.songTags_.Add(other.songTags_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSongCategoryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSongCategoryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.songTags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> SongTagsList {
        get { return PrepareBuilder().songTags_; }
      }
      public int SongTagsCount {
        get { return result.SongTagsCount; }
      }
      public string GetSongTags(int index) {
        return result.GetSongTags(index);
      }
      public Builder SetSongTags(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.songTags_[index] = value;
        return this;
      }
      public Builder AddSongTags(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.songTags_.Add(value);
        return this;
      }
      public Builder AddRangeSongTags(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.songTags_.Add(values);
        return this;
      }
      public Builder ClearSongTags() {
        PrepareBuilder();
        result.songTags_.Clear();
        return this;
      }
    }
    static PBSongCategory() {
      object.ReferenceEquals(global::hdsense.Sing.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSongCategoryList : pb::GeneratedMessage<PBSongCategoryList, PBSongCategoryList.Builder> {
    private PBSongCategoryList() { }
    private static readonly PBSongCategoryList defaultInstance = new PBSongCategoryList().MakeReadOnly();
    private static readonly string[] _pBSongCategoryListFieldNames = new string[] { "categorys" };
    private static readonly uint[] _pBSongCategoryListFieldTags = new uint[] { 10 };
    public static PBSongCategoryList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSongCategoryList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSongCategoryList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSongCategoryList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSongCategoryList, PBSongCategoryList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSongCategoryList__FieldAccessorTable; }
    }
    
    public const int CategorysFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBSongCategory> categorys_ = new pbc::PopsicleList<global::hdsense.PBSongCategory>();
    public scg::IList<global::hdsense.PBSongCategory> CategorysList {
      get { return categorys_; }
    }
    public int CategorysCount {
      get { return categorys_.Count; }
    }
    public global::hdsense.PBSongCategory GetCategorys(int index) {
      return categorys_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBSongCategory element in CategorysList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSongCategoryListFieldNames;
      if (categorys_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], categorys_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBSongCategory element in CategorysList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSongCategoryList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSongCategoryList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSongCategoryList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSongCategoryList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSongCategoryList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSongCategoryList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSongCategoryList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSongCategoryList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSongCategoryList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSongCategoryList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSongCategoryList MakeReadOnly() {
      categorys_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSongCategoryList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSongCategoryList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSongCategoryList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSongCategoryList result;
      
      private PBSongCategoryList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSongCategoryList original = result;
          result = new PBSongCategoryList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSongCategoryList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSongCategoryList.Descriptor; }
      }
      
      public override PBSongCategoryList DefaultInstanceForType {
        get { return global::hdsense.PBSongCategoryList.DefaultInstance; }
      }
      
      public override PBSongCategoryList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSongCategoryList) {
          return MergeFrom((PBSongCategoryList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSongCategoryList other) {
        if (other == global::hdsense.PBSongCategoryList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.categorys_.Count != 0) {
          result.categorys_.Add(other.categorys_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSongCategoryListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSongCategoryListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.categorys_, global::hdsense.PBSongCategory.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBSongCategory> CategorysList {
        get { return PrepareBuilder().categorys_; }
      }
      public int CategorysCount {
        get { return result.CategorysCount; }
      }
      public global::hdsense.PBSongCategory GetCategorys(int index) {
        return result.GetCategorys(index);
      }
      public Builder SetCategorys(int index, global::hdsense.PBSongCategory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.categorys_[index] = value;
        return this;
      }
      public Builder SetCategorys(int index, global::hdsense.PBSongCategory.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.categorys_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCategorys(global::hdsense.PBSongCategory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.categorys_.Add(value);
        return this;
      }
      public Builder AddCategorys(global::hdsense.PBSongCategory.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.categorys_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCategorys(scg::IEnumerable<global::hdsense.PBSongCategory> values) {
        PrepareBuilder();
        result.categorys_.Add(values);
        return this;
      }
      public Builder ClearCategorys() {
        PrepareBuilder();
        result.categorys_.Clear();
        return this;
      }
    }
    static PBSongCategoryList() {
      object.ReferenceEquals(global::hdsense.Sing.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSong : pb::GeneratedMessage<PBSong, PBSong.Builder> {
    private PBSong() { }
    private static readonly PBSong defaultInstance = new PBSong().MakeReadOnly();
    private static readonly string[] _pBSongFieldNames = new string[] { "author", "lyric", "lyricUrl", "name", "songId", "tag" };
    private static readonly uint[] _pBSongFieldTags = new uint[] { 26, 34, 42, 18, 10, 162 };
    public static PBSong DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSong DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSong ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSong__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSong, PBSong.Builder> InternalFieldAccessors {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSong__FieldAccessorTable; }
    }
    
    public const int SongIdFieldNumber = 1;
    private bool hasSongId;
    private string songId_ = "";
    public bool HasSongId {
      get { return hasSongId; }
    }
    public string SongId {
      get { return songId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AuthorFieldNumber = 3;
    private bool hasAuthor;
    private string author_ = "";
    public bool HasAuthor {
      get { return hasAuthor; }
    }
    public string Author {
      get { return author_; }
    }
    
    public const int LyricFieldNumber = 4;
    private bool hasLyric;
    private string lyric_ = "";
    public bool HasLyric {
      get { return hasLyric; }
    }
    public string Lyric {
      get { return lyric_; }
    }
    
    public const int LyricUrlFieldNumber = 5;
    private bool hasLyricUrl;
    private string lyricUrl_ = "";
    public bool HasLyricUrl {
      get { return hasLyricUrl; }
    }
    public string LyricUrl {
      get { return lyricUrl_; }
    }
    
    public const int TagFieldNumber = 20;
    private pbc::PopsicleList<string> tag_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TagList {
      get { return pbc::Lists.AsReadOnly(tag_); }
    }
    public int TagCount {
      get { return tag_.Count; }
    }
    public string GetTag(int index) {
      return tag_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSongId) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSongFieldNames;
      if (hasSongId) {
        output.WriteString(1, field_names[4], SongId);
      }
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (hasAuthor) {
        output.WriteString(3, field_names[0], Author);
      }
      if (hasLyric) {
        output.WriteString(4, field_names[1], Lyric);
      }
      if (hasLyricUrl) {
        output.WriteString(5, field_names[2], LyricUrl);
      }
      if (tag_.Count > 0) {
        output.WriteStringArray(20, field_names[5], tag_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSongId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SongId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasAuthor) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Author);
        }
        if (hasLyric) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Lyric);
        }
        if (hasLyricUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(5, LyricUrl);
        }
        {
          int dataSize = 0;
          foreach (string element in TagList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * tag_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSong ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSong ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSong ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSong ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSong ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSong ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSong ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSong ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSong ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSong ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSong MakeReadOnly() {
      tag_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSong prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSong, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSong cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSong result;
      
      private PBSong PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSong original = result;
          result = new PBSong();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSong MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSong.Descriptor; }
      }
      
      public override PBSong DefaultInstanceForType {
        get { return global::hdsense.PBSong.DefaultInstance; }
      }
      
      public override PBSong BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSong) {
          return MergeFrom((PBSong) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSong other) {
        if (other == global::hdsense.PBSong.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSongId) {
          SongId = other.SongId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasAuthor) {
          Author = other.Author;
        }
        if (other.HasLyric) {
          Lyric = other.Lyric;
        }
        if (other.HasLyricUrl) {
          LyricUrl = other.LyricUrl;
        }
        if (other.tag_.Count != 0) {
          result.tag_.Add(other.tag_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSongFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSongFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSongId = input.ReadString(ref result.songId_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasAuthor = input.ReadString(ref result.author_);
              break;
            }
            case 34: {
              result.hasLyric = input.ReadString(ref result.lyric_);
              break;
            }
            case 42: {
              result.hasLyricUrl = input.ReadString(ref result.lyricUrl_);
              break;
            }
            case 162: {
              input.ReadStringArray(tag, field_name, result.tag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSongId {
        get { return result.hasSongId; }
      }
      public string SongId {
        get { return result.SongId; }
        set { SetSongId(value); }
      }
      public Builder SetSongId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSongId = true;
        result.songId_ = value;
        return this;
      }
      public Builder ClearSongId() {
        PrepareBuilder();
        result.hasSongId = false;
        result.songId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasAuthor {
        get { return result.hasAuthor; }
      }
      public string Author {
        get { return result.Author; }
        set { SetAuthor(value); }
      }
      public Builder SetAuthor(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthor = true;
        result.author_ = value;
        return this;
      }
      public Builder ClearAuthor() {
        PrepareBuilder();
        result.hasAuthor = false;
        result.author_ = "";
        return this;
      }
      
      public bool HasLyric {
        get { return result.hasLyric; }
      }
      public string Lyric {
        get { return result.Lyric; }
        set { SetLyric(value); }
      }
      public Builder SetLyric(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLyric = true;
        result.lyric_ = value;
        return this;
      }
      public Builder ClearLyric() {
        PrepareBuilder();
        result.hasLyric = false;
        result.lyric_ = "";
        return this;
      }
      
      public bool HasLyricUrl {
        get { return result.hasLyricUrl; }
      }
      public string LyricUrl {
        get { return result.LyricUrl; }
        set { SetLyricUrl(value); }
      }
      public Builder SetLyricUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLyricUrl = true;
        result.lyricUrl_ = value;
        return this;
      }
      public Builder ClearLyricUrl() {
        PrepareBuilder();
        result.hasLyricUrl = false;
        result.lyricUrl_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> TagList {
        get { return PrepareBuilder().tag_; }
      }
      public int TagCount {
        get { return result.TagCount; }
      }
      public string GetTag(int index) {
        return result.GetTag(index);
      }
      public Builder SetTag(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tag_[index] = value;
        return this;
      }
      public Builder AddTag(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tag_.Add(value);
        return this;
      }
      public Builder AddRangeTag(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.tag_.Add(values);
        return this;
      }
      public Builder ClearTag() {
        PrepareBuilder();
        result.tag_.Clear();
        return this;
      }
    }
    static PBSong() {
      object.ReferenceEquals(global::hdsense.Sing.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSongList : pb::GeneratedMessage<PBSongList, PBSongList.Builder> {
    private PBSongList() { }
    private static readonly PBSongList defaultInstance = new PBSongList().MakeReadOnly();
    private static readonly string[] _pBSongListFieldNames = new string[] { "songs" };
    private static readonly uint[] _pBSongListFieldTags = new uint[] { 10 };
    public static PBSongList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSongList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSongList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSongList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSongList, PBSongList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSongList__FieldAccessorTable; }
    }
    
    public const int SongsFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBSong> songs_ = new pbc::PopsicleList<global::hdsense.PBSong>();
    public scg::IList<global::hdsense.PBSong> SongsList {
      get { return songs_; }
    }
    public int SongsCount {
      get { return songs_.Count; }
    }
    public global::hdsense.PBSong GetSongs(int index) {
      return songs_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBSong element in SongsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSongListFieldNames;
      if (songs_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], songs_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBSong element in SongsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSongList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSongList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSongList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSongList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSongList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSongList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSongList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSongList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSongList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSongList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSongList MakeReadOnly() {
      songs_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSongList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSongList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSongList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSongList result;
      
      private PBSongList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSongList original = result;
          result = new PBSongList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSongList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSongList.Descriptor; }
      }
      
      public override PBSongList DefaultInstanceForType {
        get { return global::hdsense.PBSongList.DefaultInstance; }
      }
      
      public override PBSongList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSongList) {
          return MergeFrom((PBSongList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSongList other) {
        if (other == global::hdsense.PBSongList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.songs_.Count != 0) {
          result.songs_.Add(other.songs_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSongListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSongListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.songs_, global::hdsense.PBSong.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBSong> SongsList {
        get { return PrepareBuilder().songs_; }
      }
      public int SongsCount {
        get { return result.SongsCount; }
      }
      public global::hdsense.PBSong GetSongs(int index) {
        return result.GetSongs(index);
      }
      public Builder SetSongs(int index, global::hdsense.PBSong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.songs_[index] = value;
        return this;
      }
      public Builder SetSongs(int index, global::hdsense.PBSong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.songs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSongs(global::hdsense.PBSong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.songs_.Add(value);
        return this;
      }
      public Builder AddSongs(global::hdsense.PBSong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.songs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSongs(scg::IEnumerable<global::hdsense.PBSong> values) {
        PrepareBuilder();
        result.songs_.Add(values);
        return this;
      }
      public Builder ClearSongs() {
        PrepareBuilder();
        result.songs_.Clear();
        return this;
      }
    }
    static PBSongList() {
      object.ReferenceEquals(global::hdsense.Sing.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSingOpus : pb::GeneratedMessage<PBSingOpus, PBSingOpus.Builder> {
    private PBSingOpus() { }
    private static readonly PBSingOpus defaultInstance = new PBSingOpus().MakeReadOnly();
    private static readonly string[] _pBSingOpusFieldNames = new string[] { "duration", "formant", "localNativeDataURL", "pitch", "song", "voiceDuration", "voiceType" };
    private static readonly uint[] _pBSingOpusFieldTags = new uint[] { 29, 45, 802, 37, 10, 165, 16 };
    public static PBSingOpus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSingOpus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSingOpus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSingOpus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSingOpus, PBSingOpus.Builder> InternalFieldAccessors {
      get { return global::hdsense.Sing.internal__static_hdsense_PBSingOpus__FieldAccessorTable; }
    }
    
    public const int SongFieldNumber = 1;
    private bool hasSong;
    private global::hdsense.PBSong song_;
    public bool HasSong {
      get { return hasSong; }
    }
    public global::hdsense.PBSong Song {
      get { return song_ ?? global::hdsense.PBSong.DefaultInstance; }
    }
    
    public const int VoiceTypeFieldNumber = 2;
    private bool hasVoiceType;
    private global::hdsense.PBVoiceType voiceType_ = global::hdsense.PBVoiceType.VoiceTypeOrigin;
    public bool HasVoiceType {
      get { return hasVoiceType; }
    }
    public global::hdsense.PBVoiceType VoiceType {
      get { return voiceType_; }
    }
    
    public const int DurationFieldNumber = 3;
    private bool hasDuration;
    private float duration_ = 1F;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public float Duration {
      get { return duration_; }
    }
    
    public const int PitchFieldNumber = 4;
    private bool hasPitch;
    private float pitch_ = 1F;
    public bool HasPitch {
      get { return hasPitch; }
    }
    public float Pitch {
      get { return pitch_; }
    }
    
    public const int FormantFieldNumber = 5;
    private bool hasFormant;
    private float formant_ = 1F;
    public bool HasFormant {
      get { return hasFormant; }
    }
    public float Formant {
      get { return formant_; }
    }
    
    public const int VoiceDurationFieldNumber = 20;
    private bool hasVoiceDuration;
    private float voiceDuration_;
    public bool HasVoiceDuration {
      get { return hasVoiceDuration; }
    }
    public float VoiceDuration {
      get { return voiceDuration_; }
    }
    
    public const int LocalNativeDataURLFieldNumber = 100;
    private bool hasLocalNativeDataURL;
    private string localNativeDataURL_ = "";
    public bool HasLocalNativeDataURL {
      get { return hasLocalNativeDataURL; }
    }
    public string LocalNativeDataURL {
      get { return localNativeDataURL_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasSong) {
          if (!Song.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSingOpusFieldNames;
      if (hasSong) {
        output.WriteMessage(1, field_names[4], Song);
      }
      if (hasVoiceType) {
        output.WriteEnum(2, field_names[6], (int) VoiceType, VoiceType);
      }
      if (hasDuration) {
        output.WriteFloat(3, field_names[0], Duration);
      }
      if (hasPitch) {
        output.WriteFloat(4, field_names[3], Pitch);
      }
      if (hasFormant) {
        output.WriteFloat(5, field_names[1], Formant);
      }
      if (hasVoiceDuration) {
        output.WriteFloat(20, field_names[5], VoiceDuration);
      }
      if (hasLocalNativeDataURL) {
        output.WriteString(100, field_names[2], LocalNativeDataURL);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSong) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Song);
        }
        if (hasVoiceType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) VoiceType);
        }
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Duration);
        }
        if (hasPitch) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Pitch);
        }
        if (hasFormant) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, Formant);
        }
        if (hasVoiceDuration) {
          size += pb::CodedOutputStream.ComputeFloatSize(20, VoiceDuration);
        }
        if (hasLocalNativeDataURL) {
          size += pb::CodedOutputStream.ComputeStringSize(100, LocalNativeDataURL);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSingOpus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSingOpus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSingOpus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSingOpus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSingOpus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSingOpus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSingOpus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSingOpus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSingOpus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSingOpus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSingOpus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSingOpus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSingOpus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSingOpus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSingOpus result;
      
      private PBSingOpus PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSingOpus original = result;
          result = new PBSingOpus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSingOpus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSingOpus.Descriptor; }
      }
      
      public override PBSingOpus DefaultInstanceForType {
        get { return global::hdsense.PBSingOpus.DefaultInstance; }
      }
      
      public override PBSingOpus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSingOpus) {
          return MergeFrom((PBSingOpus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSingOpus other) {
        if (other == global::hdsense.PBSingOpus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSong) {
          MergeSong(other.Song);
        }
        if (other.HasVoiceType) {
          VoiceType = other.VoiceType;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasPitch) {
          Pitch = other.Pitch;
        }
        if (other.HasFormant) {
          Formant = other.Formant;
        }
        if (other.HasVoiceDuration) {
          VoiceDuration = other.VoiceDuration;
        }
        if (other.HasLocalNativeDataURL) {
          LocalNativeDataURL = other.LocalNativeDataURL;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSingOpusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSingOpusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::hdsense.PBSong.Builder subBuilder = global::hdsense.PBSong.CreateBuilder();
              if (result.hasSong) {
                subBuilder.MergeFrom(Song);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Song = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.voiceType_, out unknown)) {
                result.hasVoiceType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 29: {
              result.hasDuration = input.ReadFloat(ref result.duration_);
              break;
            }
            case 37: {
              result.hasPitch = input.ReadFloat(ref result.pitch_);
              break;
            }
            case 45: {
              result.hasFormant = input.ReadFloat(ref result.formant_);
              break;
            }
            case 165: {
              result.hasVoiceDuration = input.ReadFloat(ref result.voiceDuration_);
              break;
            }
            case 802: {
              result.hasLocalNativeDataURL = input.ReadString(ref result.localNativeDataURL_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSong {
       get { return result.hasSong; }
      }
      public global::hdsense.PBSong Song {
        get { return result.Song; }
        set { SetSong(value); }
      }
      public Builder SetSong(global::hdsense.PBSong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSong = true;
        result.song_ = value;
        return this;
      }
      public Builder SetSong(global::hdsense.PBSong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSong = true;
        result.song_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSong(global::hdsense.PBSong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSong &&
            result.song_ != global::hdsense.PBSong.DefaultInstance) {
            result.song_ = global::hdsense.PBSong.CreateBuilder(result.song_).MergeFrom(value).BuildPartial();
        } else {
          result.song_ = value;
        }
        result.hasSong = true;
        return this;
      }
      public Builder ClearSong() {
        PrepareBuilder();
        result.hasSong = false;
        result.song_ = null;
        return this;
      }
      
      public bool HasVoiceType {
       get { return result.hasVoiceType; }
      }
      public global::hdsense.PBVoiceType VoiceType {
        get { return result.VoiceType; }
        set { SetVoiceType(value); }
      }
      public Builder SetVoiceType(global::hdsense.PBVoiceType value) {
        PrepareBuilder();
        result.hasVoiceType = true;
        result.voiceType_ = value;
        return this;
      }
      public Builder ClearVoiceType() {
        PrepareBuilder();
        result.hasVoiceType = false;
        result.voiceType_ = global::hdsense.PBVoiceType.VoiceTypeOrigin;
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public float Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(float value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 1F;
        return this;
      }
      
      public bool HasPitch {
        get { return result.hasPitch; }
      }
      public float Pitch {
        get { return result.Pitch; }
        set { SetPitch(value); }
      }
      public Builder SetPitch(float value) {
        PrepareBuilder();
        result.hasPitch = true;
        result.pitch_ = value;
        return this;
      }
      public Builder ClearPitch() {
        PrepareBuilder();
        result.hasPitch = false;
        result.pitch_ = 1F;
        return this;
      }
      
      public bool HasFormant {
        get { return result.hasFormant; }
      }
      public float Formant {
        get { return result.Formant; }
        set { SetFormant(value); }
      }
      public Builder SetFormant(float value) {
        PrepareBuilder();
        result.hasFormant = true;
        result.formant_ = value;
        return this;
      }
      public Builder ClearFormant() {
        PrepareBuilder();
        result.hasFormant = false;
        result.formant_ = 1F;
        return this;
      }
      
      public bool HasVoiceDuration {
        get { return result.hasVoiceDuration; }
      }
      public float VoiceDuration {
        get { return result.VoiceDuration; }
        set { SetVoiceDuration(value); }
      }
      public Builder SetVoiceDuration(float value) {
        PrepareBuilder();
        result.hasVoiceDuration = true;
        result.voiceDuration_ = value;
        return this;
      }
      public Builder ClearVoiceDuration() {
        PrepareBuilder();
        result.hasVoiceDuration = false;
        result.voiceDuration_ = 0F;
        return this;
      }
      
      public bool HasLocalNativeDataURL {
        get { return result.hasLocalNativeDataURL; }
      }
      public string LocalNativeDataURL {
        get { return result.LocalNativeDataURL; }
        set { SetLocalNativeDataURL(value); }
      }
      public Builder SetLocalNativeDataURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalNativeDataURL = true;
        result.localNativeDataURL_ = value;
        return this;
      }
      public Builder ClearLocalNativeDataURL() {
        PrepareBuilder();
        result.hasLocalNativeDataURL = false;
        result.localNativeDataURL_ = "";
        return this;
      }
    }
    static PBSingOpus() {
      object.ReferenceEquals(global::hdsense.Sing.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
