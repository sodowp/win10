// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Group {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGroupUser__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupUser, global::hdsense.PBGroupUser.Builder> internal__static_hdsense_PBGroupUser__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGroupTitle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupTitle, global::hdsense.PBGroupTitle.Builder> internal__static_hdsense_PBGroupTitle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGroupUsersByTitle__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupUsersByTitle, global::hdsense.PBGroupUsersByTitle.Builder> internal__static_hdsense_PBGroupUsersByTitle__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBPrizeItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBPrizeItem, global::hdsense.PBPrizeItem.Builder> internal__static_hdsense_PBPrizeItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroup, global::hdsense.PBGroup.Builder> internal__static_hdsense_PBGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGroupUserRole__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupUserRole, global::hdsense.PBGroupUserRole.Builder> internal__static_hdsense_PBGroupUserRole__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGroupNotice__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupNotice, global::hdsense.PBGroupNotice.Builder> internal__static_hdsense_PBGroupNotice__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBContest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBContest, global::hdsense.PBContest.Builder> internal__static_hdsense_PBContest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBContestList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBContestList, global::hdsense.PBContestList.Builder> internal__static_hdsense_PBContestList__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Group() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgtHcm91cC5wcm90bxIHaGRzZW5zZRoTR2FtZUNvbnN0YW50cy5wcm90bxoP" + 
          "R2FtZUJhc2ljLnByb3RvGglCQlMucHJvdG8iggEKC1BCR3JvdXBVc2VyEiEK" + 
          "BHVzZXIYASACKAsyEy5oZHNlbnNlLlBCR2FtZVVzZXISFAoMY3VzdG9tZVRp" + 
          "dGxlGAIgASgJEhIKCnBlcm1pc3Npb24YAyABKAUSJgoEdHlwZRgEIAEoDjIY" + 
          "Lmhkc2Vuc2UuUEJHcm91cFVzZXJUeXBlIi4KDFBCR3JvdXBUaXRsZRIPCgd0" + 
          "aXRsZUlkGAEgAigFEg0KBXRpdGxlGAIgASgJIl8KE1BCR3JvdXBVc2Vyc0J5" + 
          "VGl0bGUSJAoFdGl0bGUYASABKAsyFS5oZHNlbnNlLlBCR3JvdXBUaXRsZRIi" + 
          "CgV1c2VycxgCIAMoCzITLmhkc2Vuc2UuUEJHYW1lVXNlciJUCgtQQlByaXpl" + 
          "SXRlbRIMCgR0eXBlGAEgAigFEgsKA251bRgCIAIoBRINCgVjb2lucxgDIAEo" + 
          "BRINCgVtb25leRgEIAEoBRIMCgRub3RlGAUgASgJIo0GCgdQQkdyb3VwEg8K" + 
          "B2dyb3VwSWQYASACKAkSDAoEbmFtZRgCIAIoCRIQCgVsZXZlbBgDIAEoBToB" + 
          "MRIMCgRmYW1lGAQgASgFEg8KB2JhbGFuY2UYBSABKAMSEgoKY3JlYXRlRGF0" + 
          "ZRgGIAEoBRIRCgltZW1iZXJGZWUYByABKAUSEAoIY2FwYWNpdHkYCCABKAUS" + 
          "DAoEc2l6ZRgJIAEoBRIRCglndWVzdFNpemUYCiABKAUSFQoNZ3Vlc3RDYXBh" + 
          "Y2l0eRgLIAEoBRISCgp0b3BpY0NvdW50GAwgASgFEhAKCGZhbkNvdW50GA0g" + 
          "ASgFEhUKDXRpdGxlQ2FwYWNpdHkYDiABKAUSDAoEZGVzYxgPIAEoCRIRCglz" + 
          "aWduYXR1cmUYECABKAkSDgoGc3RhdHVzGBEgASgFEhIKCnN0YXR1c0Rlc2MY" + 
          "EiABKAkSEwoLZ3JvdXBOdW1iZXIYEyABKAkSDQoFcXJVcmwYFCABKAkSDwoH" + 
          "YmdJbWFnZRgVIAEoCRISCgptZWRhbEltYWdlGBYgASgJEhEKCWxvbmdpdHVk" + 
          "ZRgXIAEoARIQCghsYXRpdHVkZRgYIAEoARIQCghsb2NhdGlvbhgZIAEoCRIU" + 
          "Cgxvcmdhbml6ZU5hbWUYGiABKAkSEgoKaW52aXRlQ29kZRgbIAEoCRIXCg9p" + 
          "bnZpdGVCZWdpbkRhdGUYHCABKAUSFQoNaW52aXRlRW5kRGF0ZRgdIAEoBRIl" + 
          "CgZ0aXRsZXMYHyADKAsyFS5oZHNlbnNlLlBCR3JvdXBUaXRsZRIkCgdjcmVh" + 
          "dG9yGCggASgLMhMuaGRzZW5zZS5QQkdhbWVVc2VyEiMKBmFkbWlucxgpIAMo" + 
          "CzITLmhkc2Vuc2UuUEJHYW1lVXNlchIrCgV1c2VycxgqIAMoCzIcLmhkc2Vu" + 
          "c2UuUEJHcm91cFVzZXJzQnlUaXRsZRIjCgZndWVzdHMYKyADKAsyEy5oZHNl" + 
          "bnNlLlBCR2FtZVVzZXISIQoFdG9waWMYPCABKAsyEi5oZHNlbnNlLlBCQkJT" + 
          "UG9zdCJXCg9QQkdyb3VwVXNlclJvbGUSDwoHZ3JvdXBJZBgBIAIoCRIMCgRy" + 
          "b2xlGAIgAigFEhIKCnBlcm1pc3Npb24YAyACKAUSEQoJZ3JvdXBOYW1lGAQg" + 
          "ASgJIuUBCg1QQkdyb3VwTm90aWNlEhAKCG5vdGljZUlkGAEgAigJEgwKBHR5" + 
          "cGUYAiABKAUSDgoGc3RhdHVzGAMgASgFEg8KB2dyb3VwSWQYBCABKAkSEQoJ" + 
          "Z3JvdXBOYW1lGAUgASgJEg8KB21lc3NhZ2UYBiABKAkSEgoKY3JlYXRlRGF0" + 
          "ZRgHIAEoBRIOCgZhbW91bnQYCCABKAUSJgoJcHVibGlzaGVyGAogASgLMhMu" + 
          "aGRzZW5zZS5QQkdhbWVVc2VyEiMKBnRhcmdldBgLIAEoCzITLmhkc2Vuc2Uu" + 
          "UEJHYW1lVXNlciKcDQoJUEJDb250ZXN0EhEKCWNvbnRlc3RJZBgBIAIoCRIR" + 
          "CglzdGFydERhdGUYAiABKAUSDwoHZW5kRGF0ZRgDIAEoBRIMCgR0eXBlGAQg" + 
          "ASgFEg4KBnN0YXR1cxgFIAEoBRIYChBwYXJ0aWNpcGFudENvdW50GAYgASgF" + 
          "EhEKCW9wdXNDb3VudBgHIAEoBRINCgV0aXRsZRgIIAEoCRISCgpjb250ZXN0" + 
          "VXJsGAkgASgJEhQKDHN0YXRlbWVudFVybBgKIAEoCRIVCg12b3RlU3RhcnRE" + 
          "YXRlGAsgASgFEhMKC3ZvdGVFbmREYXRlGAwgASgFEhQKDGlzQW5vdW55bW91" + 
          "cxgNIAEoCBIUCgxhY3Rpdml0eVR5cGUYDiABKAUSLQoIY2F0ZWdvcnkYDyAB" + 
          "KA4yGy5oZHNlbnNlLlBCT3B1c0NhdGVnb3J5VHlwZRIOCgZob2xkZXIYECAB" + 
          "KAkSEwoLYWN0b3BlcmF0b3IYESABKAkSDgoGbGVhZGVyGBIgASgJEhQKDGVu" + 
          "cm9sbE51bWJlchgTIAEoBRISCgpsZWFkZXJEZXNjGBQgASgJEhAKCHBsYW5E" + 
          "ZXNjGBUgASgJEgwKBGNvc3QYFiABKAUSDwoHY29udGFjdBgXIAEoCRIQCghs" + 
          "b2NhdGlvbhgYIAEoCRITCgttb2RlbE51bWJlchgZIAEoBRITCgt0cmFmZmlj" + 
          "dHlwZRgaIAEoBRISCgptYXhOdW1iZXJzGBsgASgFEhEKCWxvbmdpdHVkZRgc" + 
          "IAEoARIQCghsYXRpdHVkZRgdIAEoARIVCg1zdGFydExvY2F0aW9uGB4gASgJ" + 
          "Eg0KBWhvdGVsGB8gASgJEg0KBXFyVXJsGCAgASgJEhkKDmNhblN1Ym1pdENv" + 
          "dW50GCggASgFOgExEh8KE21heEZsb3dlclBlckNvbnRlc3QYKSABKAU6AjIw" + 
          "EhsKEG1heEZsb3dlclBlck9wdXMYKiABKAU6ATMSFwoPanVkZ2VSYW5rV2Vp" + 
          "Z2h0GCsgASgFEhEKCWNhblN1Ym1pdBgsIAEoCBIPCgdjYW5Wb3RlGC0gASgI" + 
          "EhEKCXNob3dvbnRvcBguIAEoCBInCglwcml6ZUl0ZW0YMCADKAsyFC5oZHNl" + 
          "bnNlLlBCUHJpemVJdGVtEh4KD2NvbnRlc3RhbnRzT25seRgxIAEoCDoFZmFs" + 
          "c2USKAoLY29udGVzdGFudHMYMiADKAsyEy5oZHNlbnNlLlBCR2FtZVVzZXIS" + 
          "IwoGanVkZ2VzGDMgAygLMhMuaGRzZW5zZS5QQkdhbWVVc2VyEiYKCXJlcG9y" + 
          "dGVycxg0IAMoCzITLmhkc2Vuc2UuUEJHYW1lVXNlchIpCgt3aW5uZXJVc2Vy" + 
          "cxg1IAMoCzIULmhkc2Vuc2UuUEJVc2VyQXdhcmQSKAoKYXdhcmRVc2Vycxg2" + 
          "IAMoCzIULmhkc2Vuc2UuUEJVc2VyQXdhcmQSKQoJcmFua1R5cGVzGDcgAygL" + 
          "MhYuaGRzZW5zZS5QQkludEtleVZhbHVlEhMKC2NtZXRob2RkZXNjGDggASgJ" + 
          "EhEKCWNydWxlZGVzYxg5IAEoCRISCgpjYXdhcmRkZXNjGDogASgJEhAKCG1v" + 
          "cmVkZXNjGDsgASgJEh8KBWdyb3VwGDwgASgLMhAuaGRzZW5zZS5QQkdyb3Vw" + 
          "EhMKC2pvaW5lcnNUeXBlGD0gASgFEgwKBGRlc2MYPiABKAkSDgoGbm90aWNl" + 
          "GD8gASgJEhIKCmF3YXJkUnVsZXMYQCADKAUSEQoJYXdhcmROYW1lGEEgAygJ" + 
          "EiQKB2NyZWF0b3IYQiABKAsyEy5oZHNlbnNlLlBCR2FtZVVzZXISFgoKYXdh" + 
          "cmRDb3VudBhEIAEoBToCMTASFQoNY29udGVzdFN0YXR1cxhFIAEoBRIXCg9j" + 
          "b250ZXN0Q2F0ZWdvcnkYRiABKAkSGgoPbm9ybWFsVm90ZXJUaW1lGEcgASgF" + 
          "OgExEhsKEGFkdmFuY2VWb3RlclRpbWUYSCABKAU6ATUSGQoOanVkZ2VyVm90" + 
          "ZVRpbWUYSSABKAU6ATMSGwoQbm9ybWFsVm90ZXJXZWlnaBhKIAEoBToBMRIc" + 
          "ChFhZHZhbmNlVm90ZXJXZWlnaBhLIAEoBToBMhIbCg9qdWRnZXJWb3RlV2Vp" + 
          "Z2gYTCABKAU6AjEwEhwKEW1heE9wdXNQZXJDb250ZXN0GE0gASgFOgEyEhkK" + 
          "Dm1heFZvdGVQZXJPcHVzGE4gASgFOgEzEg4KBm9wdXNJZBhQIAEoCSI1Cg1Q" + 
          "QkNvbnRlc3RMaXN0EiQKCGNvbnRlc3RzGAEgAygLMhIuaGRzZW5zZS5QQkNv" + 
          "bnRlc3QqtwEKD1BCR3JvdXBVc2VyVHlwZRIUChBHUk9VUF9VU0VSX0FETUlO" + 
          "EAESFQoRR1JPVVBfVVNFUl9NRU1CRVIQAhIUChBHUk9VUF9VU0VSX0dVRVNU" + 
          "EAMSFgoSR1JPVVBfVVNFUl9DUkVBVE9SEAQSGAoUR1JPVVBfVVNFUl9SRVFV" + 
          "RVNURVIQBRIWChJHUk9VUF9VU0VSX0lOVklURUUQBhIXChNHUk9VUF9HVUVT" + 
          "VF9JTlZJVEVFEAdCNgonY29tLmhkc2Vuc2UubmV0d29yay5nYW1lLnByb3Rv" + 
          "Y29sLm1vZGVsQgtHcm91cFByb3Rvcw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBGroupUser__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBGroupUser__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupUser, global::hdsense.PBGroupUser.Builder>(internal__static_hdsense_PBGroupUser__Descriptor,
                new string[] { "User", "CustomeTitle", "Permission", "Type", });
        internal__static_hdsense_PBGroupTitle__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBGroupTitle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupTitle, global::hdsense.PBGroupTitle.Builder>(internal__static_hdsense_PBGroupTitle__Descriptor,
                new string[] { "TitleId", "Title", });
        internal__static_hdsense_PBGroupUsersByTitle__Descriptor = Descriptor.MessageTypes[2];
        internal__static_hdsense_PBGroupUsersByTitle__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupUsersByTitle, global::hdsense.PBGroupUsersByTitle.Builder>(internal__static_hdsense_PBGroupUsersByTitle__Descriptor,
                new string[] { "Title", "Users", });
        internal__static_hdsense_PBPrizeItem__Descriptor = Descriptor.MessageTypes[3];
        internal__static_hdsense_PBPrizeItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBPrizeItem, global::hdsense.PBPrizeItem.Builder>(internal__static_hdsense_PBPrizeItem__Descriptor,
                new string[] { "Type", "Num", "Coins", "Money", "Note", });
        internal__static_hdsense_PBGroup__Descriptor = Descriptor.MessageTypes[4];
        internal__static_hdsense_PBGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroup, global::hdsense.PBGroup.Builder>(internal__static_hdsense_PBGroup__Descriptor,
                new string[] { "GroupId", "Name", "Level", "Fame", "Balance", "CreateDate", "MemberFee", "Capacity", "Size", "GuestSize", "GuestCapacity", "TopicCount", "FanCount", "TitleCapacity", "Desc", "Signature", "Status", "StatusDesc", "GroupNumber", "QrUrl", "BgImage", "MedalImage", "Longitude", "Latitude", "Location", "OrganizeName", "InviteCode", "InviteBeginDate", "InviteEndDate", "Titles", "Creator", "Admins", "Users", "Guests", "Topic", });
        internal__static_hdsense_PBGroupUserRole__Descriptor = Descriptor.MessageTypes[5];
        internal__static_hdsense_PBGroupUserRole__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupUserRole, global::hdsense.PBGroupUserRole.Builder>(internal__static_hdsense_PBGroupUserRole__Descriptor,
                new string[] { "GroupId", "Role", "Permission", "GroupName", });
        internal__static_hdsense_PBGroupNotice__Descriptor = Descriptor.MessageTypes[6];
        internal__static_hdsense_PBGroupNotice__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGroupNotice, global::hdsense.PBGroupNotice.Builder>(internal__static_hdsense_PBGroupNotice__Descriptor,
                new string[] { "NoticeId", "Type", "Status", "GroupId", "GroupName", "Message", "CreateDate", "Amount", "Publisher", "Target", });
        internal__static_hdsense_PBContest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_hdsense_PBContest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBContest, global::hdsense.PBContest.Builder>(internal__static_hdsense_PBContest__Descriptor,
                new string[] { "ContestId", "StartDate", "EndDate", "Type", "Status", "ParticipantCount", "OpusCount", "Title", "ContestUrl", "StatementUrl", "VoteStartDate", "VoteEndDate", "IsAnounymous", "ActivityType", "Category", "Holder", "Actoperator", "Leader", "EnrollNumber", "LeaderDesc", "PlanDesc", "Cost", "Contact", "Location", "ModelNumber", "Traffictype", "MaxNumbers", "Longitude", "Latitude", "StartLocation", "Hotel", "QrUrl", "CanSubmitCount", "MaxFlowerPerContest", "MaxFlowerPerOpus", "JudgeRankWeight", "CanSubmit", "CanVote", "Showontop", "PrizeItem", "ContestantsOnly", "Contestants", "Judges", "Reporters", "WinnerUsers", "AwardUsers", "RankTypes", "Cmethoddesc", "Cruledesc", "Cawarddesc", "Moredesc", "Group", "JoinersType", "Desc", "Notice", "AwardRules", "AwardName", "Creator", "AwardCount", "ContestStatus", "ContestCategory", "NormalVoterTime", "AdvanceVoterTime", "JudgerVoteTime", "NormalVoterWeigh", "AdvanceVoterWeigh", "JudgerVoteWeigh", "MaxOpusPerContest", "MaxVotePerOpus", "OpusId", });
        internal__static_hdsense_PBContestList__Descriptor = Descriptor.MessageTypes[8];
        internal__static_hdsense_PBContestList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBContestList, global::hdsense.PBContestList.Builder>(internal__static_hdsense_PBContestList__Descriptor,
                new string[] { "Contests", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::hdsense.GameConstants.Descriptor, 
          global::hdsense.GameBasic.Descriptor, 
          global::hdsense.BBS.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PBGroupUserType {
    GROUP_USER_ADMIN = 1,
    GROUP_USER_MEMBER = 2,
    GROUP_USER_GUEST = 3,
    GROUP_USER_CREATOR = 4,
    GROUP_USER_REQUESTER = 5,
    GROUP_USER_INVITEE = 6,
    GROUP_GUEST_INVITEE = 7,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGroupUser : pb::GeneratedMessage<PBGroupUser, PBGroupUser.Builder> {
    private PBGroupUser() { }
    private static readonly PBGroupUser defaultInstance = new PBGroupUser().MakeReadOnly();
    private static readonly string[] _pBGroupUserFieldNames = new string[] { "customeTitle", "permission", "type", "user" };
    private static readonly uint[] _pBGroupUserFieldTags = new uint[] { 18, 24, 32, 10 };
    public static PBGroupUser DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGroupUser DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGroupUser ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupUser__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGroupUser, PBGroupUser.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupUser__FieldAccessorTable; }
    }
    
    public const int UserFieldNumber = 1;
    private bool hasUser;
    private global::hdsense.PBGameUser user_;
    public bool HasUser {
      get { return hasUser; }
    }
    public global::hdsense.PBGameUser User {
      get { return user_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int CustomeTitleFieldNumber = 2;
    private bool hasCustomeTitle;
    private string customeTitle_ = "";
    public bool HasCustomeTitle {
      get { return hasCustomeTitle; }
    }
    public string CustomeTitle {
      get { return customeTitle_; }
    }
    
    public const int PermissionFieldNumber = 3;
    private bool hasPermission;
    private int permission_;
    public bool HasPermission {
      get { return hasPermission; }
    }
    public int Permission {
      get { return permission_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private global::hdsense.PBGroupUserType type_ = global::hdsense.PBGroupUserType.GROUP_USER_ADMIN;
    public bool HasType {
      get { return hasType; }
    }
    public global::hdsense.PBGroupUserType Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUser) return false;
        if (!User.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGroupUserFieldNames;
      if (hasUser) {
        output.WriteMessage(1, field_names[3], User);
      }
      if (hasCustomeTitle) {
        output.WriteString(2, field_names[0], CustomeTitle);
      }
      if (hasPermission) {
        output.WriteInt32(3, field_names[1], Permission);
      }
      if (hasType) {
        output.WriteEnum(4, field_names[2], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, User);
        }
        if (hasCustomeTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(2, CustomeTitle);
        }
        if (hasPermission) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Permission);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGroupUser ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUser ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUser ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUser ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGroupUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGroupUser ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGroupUser MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGroupUser prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGroupUser, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGroupUser cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGroupUser result;
      
      private PBGroupUser PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGroupUser original = result;
          result = new PBGroupUser();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGroupUser MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGroupUser.Descriptor; }
      }
      
      public override PBGroupUser DefaultInstanceForType {
        get { return global::hdsense.PBGroupUser.DefaultInstance; }
      }
      
      public override PBGroupUser BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGroupUser) {
          return MergeFrom((PBGroupUser) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGroupUser other) {
        if (other == global::hdsense.PBGroupUser.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUser) {
          MergeUser(other.User);
        }
        if (other.HasCustomeTitle) {
          CustomeTitle = other.CustomeTitle;
        }
        if (other.HasPermission) {
          Permission = other.Permission;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGroupUserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGroupUserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasUser) {
                subBuilder.MergeFrom(User);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              User = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasCustomeTitle = input.ReadString(ref result.customeTitle_);
              break;
            }
            case 24: {
              result.hasPermission = input.ReadInt32(ref result.permission_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUser {
       get { return result.hasUser; }
      }
      public global::hdsense.PBGameUser User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder SetUser(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUser &&
            result.user_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.user_ = global::hdsense.PBGameUser.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
        } else {
          result.user_ = value;
        }
        result.hasUser = true;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = null;
        return this;
      }
      
      public bool HasCustomeTitle {
        get { return result.hasCustomeTitle; }
      }
      public string CustomeTitle {
        get { return result.CustomeTitle; }
        set { SetCustomeTitle(value); }
      }
      public Builder SetCustomeTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomeTitle = true;
        result.customeTitle_ = value;
        return this;
      }
      public Builder ClearCustomeTitle() {
        PrepareBuilder();
        result.hasCustomeTitle = false;
        result.customeTitle_ = "";
        return this;
      }
      
      public bool HasPermission {
        get { return result.hasPermission; }
      }
      public int Permission {
        get { return result.Permission; }
        set { SetPermission(value); }
      }
      public Builder SetPermission(int value) {
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = value;
        return this;
      }
      public Builder ClearPermission() {
        PrepareBuilder();
        result.hasPermission = false;
        result.permission_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::hdsense.PBGroupUserType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::hdsense.PBGroupUserType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::hdsense.PBGroupUserType.GROUP_USER_ADMIN;
        return this;
      }
    }
    static PBGroupUser() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGroupTitle : pb::GeneratedMessage<PBGroupTitle, PBGroupTitle.Builder> {
    private PBGroupTitle() { }
    private static readonly PBGroupTitle defaultInstance = new PBGroupTitle().MakeReadOnly();
    private static readonly string[] _pBGroupTitleFieldNames = new string[] { "title", "titleId" };
    private static readonly uint[] _pBGroupTitleFieldTags = new uint[] { 18, 8 };
    public static PBGroupTitle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGroupTitle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGroupTitle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupTitle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGroupTitle, PBGroupTitle.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupTitle__FieldAccessorTable; }
    }
    
    public const int TitleIdFieldNumber = 1;
    private bool hasTitleId;
    private int titleId_;
    public bool HasTitleId {
      get { return hasTitleId; }
    }
    public int TitleId {
      get { return titleId_; }
    }
    
    public const int TitleFieldNumber = 2;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTitleId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGroupTitleFieldNames;
      if (hasTitleId) {
        output.WriteInt32(1, field_names[1], TitleId);
      }
      if (hasTitle) {
        output.WriteString(2, field_names[0], Title);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTitleId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TitleId);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Title);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGroupTitle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupTitle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupTitle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupTitle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupTitle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupTitle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGroupTitle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGroupTitle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGroupTitle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupTitle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGroupTitle MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGroupTitle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGroupTitle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGroupTitle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGroupTitle result;
      
      private PBGroupTitle PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGroupTitle original = result;
          result = new PBGroupTitle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGroupTitle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGroupTitle.Descriptor; }
      }
      
      public override PBGroupTitle DefaultInstanceForType {
        get { return global::hdsense.PBGroupTitle.DefaultInstance; }
      }
      
      public override PBGroupTitle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGroupTitle) {
          return MergeFrom((PBGroupTitle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGroupTitle other) {
        if (other == global::hdsense.PBGroupTitle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTitleId) {
          TitleId = other.TitleId;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGroupTitleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGroupTitleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTitleId = input.ReadInt32(ref result.titleId_);
              break;
            }
            case 18: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTitleId {
        get { return result.hasTitleId; }
      }
      public int TitleId {
        get { return result.TitleId; }
        set { SetTitleId(value); }
      }
      public Builder SetTitleId(int value) {
        PrepareBuilder();
        result.hasTitleId = true;
        result.titleId_ = value;
        return this;
      }
      public Builder ClearTitleId() {
        PrepareBuilder();
        result.hasTitleId = false;
        result.titleId_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
    }
    static PBGroupTitle() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGroupUsersByTitle : pb::GeneratedMessage<PBGroupUsersByTitle, PBGroupUsersByTitle.Builder> {
    private PBGroupUsersByTitle() { }
    private static readonly PBGroupUsersByTitle defaultInstance = new PBGroupUsersByTitle().MakeReadOnly();
    private static readonly string[] _pBGroupUsersByTitleFieldNames = new string[] { "title", "users" };
    private static readonly uint[] _pBGroupUsersByTitleFieldTags = new uint[] { 10, 18 };
    public static PBGroupUsersByTitle DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGroupUsersByTitle DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGroupUsersByTitle ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupUsersByTitle__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGroupUsersByTitle, PBGroupUsersByTitle.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupUsersByTitle__FieldAccessorTable; }
    }
    
    public const int TitleFieldNumber = 1;
    private bool hasTitle;
    private global::hdsense.PBGroupTitle title_;
    public bool HasTitle {
      get { return hasTitle; }
    }
    public global::hdsense.PBGroupTitle Title {
      get { return title_ ?? global::hdsense.PBGroupTitle.DefaultInstance; }
    }
    
    public const int UsersFieldNumber = 2;
    private pbc::PopsicleList<global::hdsense.PBGameUser> users_ = new pbc::PopsicleList<global::hdsense.PBGameUser>();
    public scg::IList<global::hdsense.PBGameUser> UsersList {
      get { return users_; }
    }
    public int UsersCount {
      get { return users_.Count; }
    }
    public global::hdsense.PBGameUser GetUsers(int index) {
      return users_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (HasTitle) {
          if (!Title.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGameUser element in UsersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGroupUsersByTitleFieldNames;
      if (hasTitle) {
        output.WriteMessage(1, field_names[0], Title);
      }
      if (users_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], users_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Title);
        }
        foreach (global::hdsense.PBGameUser element in UsersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGroupUsersByTitle ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupUsersByTitle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGroupUsersByTitle MakeReadOnly() {
      users_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGroupUsersByTitle prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGroupUsersByTitle, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGroupUsersByTitle cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGroupUsersByTitle result;
      
      private PBGroupUsersByTitle PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGroupUsersByTitle original = result;
          result = new PBGroupUsersByTitle();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGroupUsersByTitle MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGroupUsersByTitle.Descriptor; }
      }
      
      public override PBGroupUsersByTitle DefaultInstanceForType {
        get { return global::hdsense.PBGroupUsersByTitle.DefaultInstance; }
      }
      
      public override PBGroupUsersByTitle BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGroupUsersByTitle) {
          return MergeFrom((PBGroupUsersByTitle) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGroupUsersByTitle other) {
        if (other == global::hdsense.PBGroupUsersByTitle.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTitle) {
          MergeTitle(other.Title);
        }
        if (other.users_.Count != 0) {
          result.users_.Add(other.users_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGroupUsersByTitleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGroupUsersByTitleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::hdsense.PBGroupTitle.Builder subBuilder = global::hdsense.PBGroupTitle.CreateBuilder();
              if (result.hasTitle) {
                subBuilder.MergeFrom(Title);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Title = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.users_, global::hdsense.PBGameUser.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTitle {
       get { return result.hasTitle; }
      }
      public global::hdsense.PBGroupTitle Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(global::hdsense.PBGroupTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder SetTitle(global::hdsense.PBGroupTitle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTitle(global::hdsense.PBGroupTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTitle &&
            result.title_ != global::hdsense.PBGroupTitle.DefaultInstance) {
            result.title_ = global::hdsense.PBGroupTitle.CreateBuilder(result.title_).MergeFrom(value).BuildPartial();
        } else {
          result.title_ = value;
        }
        result.hasTitle = true;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGameUser> UsersList {
        get { return PrepareBuilder().users_; }
      }
      public int UsersCount {
        get { return result.UsersCount; }
      }
      public global::hdsense.PBGameUser GetUsers(int index) {
        return result.GetUsers(index);
      }
      public Builder SetUsers(int index, global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_[index] = value;
        return this;
      }
      public Builder SetUsers(int index, global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUsers(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_.Add(value);
        return this;
      }
      public Builder AddUsers(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUsers(scg::IEnumerable<global::hdsense.PBGameUser> values) {
        PrepareBuilder();
        result.users_.Add(values);
        return this;
      }
      public Builder ClearUsers() {
        PrepareBuilder();
        result.users_.Clear();
        return this;
      }
    }
    static PBGroupUsersByTitle() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPrizeItem : pb::GeneratedMessage<PBPrizeItem, PBPrizeItem.Builder> {
    private PBPrizeItem() { }
    private static readonly PBPrizeItem defaultInstance = new PBPrizeItem().MakeReadOnly();
    private static readonly string[] _pBPrizeItemFieldNames = new string[] { "coins", "money", "note", "num", "type" };
    private static readonly uint[] _pBPrizeItemFieldTags = new uint[] { 24, 32, 42, 16, 8 };
    public static PBPrizeItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPrizeItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPrizeItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBPrizeItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPrizeItem, PBPrizeItem.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBPrizeItem__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int NumFieldNumber = 2;
    private bool hasNum;
    private int num_;
    public bool HasNum {
      get { return hasNum; }
    }
    public int Num {
      get { return num_; }
    }
    
    public const int CoinsFieldNumber = 3;
    private bool hasCoins;
    private int coins_;
    public bool HasCoins {
      get { return hasCoins; }
    }
    public int Coins {
      get { return coins_; }
    }
    
    public const int MoneyFieldNumber = 4;
    private bool hasMoney;
    private int money_;
    public bool HasMoney {
      get { return hasMoney; }
    }
    public int Money {
      get { return money_; }
    }
    
    public const int NoteFieldNumber = 5;
    private bool hasNote;
    private string note_ = "";
    public bool HasNote {
      get { return hasNote; }
    }
    public string Note {
      get { return note_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasNum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPrizeItemFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[4], Type);
      }
      if (hasNum) {
        output.WriteInt32(2, field_names[3], Num);
      }
      if (hasCoins) {
        output.WriteInt32(3, field_names[0], Coins);
      }
      if (hasMoney) {
        output.WriteInt32(4, field_names[1], Money);
      }
      if (hasNote) {
        output.WriteString(5, field_names[2], Note);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
        }
        if (hasCoins) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Coins);
        }
        if (hasMoney) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Money);
        }
        if (hasNote) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Note);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPrizeItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPrizeItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPrizeItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPrizeItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPrizeItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPrizeItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPrizeItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPrizeItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPrizeItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPrizeItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPrizeItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPrizeItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPrizeItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPrizeItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPrizeItem result;
      
      private PBPrizeItem PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPrizeItem original = result;
          result = new PBPrizeItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPrizeItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBPrizeItem.Descriptor; }
      }
      
      public override PBPrizeItem DefaultInstanceForType {
        get { return global::hdsense.PBPrizeItem.DefaultInstance; }
      }
      
      public override PBPrizeItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPrizeItem) {
          return MergeFrom((PBPrizeItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPrizeItem other) {
        if (other == global::hdsense.PBPrizeItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasNum) {
          Num = other.Num;
        }
        if (other.HasCoins) {
          Coins = other.Coins;
        }
        if (other.HasMoney) {
          Money = other.Money;
        }
        if (other.HasNote) {
          Note = other.Note;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPrizeItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPrizeItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasNum = input.ReadInt32(ref result.num_);
              break;
            }
            case 24: {
              result.hasCoins = input.ReadInt32(ref result.coins_);
              break;
            }
            case 32: {
              result.hasMoney = input.ReadInt32(ref result.money_);
              break;
            }
            case 42: {
              result.hasNote = input.ReadString(ref result.note_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasNum {
        get { return result.hasNum; }
      }
      public int Num {
        get { return result.Num; }
        set { SetNum(value); }
      }
      public Builder SetNum(int value) {
        PrepareBuilder();
        result.hasNum = true;
        result.num_ = value;
        return this;
      }
      public Builder ClearNum() {
        PrepareBuilder();
        result.hasNum = false;
        result.num_ = 0;
        return this;
      }
      
      public bool HasCoins {
        get { return result.hasCoins; }
      }
      public int Coins {
        get { return result.Coins; }
        set { SetCoins(value); }
      }
      public Builder SetCoins(int value) {
        PrepareBuilder();
        result.hasCoins = true;
        result.coins_ = value;
        return this;
      }
      public Builder ClearCoins() {
        PrepareBuilder();
        result.hasCoins = false;
        result.coins_ = 0;
        return this;
      }
      
      public bool HasMoney {
        get { return result.hasMoney; }
      }
      public int Money {
        get { return result.Money; }
        set { SetMoney(value); }
      }
      public Builder SetMoney(int value) {
        PrepareBuilder();
        result.hasMoney = true;
        result.money_ = value;
        return this;
      }
      public Builder ClearMoney() {
        PrepareBuilder();
        result.hasMoney = false;
        result.money_ = 0;
        return this;
      }
      
      public bool HasNote {
        get { return result.hasNote; }
      }
      public string Note {
        get { return result.Note; }
        set { SetNote(value); }
      }
      public Builder SetNote(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNote = true;
        result.note_ = value;
        return this;
      }
      public Builder ClearNote() {
        PrepareBuilder();
        result.hasNote = false;
        result.note_ = "";
        return this;
      }
    }
    static PBPrizeItem() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGroup : pb::GeneratedMessage<PBGroup, PBGroup.Builder> {
    private PBGroup() { }
    private static readonly PBGroup defaultInstance = new PBGroup().MakeReadOnly();
    private static readonly string[] _pBGroupFieldNames = new string[] { "admins", "balance", "bgImage", "capacity", "createDate", "creator", "desc", "fame", "fanCount", "groupId", "groupNumber", "guestCapacity", "guestSize", "guests", "inviteBeginDate", "inviteCode", "inviteEndDate", "latitude", "level", "location", "longitude", "medalImage", "memberFee", "name", "organizeName", "qrUrl", "signature", "size", "status", "statusDesc", "titleCapacity", "titles", "topic", "topicCount", "users" };
    private static readonly uint[] _pBGroupFieldTags = new uint[] { 330, 40, 170, 64, 48, 322, 122, 32, 104, 10, 154, 88, 80, 346, 224, 218, 232, 193, 24, 202, 185, 178, 56, 18, 210, 162, 130, 72, 136, 146, 112, 250, 482, 96, 338 };
    public static PBGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGroup, PBGroup.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroup__FieldAccessorTable; }
    }
    
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private string groupId_ = "";
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public string GroupId {
      get { return groupId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_ = 1;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int FameFieldNumber = 4;
    private bool hasFame;
    private int fame_;
    public bool HasFame {
      get { return hasFame; }
    }
    public int Fame {
      get { return fame_; }
    }
    
    public const int BalanceFieldNumber = 5;
    private bool hasBalance;
    private long balance_;
    public bool HasBalance {
      get { return hasBalance; }
    }
    public long Balance {
      get { return balance_; }
    }
    
    public const int CreateDateFieldNumber = 6;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int MemberFeeFieldNumber = 7;
    private bool hasMemberFee;
    private int memberFee_;
    public bool HasMemberFee {
      get { return hasMemberFee; }
    }
    public int MemberFee {
      get { return memberFee_; }
    }
    
    public const int CapacityFieldNumber = 8;
    private bool hasCapacity;
    private int capacity_;
    public bool HasCapacity {
      get { return hasCapacity; }
    }
    public int Capacity {
      get { return capacity_; }
    }
    
    public const int SizeFieldNumber = 9;
    private bool hasSize;
    private int size_;
    public bool HasSize {
      get { return hasSize; }
    }
    public int Size {
      get { return size_; }
    }
    
    public const int GuestSizeFieldNumber = 10;
    private bool hasGuestSize;
    private int guestSize_;
    public bool HasGuestSize {
      get { return hasGuestSize; }
    }
    public int GuestSize {
      get { return guestSize_; }
    }
    
    public const int GuestCapacityFieldNumber = 11;
    private bool hasGuestCapacity;
    private int guestCapacity_;
    public bool HasGuestCapacity {
      get { return hasGuestCapacity; }
    }
    public int GuestCapacity {
      get { return guestCapacity_; }
    }
    
    public const int TopicCountFieldNumber = 12;
    private bool hasTopicCount;
    private int topicCount_;
    public bool HasTopicCount {
      get { return hasTopicCount; }
    }
    public int TopicCount {
      get { return topicCount_; }
    }
    
    public const int FanCountFieldNumber = 13;
    private bool hasFanCount;
    private int fanCount_;
    public bool HasFanCount {
      get { return hasFanCount; }
    }
    public int FanCount {
      get { return fanCount_; }
    }
    
    public const int TitleCapacityFieldNumber = 14;
    private bool hasTitleCapacity;
    private int titleCapacity_;
    public bool HasTitleCapacity {
      get { return hasTitleCapacity; }
    }
    public int TitleCapacity {
      get { return titleCapacity_; }
    }
    
    public const int DescFieldNumber = 15;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int SignatureFieldNumber = 16;
    private bool hasSignature;
    private string signature_ = "";
    public bool HasSignature {
      get { return hasSignature; }
    }
    public string Signature {
      get { return signature_; }
    }
    
    public const int StatusFieldNumber = 17;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int StatusDescFieldNumber = 18;
    private bool hasStatusDesc;
    private string statusDesc_ = "";
    public bool HasStatusDesc {
      get { return hasStatusDesc; }
    }
    public string StatusDesc {
      get { return statusDesc_; }
    }
    
    public const int GroupNumberFieldNumber = 19;
    private bool hasGroupNumber;
    private string groupNumber_ = "";
    public bool HasGroupNumber {
      get { return hasGroupNumber; }
    }
    public string GroupNumber {
      get { return groupNumber_; }
    }
    
    public const int QrUrlFieldNumber = 20;
    private bool hasQrUrl;
    private string qrUrl_ = "";
    public bool HasQrUrl {
      get { return hasQrUrl; }
    }
    public string QrUrl {
      get { return qrUrl_; }
    }
    
    public const int BgImageFieldNumber = 21;
    private bool hasBgImage;
    private string bgImage_ = "";
    public bool HasBgImage {
      get { return hasBgImage; }
    }
    public string BgImage {
      get { return bgImage_; }
    }
    
    public const int MedalImageFieldNumber = 22;
    private bool hasMedalImage;
    private string medalImage_ = "";
    public bool HasMedalImage {
      get { return hasMedalImage; }
    }
    public string MedalImage {
      get { return medalImage_; }
    }
    
    public const int LongitudeFieldNumber = 23;
    private bool hasLongitude;
    private double longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public double Longitude {
      get { return longitude_; }
    }
    
    public const int LatitudeFieldNumber = 24;
    private bool hasLatitude;
    private double latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public double Latitude {
      get { return latitude_; }
    }
    
    public const int LocationFieldNumber = 25;
    private bool hasLocation;
    private string location_ = "";
    public bool HasLocation {
      get { return hasLocation; }
    }
    public string Location {
      get { return location_; }
    }
    
    public const int OrganizeNameFieldNumber = 26;
    private bool hasOrganizeName;
    private string organizeName_ = "";
    public bool HasOrganizeName {
      get { return hasOrganizeName; }
    }
    public string OrganizeName {
      get { return organizeName_; }
    }
    
    public const int InviteCodeFieldNumber = 27;
    private bool hasInviteCode;
    private string inviteCode_ = "";
    public bool HasInviteCode {
      get { return hasInviteCode; }
    }
    public string InviteCode {
      get { return inviteCode_; }
    }
    
    public const int InviteBeginDateFieldNumber = 28;
    private bool hasInviteBeginDate;
    private int inviteBeginDate_;
    public bool HasInviteBeginDate {
      get { return hasInviteBeginDate; }
    }
    public int InviteBeginDate {
      get { return inviteBeginDate_; }
    }
    
    public const int InviteEndDateFieldNumber = 29;
    private bool hasInviteEndDate;
    private int inviteEndDate_;
    public bool HasInviteEndDate {
      get { return hasInviteEndDate; }
    }
    public int InviteEndDate {
      get { return inviteEndDate_; }
    }
    
    public const int TitlesFieldNumber = 31;
    private pbc::PopsicleList<global::hdsense.PBGroupTitle> titles_ = new pbc::PopsicleList<global::hdsense.PBGroupTitle>();
    public scg::IList<global::hdsense.PBGroupTitle> TitlesList {
      get { return titles_; }
    }
    public int TitlesCount {
      get { return titles_.Count; }
    }
    public global::hdsense.PBGroupTitle GetTitles(int index) {
      return titles_[index];
    }
    
    public const int CreatorFieldNumber = 40;
    private bool hasCreator;
    private global::hdsense.PBGameUser creator_;
    public bool HasCreator {
      get { return hasCreator; }
    }
    public global::hdsense.PBGameUser Creator {
      get { return creator_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int AdminsFieldNumber = 41;
    private pbc::PopsicleList<global::hdsense.PBGameUser> admins_ = new pbc::PopsicleList<global::hdsense.PBGameUser>();
    public scg::IList<global::hdsense.PBGameUser> AdminsList {
      get { return admins_; }
    }
    public int AdminsCount {
      get { return admins_.Count; }
    }
    public global::hdsense.PBGameUser GetAdmins(int index) {
      return admins_[index];
    }
    
    public const int UsersFieldNumber = 42;
    private pbc::PopsicleList<global::hdsense.PBGroupUsersByTitle> users_ = new pbc::PopsicleList<global::hdsense.PBGroupUsersByTitle>();
    public scg::IList<global::hdsense.PBGroupUsersByTitle> UsersList {
      get { return users_; }
    }
    public int UsersCount {
      get { return users_.Count; }
    }
    public global::hdsense.PBGroupUsersByTitle GetUsers(int index) {
      return users_[index];
    }
    
    public const int GuestsFieldNumber = 43;
    private pbc::PopsicleList<global::hdsense.PBGameUser> guests_ = new pbc::PopsicleList<global::hdsense.PBGameUser>();
    public scg::IList<global::hdsense.PBGameUser> GuestsList {
      get { return guests_; }
    }
    public int GuestsCount {
      get { return guests_.Count; }
    }
    public global::hdsense.PBGameUser GetGuests(int index) {
      return guests_[index];
    }
    
    public const int TopicFieldNumber = 60;
    private bool hasTopic;
    private global::hdsense.PBBBSPost topic_;
    public bool HasTopic {
      get { return hasTopic; }
    }
    public global::hdsense.PBBBSPost Topic {
      get { return topic_ ?? global::hdsense.PBBBSPost.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGroupId) return false;
        if (!hasName) return false;
        foreach (global::hdsense.PBGroupTitle element in TitlesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasCreator) {
          if (!Creator.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGameUser element in AdminsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGroupUsersByTitle element in UsersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGameUser element in GuestsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasTopic) {
          if (!Topic.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGroupFieldNames;
      if (hasGroupId) {
        output.WriteString(1, field_names[9], GroupId);
      }
      if (hasName) {
        output.WriteString(2, field_names[23], Name);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[18], Level);
      }
      if (hasFame) {
        output.WriteInt32(4, field_names[7], Fame);
      }
      if (hasBalance) {
        output.WriteInt64(5, field_names[1], Balance);
      }
      if (hasCreateDate) {
        output.WriteInt32(6, field_names[4], CreateDate);
      }
      if (hasMemberFee) {
        output.WriteInt32(7, field_names[22], MemberFee);
      }
      if (hasCapacity) {
        output.WriteInt32(8, field_names[3], Capacity);
      }
      if (hasSize) {
        output.WriteInt32(9, field_names[27], Size);
      }
      if (hasGuestSize) {
        output.WriteInt32(10, field_names[12], GuestSize);
      }
      if (hasGuestCapacity) {
        output.WriteInt32(11, field_names[11], GuestCapacity);
      }
      if (hasTopicCount) {
        output.WriteInt32(12, field_names[33], TopicCount);
      }
      if (hasFanCount) {
        output.WriteInt32(13, field_names[8], FanCount);
      }
      if (hasTitleCapacity) {
        output.WriteInt32(14, field_names[30], TitleCapacity);
      }
      if (hasDesc) {
        output.WriteString(15, field_names[6], Desc);
      }
      if (hasSignature) {
        output.WriteString(16, field_names[26], Signature);
      }
      if (hasStatus) {
        output.WriteInt32(17, field_names[28], Status);
      }
      if (hasStatusDesc) {
        output.WriteString(18, field_names[29], StatusDesc);
      }
      if (hasGroupNumber) {
        output.WriteString(19, field_names[10], GroupNumber);
      }
      if (hasQrUrl) {
        output.WriteString(20, field_names[25], QrUrl);
      }
      if (hasBgImage) {
        output.WriteString(21, field_names[2], BgImage);
      }
      if (hasMedalImage) {
        output.WriteString(22, field_names[21], MedalImage);
      }
      if (hasLongitude) {
        output.WriteDouble(23, field_names[20], Longitude);
      }
      if (hasLatitude) {
        output.WriteDouble(24, field_names[17], Latitude);
      }
      if (hasLocation) {
        output.WriteString(25, field_names[19], Location);
      }
      if (hasOrganizeName) {
        output.WriteString(26, field_names[24], OrganizeName);
      }
      if (hasInviteCode) {
        output.WriteString(27, field_names[15], InviteCode);
      }
      if (hasInviteBeginDate) {
        output.WriteInt32(28, field_names[14], InviteBeginDate);
      }
      if (hasInviteEndDate) {
        output.WriteInt32(29, field_names[16], InviteEndDate);
      }
      if (titles_.Count > 0) {
        output.WriteMessageArray(31, field_names[31], titles_);
      }
      if (hasCreator) {
        output.WriteMessage(40, field_names[5], Creator);
      }
      if (admins_.Count > 0) {
        output.WriteMessageArray(41, field_names[0], admins_);
      }
      if (users_.Count > 0) {
        output.WriteMessageArray(42, field_names[34], users_);
      }
      if (guests_.Count > 0) {
        output.WriteMessageArray(43, field_names[13], guests_);
      }
      if (hasTopic) {
        output.WriteMessage(60, field_names[32], Topic);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GroupId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        if (hasFame) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Fame);
        }
        if (hasBalance) {
          size += pb::CodedOutputStream.ComputeInt64Size(5, Balance);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, CreateDate);
        }
        if (hasMemberFee) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, MemberFee);
        }
        if (hasCapacity) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Capacity);
        }
        if (hasSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Size);
        }
        if (hasGuestSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, GuestSize);
        }
        if (hasGuestCapacity) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, GuestCapacity);
        }
        if (hasTopicCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, TopicCount);
        }
        if (hasFanCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, FanCount);
        }
        if (hasTitleCapacity) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, TitleCapacity);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(15, Desc);
        }
        if (hasSignature) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Signature);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, Status);
        }
        if (hasStatusDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(18, StatusDesc);
        }
        if (hasGroupNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(19, GroupNumber);
        }
        if (hasQrUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(20, QrUrl);
        }
        if (hasBgImage) {
          size += pb::CodedOutputStream.ComputeStringSize(21, BgImage);
        }
        if (hasMedalImage) {
          size += pb::CodedOutputStream.ComputeStringSize(22, MedalImage);
        }
        if (hasLongitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, Longitude);
        }
        if (hasLatitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, Latitude);
        }
        if (hasLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(25, Location);
        }
        if (hasOrganizeName) {
          size += pb::CodedOutputStream.ComputeStringSize(26, OrganizeName);
        }
        if (hasInviteCode) {
          size += pb::CodedOutputStream.ComputeStringSize(27, InviteCode);
        }
        if (hasInviteBeginDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(28, InviteBeginDate);
        }
        if (hasInviteEndDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(29, InviteEndDate);
        }
        foreach (global::hdsense.PBGroupTitle element in TitlesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(31, element);
        }
        if (hasCreator) {
          size += pb::CodedOutputStream.ComputeMessageSize(40, Creator);
        }
        foreach (global::hdsense.PBGameUser element in AdminsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(41, element);
        }
        foreach (global::hdsense.PBGroupUsersByTitle element in UsersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(42, element);
        }
        foreach (global::hdsense.PBGameUser element in GuestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(43, element);
        }
        if (hasTopic) {
          size += pb::CodedOutputStream.ComputeMessageSize(60, Topic);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGroup MakeReadOnly() {
      titles_.MakeReadOnly();
      admins_.MakeReadOnly();
      users_.MakeReadOnly();
      guests_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGroup result;
      
      private PBGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGroup original = result;
          result = new PBGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGroup.Descriptor; }
      }
      
      public override PBGroup DefaultInstanceForType {
        get { return global::hdsense.PBGroup.DefaultInstance; }
      }
      
      public override PBGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGroup) {
          return MergeFrom((PBGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGroup other) {
        if (other == global::hdsense.PBGroup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasFame) {
          Fame = other.Fame;
        }
        if (other.HasBalance) {
          Balance = other.Balance;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasMemberFee) {
          MemberFee = other.MemberFee;
        }
        if (other.HasCapacity) {
          Capacity = other.Capacity;
        }
        if (other.HasSize) {
          Size = other.Size;
        }
        if (other.HasGuestSize) {
          GuestSize = other.GuestSize;
        }
        if (other.HasGuestCapacity) {
          GuestCapacity = other.GuestCapacity;
        }
        if (other.HasTopicCount) {
          TopicCount = other.TopicCount;
        }
        if (other.HasFanCount) {
          FanCount = other.FanCount;
        }
        if (other.HasTitleCapacity) {
          TitleCapacity = other.TitleCapacity;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasSignature) {
          Signature = other.Signature;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasStatusDesc) {
          StatusDesc = other.StatusDesc;
        }
        if (other.HasGroupNumber) {
          GroupNumber = other.GroupNumber;
        }
        if (other.HasQrUrl) {
          QrUrl = other.QrUrl;
        }
        if (other.HasBgImage) {
          BgImage = other.BgImage;
        }
        if (other.HasMedalImage) {
          MedalImage = other.MedalImage;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasLocation) {
          Location = other.Location;
        }
        if (other.HasOrganizeName) {
          OrganizeName = other.OrganizeName;
        }
        if (other.HasInviteCode) {
          InviteCode = other.InviteCode;
        }
        if (other.HasInviteBeginDate) {
          InviteBeginDate = other.InviteBeginDate;
        }
        if (other.HasInviteEndDate) {
          InviteEndDate = other.InviteEndDate;
        }
        if (other.titles_.Count != 0) {
          result.titles_.Add(other.titles_);
        }
        if (other.HasCreator) {
          MergeCreator(other.Creator);
        }
        if (other.admins_.Count != 0) {
          result.admins_.Add(other.admins_);
        }
        if (other.users_.Count != 0) {
          result.users_.Add(other.users_);
        }
        if (other.guests_.Count != 0) {
          result.guests_.Add(other.guests_);
        }
        if (other.HasTopic) {
          MergeTopic(other.Topic);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGroupId = input.ReadString(ref result.groupId_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 32: {
              result.hasFame = input.ReadInt32(ref result.fame_);
              break;
            }
            case 40: {
              result.hasBalance = input.ReadInt64(ref result.balance_);
              break;
            }
            case 48: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 56: {
              result.hasMemberFee = input.ReadInt32(ref result.memberFee_);
              break;
            }
            case 64: {
              result.hasCapacity = input.ReadInt32(ref result.capacity_);
              break;
            }
            case 72: {
              result.hasSize = input.ReadInt32(ref result.size_);
              break;
            }
            case 80: {
              result.hasGuestSize = input.ReadInt32(ref result.guestSize_);
              break;
            }
            case 88: {
              result.hasGuestCapacity = input.ReadInt32(ref result.guestCapacity_);
              break;
            }
            case 96: {
              result.hasTopicCount = input.ReadInt32(ref result.topicCount_);
              break;
            }
            case 104: {
              result.hasFanCount = input.ReadInt32(ref result.fanCount_);
              break;
            }
            case 112: {
              result.hasTitleCapacity = input.ReadInt32(ref result.titleCapacity_);
              break;
            }
            case 122: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 130: {
              result.hasSignature = input.ReadString(ref result.signature_);
              break;
            }
            case 136: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 146: {
              result.hasStatusDesc = input.ReadString(ref result.statusDesc_);
              break;
            }
            case 154: {
              result.hasGroupNumber = input.ReadString(ref result.groupNumber_);
              break;
            }
            case 162: {
              result.hasQrUrl = input.ReadString(ref result.qrUrl_);
              break;
            }
            case 170: {
              result.hasBgImage = input.ReadString(ref result.bgImage_);
              break;
            }
            case 178: {
              result.hasMedalImage = input.ReadString(ref result.medalImage_);
              break;
            }
            case 185: {
              result.hasLongitude = input.ReadDouble(ref result.longitude_);
              break;
            }
            case 193: {
              result.hasLatitude = input.ReadDouble(ref result.latitude_);
              break;
            }
            case 202: {
              result.hasLocation = input.ReadString(ref result.location_);
              break;
            }
            case 210: {
              result.hasOrganizeName = input.ReadString(ref result.organizeName_);
              break;
            }
            case 218: {
              result.hasInviteCode = input.ReadString(ref result.inviteCode_);
              break;
            }
            case 224: {
              result.hasInviteBeginDate = input.ReadInt32(ref result.inviteBeginDate_);
              break;
            }
            case 232: {
              result.hasInviteEndDate = input.ReadInt32(ref result.inviteEndDate_);
              break;
            }
            case 250: {
              input.ReadMessageArray(tag, field_name, result.titles_, global::hdsense.PBGroupTitle.DefaultInstance, extensionRegistry);
              break;
            }
            case 322: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasCreator) {
                subBuilder.MergeFrom(Creator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Creator = subBuilder.BuildPartial();
              break;
            }
            case 330: {
              input.ReadMessageArray(tag, field_name, result.admins_, global::hdsense.PBGameUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 338: {
              input.ReadMessageArray(tag, field_name, result.users_, global::hdsense.PBGroupUsersByTitle.DefaultInstance, extensionRegistry);
              break;
            }
            case 346: {
              input.ReadMessageArray(tag, field_name, result.guests_, global::hdsense.PBGameUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 482: {
              global::hdsense.PBBBSPost.Builder subBuilder = global::hdsense.PBBBSPost.CreateBuilder();
              if (result.hasTopic) {
                subBuilder.MergeFrom(Topic);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Topic = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public string GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 1;
        return this;
      }
      
      public bool HasFame {
        get { return result.hasFame; }
      }
      public int Fame {
        get { return result.Fame; }
        set { SetFame(value); }
      }
      public Builder SetFame(int value) {
        PrepareBuilder();
        result.hasFame = true;
        result.fame_ = value;
        return this;
      }
      public Builder ClearFame() {
        PrepareBuilder();
        result.hasFame = false;
        result.fame_ = 0;
        return this;
      }
      
      public bool HasBalance {
        get { return result.hasBalance; }
      }
      public long Balance {
        get { return result.Balance; }
        set { SetBalance(value); }
      }
      public Builder SetBalance(long value) {
        PrepareBuilder();
        result.hasBalance = true;
        result.balance_ = value;
        return this;
      }
      public Builder ClearBalance() {
        PrepareBuilder();
        result.hasBalance = false;
        result.balance_ = 0L;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasMemberFee {
        get { return result.hasMemberFee; }
      }
      public int MemberFee {
        get { return result.MemberFee; }
        set { SetMemberFee(value); }
      }
      public Builder SetMemberFee(int value) {
        PrepareBuilder();
        result.hasMemberFee = true;
        result.memberFee_ = value;
        return this;
      }
      public Builder ClearMemberFee() {
        PrepareBuilder();
        result.hasMemberFee = false;
        result.memberFee_ = 0;
        return this;
      }
      
      public bool HasCapacity {
        get { return result.hasCapacity; }
      }
      public int Capacity {
        get { return result.Capacity; }
        set { SetCapacity(value); }
      }
      public Builder SetCapacity(int value) {
        PrepareBuilder();
        result.hasCapacity = true;
        result.capacity_ = value;
        return this;
      }
      public Builder ClearCapacity() {
        PrepareBuilder();
        result.hasCapacity = false;
        result.capacity_ = 0;
        return this;
      }
      
      public bool HasSize {
        get { return result.hasSize; }
      }
      public int Size {
        get { return result.Size; }
        set { SetSize(value); }
      }
      public Builder SetSize(int value) {
        PrepareBuilder();
        result.hasSize = true;
        result.size_ = value;
        return this;
      }
      public Builder ClearSize() {
        PrepareBuilder();
        result.hasSize = false;
        result.size_ = 0;
        return this;
      }
      
      public bool HasGuestSize {
        get { return result.hasGuestSize; }
      }
      public int GuestSize {
        get { return result.GuestSize; }
        set { SetGuestSize(value); }
      }
      public Builder SetGuestSize(int value) {
        PrepareBuilder();
        result.hasGuestSize = true;
        result.guestSize_ = value;
        return this;
      }
      public Builder ClearGuestSize() {
        PrepareBuilder();
        result.hasGuestSize = false;
        result.guestSize_ = 0;
        return this;
      }
      
      public bool HasGuestCapacity {
        get { return result.hasGuestCapacity; }
      }
      public int GuestCapacity {
        get { return result.GuestCapacity; }
        set { SetGuestCapacity(value); }
      }
      public Builder SetGuestCapacity(int value) {
        PrepareBuilder();
        result.hasGuestCapacity = true;
        result.guestCapacity_ = value;
        return this;
      }
      public Builder ClearGuestCapacity() {
        PrepareBuilder();
        result.hasGuestCapacity = false;
        result.guestCapacity_ = 0;
        return this;
      }
      
      public bool HasTopicCount {
        get { return result.hasTopicCount; }
      }
      public int TopicCount {
        get { return result.TopicCount; }
        set { SetTopicCount(value); }
      }
      public Builder SetTopicCount(int value) {
        PrepareBuilder();
        result.hasTopicCount = true;
        result.topicCount_ = value;
        return this;
      }
      public Builder ClearTopicCount() {
        PrepareBuilder();
        result.hasTopicCount = false;
        result.topicCount_ = 0;
        return this;
      }
      
      public bool HasFanCount {
        get { return result.hasFanCount; }
      }
      public int FanCount {
        get { return result.FanCount; }
        set { SetFanCount(value); }
      }
      public Builder SetFanCount(int value) {
        PrepareBuilder();
        result.hasFanCount = true;
        result.fanCount_ = value;
        return this;
      }
      public Builder ClearFanCount() {
        PrepareBuilder();
        result.hasFanCount = false;
        result.fanCount_ = 0;
        return this;
      }
      
      public bool HasTitleCapacity {
        get { return result.hasTitleCapacity; }
      }
      public int TitleCapacity {
        get { return result.TitleCapacity; }
        set { SetTitleCapacity(value); }
      }
      public Builder SetTitleCapacity(int value) {
        PrepareBuilder();
        result.hasTitleCapacity = true;
        result.titleCapacity_ = value;
        return this;
      }
      public Builder ClearTitleCapacity() {
        PrepareBuilder();
        result.hasTitleCapacity = false;
        result.titleCapacity_ = 0;
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasSignature {
        get { return result.hasSignature; }
      }
      public string Signature {
        get { return result.Signature; }
        set { SetSignature(value); }
      }
      public Builder SetSignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignature = true;
        result.signature_ = value;
        return this;
      }
      public Builder ClearSignature() {
        PrepareBuilder();
        result.hasSignature = false;
        result.signature_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasStatusDesc {
        get { return result.hasStatusDesc; }
      }
      public string StatusDesc {
        get { return result.StatusDesc; }
        set { SetStatusDesc(value); }
      }
      public Builder SetStatusDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatusDesc = true;
        result.statusDesc_ = value;
        return this;
      }
      public Builder ClearStatusDesc() {
        PrepareBuilder();
        result.hasStatusDesc = false;
        result.statusDesc_ = "";
        return this;
      }
      
      public bool HasGroupNumber {
        get { return result.hasGroupNumber; }
      }
      public string GroupNumber {
        get { return result.GroupNumber; }
        set { SetGroupNumber(value); }
      }
      public Builder SetGroupNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupNumber = true;
        result.groupNumber_ = value;
        return this;
      }
      public Builder ClearGroupNumber() {
        PrepareBuilder();
        result.hasGroupNumber = false;
        result.groupNumber_ = "";
        return this;
      }
      
      public bool HasQrUrl {
        get { return result.hasQrUrl; }
      }
      public string QrUrl {
        get { return result.QrUrl; }
        set { SetQrUrl(value); }
      }
      public Builder SetQrUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQrUrl = true;
        result.qrUrl_ = value;
        return this;
      }
      public Builder ClearQrUrl() {
        PrepareBuilder();
        result.hasQrUrl = false;
        result.qrUrl_ = "";
        return this;
      }
      
      public bool HasBgImage {
        get { return result.hasBgImage; }
      }
      public string BgImage {
        get { return result.BgImage; }
        set { SetBgImage(value); }
      }
      public Builder SetBgImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBgImage = true;
        result.bgImage_ = value;
        return this;
      }
      public Builder ClearBgImage() {
        PrepareBuilder();
        result.hasBgImage = false;
        result.bgImage_ = "";
        return this;
      }
      
      public bool HasMedalImage {
        get { return result.hasMedalImage; }
      }
      public string MedalImage {
        get { return result.MedalImage; }
        set { SetMedalImage(value); }
      }
      public Builder SetMedalImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMedalImage = true;
        result.medalImage_ = value;
        return this;
      }
      public Builder ClearMedalImage() {
        PrepareBuilder();
        result.hasMedalImage = false;
        result.medalImage_ = "";
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public double Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(double value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public double Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(double value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      public bool HasLocation {
        get { return result.hasLocation; }
      }
      public string Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = "";
        return this;
      }
      
      public bool HasOrganizeName {
        get { return result.hasOrganizeName; }
      }
      public string OrganizeName {
        get { return result.OrganizeName; }
        set { SetOrganizeName(value); }
      }
      public Builder SetOrganizeName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrganizeName = true;
        result.organizeName_ = value;
        return this;
      }
      public Builder ClearOrganizeName() {
        PrepareBuilder();
        result.hasOrganizeName = false;
        result.organizeName_ = "";
        return this;
      }
      
      public bool HasInviteCode {
        get { return result.hasInviteCode; }
      }
      public string InviteCode {
        get { return result.InviteCode; }
        set { SetInviteCode(value); }
      }
      public Builder SetInviteCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInviteCode = true;
        result.inviteCode_ = value;
        return this;
      }
      public Builder ClearInviteCode() {
        PrepareBuilder();
        result.hasInviteCode = false;
        result.inviteCode_ = "";
        return this;
      }
      
      public bool HasInviteBeginDate {
        get { return result.hasInviteBeginDate; }
      }
      public int InviteBeginDate {
        get { return result.InviteBeginDate; }
        set { SetInviteBeginDate(value); }
      }
      public Builder SetInviteBeginDate(int value) {
        PrepareBuilder();
        result.hasInviteBeginDate = true;
        result.inviteBeginDate_ = value;
        return this;
      }
      public Builder ClearInviteBeginDate() {
        PrepareBuilder();
        result.hasInviteBeginDate = false;
        result.inviteBeginDate_ = 0;
        return this;
      }
      
      public bool HasInviteEndDate {
        get { return result.hasInviteEndDate; }
      }
      public int InviteEndDate {
        get { return result.InviteEndDate; }
        set { SetInviteEndDate(value); }
      }
      public Builder SetInviteEndDate(int value) {
        PrepareBuilder();
        result.hasInviteEndDate = true;
        result.inviteEndDate_ = value;
        return this;
      }
      public Builder ClearInviteEndDate() {
        PrepareBuilder();
        result.hasInviteEndDate = false;
        result.inviteEndDate_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGroupTitle> TitlesList {
        get { return PrepareBuilder().titles_; }
      }
      public int TitlesCount {
        get { return result.TitlesCount; }
      }
      public global::hdsense.PBGroupTitle GetTitles(int index) {
        return result.GetTitles(index);
      }
      public Builder SetTitles(int index, global::hdsense.PBGroupTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.titles_[index] = value;
        return this;
      }
      public Builder SetTitles(int index, global::hdsense.PBGroupTitle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.titles_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTitles(global::hdsense.PBGroupTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.titles_.Add(value);
        return this;
      }
      public Builder AddTitles(global::hdsense.PBGroupTitle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.titles_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTitles(scg::IEnumerable<global::hdsense.PBGroupTitle> values) {
        PrepareBuilder();
        result.titles_.Add(values);
        return this;
      }
      public Builder ClearTitles() {
        PrepareBuilder();
        result.titles_.Clear();
        return this;
      }
      
      public bool HasCreator {
       get { return result.hasCreator; }
      }
      public global::hdsense.PBGameUser Creator {
        get { return result.Creator; }
        set { SetCreator(value); }
      }
      public Builder SetCreator(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = value;
        return this;
      }
      public Builder SetCreator(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreator(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreator &&
            result.creator_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.creator_ = global::hdsense.PBGameUser.CreateBuilder(result.creator_).MergeFrom(value).BuildPartial();
        } else {
          result.creator_ = value;
        }
        result.hasCreator = true;
        return this;
      }
      public Builder ClearCreator() {
        PrepareBuilder();
        result.hasCreator = false;
        result.creator_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGameUser> AdminsList {
        get { return PrepareBuilder().admins_; }
      }
      public int AdminsCount {
        get { return result.AdminsCount; }
      }
      public global::hdsense.PBGameUser GetAdmins(int index) {
        return result.GetAdmins(index);
      }
      public Builder SetAdmins(int index, global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.admins_[index] = value;
        return this;
      }
      public Builder SetAdmins(int index, global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.admins_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAdmins(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.admins_.Add(value);
        return this;
      }
      public Builder AddAdmins(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.admins_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAdmins(scg::IEnumerable<global::hdsense.PBGameUser> values) {
        PrepareBuilder();
        result.admins_.Add(values);
        return this;
      }
      public Builder ClearAdmins() {
        PrepareBuilder();
        result.admins_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGroupUsersByTitle> UsersList {
        get { return PrepareBuilder().users_; }
      }
      public int UsersCount {
        get { return result.UsersCount; }
      }
      public global::hdsense.PBGroupUsersByTitle GetUsers(int index) {
        return result.GetUsers(index);
      }
      public Builder SetUsers(int index, global::hdsense.PBGroupUsersByTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_[index] = value;
        return this;
      }
      public Builder SetUsers(int index, global::hdsense.PBGroupUsersByTitle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUsers(global::hdsense.PBGroupUsersByTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.users_.Add(value);
        return this;
      }
      public Builder AddUsers(global::hdsense.PBGroupUsersByTitle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.users_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUsers(scg::IEnumerable<global::hdsense.PBGroupUsersByTitle> values) {
        PrepareBuilder();
        result.users_.Add(values);
        return this;
      }
      public Builder ClearUsers() {
        PrepareBuilder();
        result.users_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGameUser> GuestsList {
        get { return PrepareBuilder().guests_; }
      }
      public int GuestsCount {
        get { return result.GuestsCount; }
      }
      public global::hdsense.PBGameUser GetGuests(int index) {
        return result.GetGuests(index);
      }
      public Builder SetGuests(int index, global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guests_[index] = value;
        return this;
      }
      public Builder SetGuests(int index, global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGuests(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guests_.Add(value);
        return this;
      }
      public Builder AddGuests(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGuests(scg::IEnumerable<global::hdsense.PBGameUser> values) {
        PrepareBuilder();
        result.guests_.Add(values);
        return this;
      }
      public Builder ClearGuests() {
        PrepareBuilder();
        result.guests_.Clear();
        return this;
      }
      
      public bool HasTopic {
       get { return result.hasTopic; }
      }
      public global::hdsense.PBBBSPost Topic {
        get { return result.Topic; }
        set { SetTopic(value); }
      }
      public Builder SetTopic(global::hdsense.PBBBSPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTopic = true;
        result.topic_ = value;
        return this;
      }
      public Builder SetTopic(global::hdsense.PBBBSPost.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTopic = true;
        result.topic_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTopic(global::hdsense.PBBBSPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTopic &&
            result.topic_ != global::hdsense.PBBBSPost.DefaultInstance) {
            result.topic_ = global::hdsense.PBBBSPost.CreateBuilder(result.topic_).MergeFrom(value).BuildPartial();
        } else {
          result.topic_ = value;
        }
        result.hasTopic = true;
        return this;
      }
      public Builder ClearTopic() {
        PrepareBuilder();
        result.hasTopic = false;
        result.topic_ = null;
        return this;
      }
    }
    static PBGroup() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGroupUserRole : pb::GeneratedMessage<PBGroupUserRole, PBGroupUserRole.Builder> {
    private PBGroupUserRole() { }
    private static readonly PBGroupUserRole defaultInstance = new PBGroupUserRole().MakeReadOnly();
    private static readonly string[] _pBGroupUserRoleFieldNames = new string[] { "groupId", "groupName", "permission", "role" };
    private static readonly uint[] _pBGroupUserRoleFieldTags = new uint[] { 10, 34, 24, 16 };
    public static PBGroupUserRole DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGroupUserRole DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGroupUserRole ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupUserRole__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGroupUserRole, PBGroupUserRole.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupUserRole__FieldAccessorTable; }
    }
    
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private string groupId_ = "";
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public string GroupId {
      get { return groupId_; }
    }
    
    public const int RoleFieldNumber = 2;
    private bool hasRole;
    private int role_;
    public bool HasRole {
      get { return hasRole; }
    }
    public int Role {
      get { return role_; }
    }
    
    public const int PermissionFieldNumber = 3;
    private bool hasPermission;
    private int permission_;
    public bool HasPermission {
      get { return hasPermission; }
    }
    public int Permission {
      get { return permission_; }
    }
    
    public const int GroupNameFieldNumber = 4;
    private bool hasGroupName;
    private string groupName_ = "";
    public bool HasGroupName {
      get { return hasGroupName; }
    }
    public string GroupName {
      get { return groupName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGroupId) return false;
        if (!hasRole) return false;
        if (!hasPermission) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGroupUserRoleFieldNames;
      if (hasGroupId) {
        output.WriteString(1, field_names[0], GroupId);
      }
      if (hasRole) {
        output.WriteInt32(2, field_names[3], Role);
      }
      if (hasPermission) {
        output.WriteInt32(3, field_names[2], Permission);
      }
      if (hasGroupName) {
        output.WriteString(4, field_names[1], GroupName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GroupId);
        }
        if (hasRole) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Role);
        }
        if (hasPermission) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Permission);
        }
        if (hasGroupName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, GroupName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGroupUserRole ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupUserRole ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUserRole ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupUserRole ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUserRole ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupUserRole ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGroupUserRole ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGroupUserRole ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGroupUserRole ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupUserRole ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGroupUserRole MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGroupUserRole prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGroupUserRole, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGroupUserRole cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGroupUserRole result;
      
      private PBGroupUserRole PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGroupUserRole original = result;
          result = new PBGroupUserRole();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGroupUserRole MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGroupUserRole.Descriptor; }
      }
      
      public override PBGroupUserRole DefaultInstanceForType {
        get { return global::hdsense.PBGroupUserRole.DefaultInstance; }
      }
      
      public override PBGroupUserRole BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGroupUserRole) {
          return MergeFrom((PBGroupUserRole) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGroupUserRole other) {
        if (other == global::hdsense.PBGroupUserRole.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasRole) {
          Role = other.Role;
        }
        if (other.HasPermission) {
          Permission = other.Permission;
        }
        if (other.HasGroupName) {
          GroupName = other.GroupName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGroupUserRoleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGroupUserRoleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGroupId = input.ReadString(ref result.groupId_);
              break;
            }
            case 16: {
              result.hasRole = input.ReadInt32(ref result.role_);
              break;
            }
            case 24: {
              result.hasPermission = input.ReadInt32(ref result.permission_);
              break;
            }
            case 34: {
              result.hasGroupName = input.ReadString(ref result.groupName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public string GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = "";
        return this;
      }
      
      public bool HasRole {
        get { return result.hasRole; }
      }
      public int Role {
        get { return result.Role; }
        set { SetRole(value); }
      }
      public Builder SetRole(int value) {
        PrepareBuilder();
        result.hasRole = true;
        result.role_ = value;
        return this;
      }
      public Builder ClearRole() {
        PrepareBuilder();
        result.hasRole = false;
        result.role_ = 0;
        return this;
      }
      
      public bool HasPermission {
        get { return result.hasPermission; }
      }
      public int Permission {
        get { return result.Permission; }
        set { SetPermission(value); }
      }
      public Builder SetPermission(int value) {
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = value;
        return this;
      }
      public Builder ClearPermission() {
        PrepareBuilder();
        result.hasPermission = false;
        result.permission_ = 0;
        return this;
      }
      
      public bool HasGroupName {
        get { return result.hasGroupName; }
      }
      public string GroupName {
        get { return result.GroupName; }
        set { SetGroupName(value); }
      }
      public Builder SetGroupName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupName = true;
        result.groupName_ = value;
        return this;
      }
      public Builder ClearGroupName() {
        PrepareBuilder();
        result.hasGroupName = false;
        result.groupName_ = "";
        return this;
      }
    }
    static PBGroupUserRole() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGroupNotice : pb::GeneratedMessage<PBGroupNotice, PBGroupNotice.Builder> {
    private PBGroupNotice() { }
    private static readonly PBGroupNotice defaultInstance = new PBGroupNotice().MakeReadOnly();
    private static readonly string[] _pBGroupNoticeFieldNames = new string[] { "amount", "createDate", "groupId", "groupName", "message", "noticeId", "publisher", "status", "target", "type" };
    private static readonly uint[] _pBGroupNoticeFieldTags = new uint[] { 64, 56, 34, 42, 50, 10, 82, 24, 90, 16 };
    public static PBGroupNotice DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGroupNotice DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGroupNotice ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupNotice__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGroupNotice, PBGroupNotice.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBGroupNotice__FieldAccessorTable; }
    }
    
    public const int NoticeIdFieldNumber = 1;
    private bool hasNoticeId;
    private string noticeId_ = "";
    public bool HasNoticeId {
      get { return hasNoticeId; }
    }
    public string NoticeId {
      get { return noticeId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int StatusFieldNumber = 3;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int GroupIdFieldNumber = 4;
    private bool hasGroupId;
    private string groupId_ = "";
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public string GroupId {
      get { return groupId_; }
    }
    
    public const int GroupNameFieldNumber = 5;
    private bool hasGroupName;
    private string groupName_ = "";
    public bool HasGroupName {
      get { return hasGroupName; }
    }
    public string GroupName {
      get { return groupName_; }
    }
    
    public const int MessageFieldNumber = 6;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public const int CreateDateFieldNumber = 7;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int AmountFieldNumber = 8;
    private bool hasAmount;
    private int amount_;
    public bool HasAmount {
      get { return hasAmount; }
    }
    public int Amount {
      get { return amount_; }
    }
    
    public const int PublisherFieldNumber = 10;
    private bool hasPublisher;
    private global::hdsense.PBGameUser publisher_;
    public bool HasPublisher {
      get { return hasPublisher; }
    }
    public global::hdsense.PBGameUser Publisher {
      get { return publisher_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int TargetFieldNumber = 11;
    private bool hasTarget;
    private global::hdsense.PBGameUser target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public global::hdsense.PBGameUser Target {
      get { return target_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNoticeId) return false;
        if (HasPublisher) {
          if (!Publisher.IsInitialized) return false;
        }
        if (HasTarget) {
          if (!Target.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGroupNoticeFieldNames;
      if (hasNoticeId) {
        output.WriteString(1, field_names[5], NoticeId);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[9], Type);
      }
      if (hasStatus) {
        output.WriteInt32(3, field_names[7], Status);
      }
      if (hasGroupId) {
        output.WriteString(4, field_names[2], GroupId);
      }
      if (hasGroupName) {
        output.WriteString(5, field_names[3], GroupName);
      }
      if (hasMessage) {
        output.WriteString(6, field_names[4], Message);
      }
      if (hasCreateDate) {
        output.WriteInt32(7, field_names[1], CreateDate);
      }
      if (hasAmount) {
        output.WriteInt32(8, field_names[0], Amount);
      }
      if (hasPublisher) {
        output.WriteMessage(10, field_names[6], Publisher);
      }
      if (hasTarget) {
        output.WriteMessage(11, field_names[8], Target);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNoticeId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, NoticeId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
        }
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, GroupId);
        }
        if (hasGroupName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, GroupName);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Message);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, CreateDate);
        }
        if (hasAmount) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Amount);
        }
        if (hasPublisher) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, Publisher);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, Target);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGroupNotice ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupNotice ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGroupNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGroupNotice ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGroupNotice ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGroupNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGroupNotice ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGroupNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGroupNotice MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGroupNotice prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGroupNotice, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGroupNotice cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGroupNotice result;
      
      private PBGroupNotice PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGroupNotice original = result;
          result = new PBGroupNotice();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGroupNotice MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGroupNotice.Descriptor; }
      }
      
      public override PBGroupNotice DefaultInstanceForType {
        get { return global::hdsense.PBGroupNotice.DefaultInstance; }
      }
      
      public override PBGroupNotice BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGroupNotice) {
          return MergeFrom((PBGroupNotice) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGroupNotice other) {
        if (other == global::hdsense.PBGroupNotice.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNoticeId) {
          NoticeId = other.NoticeId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasGroupName) {
          GroupName = other.GroupName;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasAmount) {
          Amount = other.Amount;
        }
        if (other.HasPublisher) {
          MergePublisher(other.Publisher);
        }
        if (other.HasTarget) {
          MergeTarget(other.Target);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGroupNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGroupNoticeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasNoticeId = input.ReadString(ref result.noticeId_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 34: {
              result.hasGroupId = input.ReadString(ref result.groupId_);
              break;
            }
            case 42: {
              result.hasGroupName = input.ReadString(ref result.groupName_);
              break;
            }
            case 50: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
            case 56: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 64: {
              result.hasAmount = input.ReadInt32(ref result.amount_);
              break;
            }
            case 82: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasPublisher) {
                subBuilder.MergeFrom(Publisher);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Publisher = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasTarget) {
                subBuilder.MergeFrom(Target);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Target = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNoticeId {
        get { return result.hasNoticeId; }
      }
      public string NoticeId {
        get { return result.NoticeId; }
        set { SetNoticeId(value); }
      }
      public Builder SetNoticeId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNoticeId = true;
        result.noticeId_ = value;
        return this;
      }
      public Builder ClearNoticeId() {
        PrepareBuilder();
        result.hasNoticeId = false;
        result.noticeId_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public string GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = "";
        return this;
      }
      
      public bool HasGroupName {
        get { return result.hasGroupName; }
      }
      public string GroupName {
        get { return result.GroupName; }
        set { SetGroupName(value); }
      }
      public Builder SetGroupName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupName = true;
        result.groupName_ = value;
        return this;
      }
      public Builder ClearGroupName() {
        PrepareBuilder();
        result.hasGroupName = false;
        result.groupName_ = "";
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasAmount {
        get { return result.hasAmount; }
      }
      public int Amount {
        get { return result.Amount; }
        set { SetAmount(value); }
      }
      public Builder SetAmount(int value) {
        PrepareBuilder();
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder ClearAmount() {
        PrepareBuilder();
        result.hasAmount = false;
        result.amount_ = 0;
        return this;
      }
      
      public bool HasPublisher {
       get { return result.hasPublisher; }
      }
      public global::hdsense.PBGameUser Publisher {
        get { return result.Publisher; }
        set { SetPublisher(value); }
      }
      public Builder SetPublisher(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPublisher = true;
        result.publisher_ = value;
        return this;
      }
      public Builder SetPublisher(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPublisher = true;
        result.publisher_ = builderForValue.Build();
        return this;
      }
      public Builder MergePublisher(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPublisher &&
            result.publisher_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.publisher_ = global::hdsense.PBGameUser.CreateBuilder(result.publisher_).MergeFrom(value).BuildPartial();
        } else {
          result.publisher_ = value;
        }
        result.hasPublisher = true;
        return this;
      }
      public Builder ClearPublisher() {
        PrepareBuilder();
        result.hasPublisher = false;
        result.publisher_ = null;
        return this;
      }
      
      public bool HasTarget {
       get { return result.hasTarget; }
      }
      public global::hdsense.PBGameUser Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder SetTarget(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTarget(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTarget &&
            result.target_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.target_ = global::hdsense.PBGameUser.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
        } else {
          result.target_ = value;
        }
        result.hasTarget = true;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = null;
        return this;
      }
    }
    static PBGroupNotice() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBContest : pb::GeneratedMessage<PBContest, PBContest.Builder> {
    private PBContest() { }
    private static readonly PBContest defaultInstance = new PBContest().MakeReadOnly();
    private static readonly string[] _pBContestFieldNames = new string[] { "activityType", "actoperator", "advanceVoterTime", "advanceVoterWeigh", "awardCount", "awardName", "awardRules", "awardUsers", "canSubmit", "canSubmitCount", "canVote", "category", "cawarddesc", "cmethoddesc", "contact", "contestCategory", "contestId", "contestStatus", "contestUrl", "contestants", "contestantsOnly", "cost", "creator", "cruledesc", "desc", "endDate", "enrollNumber", "group", "holder", "hotel", "isAnounymous", "joinersType", "judgeRankWeight", "judgerVoteTime", "judgerVoteWeigh", "judges", "latitude", "leader", "leaderDesc", "location", "longitude", "maxFlowerPerContest", "maxFlowerPerOpus", "maxNumbers", "maxOpusPerContest", "maxVotePerOpus", "modelNumber", "moredesc", "normalVoterTime", "normalVoterWeigh", "notice", "opusCount", "opusId", "participantCount", "planDesc", "prizeItem", "qrUrl", "rankTypes", "reporters", "showontop", "startDate", "startLocation", "statementUrl", "status", "title", "traffictype", "type", "voteEndDate", "voteStartDate", "winnerUsers" };
    private static readonly uint[] _pBContestFieldTags = new uint[] { 112, 138, 576, 600, 544, 522, 512, 434, 352, 320, 360, 120, 466, 450, 186, 562, 10, 552, 74, 402, 392, 176, 530, 458, 498, 24, 152, 482, 130, 250, 104, 488, 344, 584, 608, 410, 233, 146, 162, 194, 225, 328, 336, 216, 616, 624, 200, 474, 568, 592, 506, 56, 642, 48, 170, 386, 258, 442, 418, 368, 16, 242, 82, 40, 66, 208, 32, 96, 88, 426 };
    public static PBContest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBContest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBContest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBContest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBContest, PBContest.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBContest__FieldAccessorTable; }
    }
    
    public const int ContestIdFieldNumber = 1;
    private bool hasContestId;
    private string contestId_ = "";
    public bool HasContestId {
      get { return hasContestId; }
    }
    public string ContestId {
      get { return contestId_; }
    }
    
    public const int StartDateFieldNumber = 2;
    private bool hasStartDate;
    private int startDate_;
    public bool HasStartDate {
      get { return hasStartDate; }
    }
    public int StartDate {
      get { return startDate_; }
    }
    
    public const int EndDateFieldNumber = 3;
    private bool hasEndDate;
    private int endDate_;
    public bool HasEndDate {
      get { return hasEndDate; }
    }
    public int EndDate {
      get { return endDate_; }
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int StatusFieldNumber = 5;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int ParticipantCountFieldNumber = 6;
    private bool hasParticipantCount;
    private int participantCount_;
    public bool HasParticipantCount {
      get { return hasParticipantCount; }
    }
    public int ParticipantCount {
      get { return participantCount_; }
    }
    
    public const int OpusCountFieldNumber = 7;
    private bool hasOpusCount;
    private int opusCount_;
    public bool HasOpusCount {
      get { return hasOpusCount; }
    }
    public int OpusCount {
      get { return opusCount_; }
    }
    
    public const int TitleFieldNumber = 8;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int ContestUrlFieldNumber = 9;
    private bool hasContestUrl;
    private string contestUrl_ = "";
    public bool HasContestUrl {
      get { return hasContestUrl; }
    }
    public string ContestUrl {
      get { return contestUrl_; }
    }
    
    public const int StatementUrlFieldNumber = 10;
    private bool hasStatementUrl;
    private string statementUrl_ = "";
    public bool HasStatementUrl {
      get { return hasStatementUrl; }
    }
    public string StatementUrl {
      get { return statementUrl_; }
    }
    
    public const int VoteStartDateFieldNumber = 11;
    private bool hasVoteStartDate;
    private int voteStartDate_;
    public bool HasVoteStartDate {
      get { return hasVoteStartDate; }
    }
    public int VoteStartDate {
      get { return voteStartDate_; }
    }
    
    public const int VoteEndDateFieldNumber = 12;
    private bool hasVoteEndDate;
    private int voteEndDate_;
    public bool HasVoteEndDate {
      get { return hasVoteEndDate; }
    }
    public int VoteEndDate {
      get { return voteEndDate_; }
    }
    
    public const int IsAnounymousFieldNumber = 13;
    private bool hasIsAnounymous;
    private bool isAnounymous_;
    public bool HasIsAnounymous {
      get { return hasIsAnounymous; }
    }
    public bool IsAnounymous {
      get { return isAnounymous_; }
    }
    
    public const int ActivityTypeFieldNumber = 14;
    private bool hasActivityType;
    private int activityType_;
    public bool HasActivityType {
      get { return hasActivityType; }
    }
    public int ActivityType {
      get { return activityType_; }
    }
    
    public const int CategoryFieldNumber = 15;
    private bool hasCategory;
    private global::hdsense.PBOpusCategoryType category_ = global::hdsense.PBOpusCategoryType.DRAW_CATEGORY;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public global::hdsense.PBOpusCategoryType Category {
      get { return category_; }
    }
    
    public const int HolderFieldNumber = 16;
    private bool hasHolder;
    private string holder_ = "";
    public bool HasHolder {
      get { return hasHolder; }
    }
    public string Holder {
      get { return holder_; }
    }
    
    public const int ActoperatorFieldNumber = 17;
    private bool hasActoperator;
    private string actoperator_ = "";
    public bool HasActoperator {
      get { return hasActoperator; }
    }
    public string Actoperator {
      get { return actoperator_; }
    }
    
    public const int LeaderFieldNumber = 18;
    private bool hasLeader;
    private string leader_ = "";
    public bool HasLeader {
      get { return hasLeader; }
    }
    public string Leader {
      get { return leader_; }
    }
    
    public const int EnrollNumberFieldNumber = 19;
    private bool hasEnrollNumber;
    private int enrollNumber_;
    public bool HasEnrollNumber {
      get { return hasEnrollNumber; }
    }
    public int EnrollNumber {
      get { return enrollNumber_; }
    }
    
    public const int LeaderDescFieldNumber = 20;
    private bool hasLeaderDesc;
    private string leaderDesc_ = "";
    public bool HasLeaderDesc {
      get { return hasLeaderDesc; }
    }
    public string LeaderDesc {
      get { return leaderDesc_; }
    }
    
    public const int PlanDescFieldNumber = 21;
    private bool hasPlanDesc;
    private string planDesc_ = "";
    public bool HasPlanDesc {
      get { return hasPlanDesc; }
    }
    public string PlanDesc {
      get { return planDesc_; }
    }
    
    public const int CostFieldNumber = 22;
    private bool hasCost;
    private int cost_;
    public bool HasCost {
      get { return hasCost; }
    }
    public int Cost {
      get { return cost_; }
    }
    
    public const int ContactFieldNumber = 23;
    private bool hasContact;
    private string contact_ = "";
    public bool HasContact {
      get { return hasContact; }
    }
    public string Contact {
      get { return contact_; }
    }
    
    public const int LocationFieldNumber = 24;
    private bool hasLocation;
    private string location_ = "";
    public bool HasLocation {
      get { return hasLocation; }
    }
    public string Location {
      get { return location_; }
    }
    
    public const int ModelNumberFieldNumber = 25;
    private bool hasModelNumber;
    private int modelNumber_;
    public bool HasModelNumber {
      get { return hasModelNumber; }
    }
    public int ModelNumber {
      get { return modelNumber_; }
    }
    
    public const int TraffictypeFieldNumber = 26;
    private bool hasTraffictype;
    private int traffictype_;
    public bool HasTraffictype {
      get { return hasTraffictype; }
    }
    public int Traffictype {
      get { return traffictype_; }
    }
    
    public const int MaxNumbersFieldNumber = 27;
    private bool hasMaxNumbers;
    private int maxNumbers_;
    public bool HasMaxNumbers {
      get { return hasMaxNumbers; }
    }
    public int MaxNumbers {
      get { return maxNumbers_; }
    }
    
    public const int LongitudeFieldNumber = 28;
    private bool hasLongitude;
    private double longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public double Longitude {
      get { return longitude_; }
    }
    
    public const int LatitudeFieldNumber = 29;
    private bool hasLatitude;
    private double latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public double Latitude {
      get { return latitude_; }
    }
    
    public const int StartLocationFieldNumber = 30;
    private bool hasStartLocation;
    private string startLocation_ = "";
    public bool HasStartLocation {
      get { return hasStartLocation; }
    }
    public string StartLocation {
      get { return startLocation_; }
    }
    
    public const int HotelFieldNumber = 31;
    private bool hasHotel;
    private string hotel_ = "";
    public bool HasHotel {
      get { return hasHotel; }
    }
    public string Hotel {
      get { return hotel_; }
    }
    
    public const int QrUrlFieldNumber = 32;
    private bool hasQrUrl;
    private string qrUrl_ = "";
    public bool HasQrUrl {
      get { return hasQrUrl; }
    }
    public string QrUrl {
      get { return qrUrl_; }
    }
    
    public const int CanSubmitCountFieldNumber = 40;
    private bool hasCanSubmitCount;
    private int canSubmitCount_ = 1;
    public bool HasCanSubmitCount {
      get { return hasCanSubmitCount; }
    }
    public int CanSubmitCount {
      get { return canSubmitCount_; }
    }
    
    public const int MaxFlowerPerContestFieldNumber = 41;
    private bool hasMaxFlowerPerContest;
    private int maxFlowerPerContest_ = 20;
    public bool HasMaxFlowerPerContest {
      get { return hasMaxFlowerPerContest; }
    }
    public int MaxFlowerPerContest {
      get { return maxFlowerPerContest_; }
    }
    
    public const int MaxFlowerPerOpusFieldNumber = 42;
    private bool hasMaxFlowerPerOpus;
    private int maxFlowerPerOpus_ = 3;
    public bool HasMaxFlowerPerOpus {
      get { return hasMaxFlowerPerOpus; }
    }
    public int MaxFlowerPerOpus {
      get { return maxFlowerPerOpus_; }
    }
    
    public const int JudgeRankWeightFieldNumber = 43;
    private bool hasJudgeRankWeight;
    private int judgeRankWeight_;
    public bool HasJudgeRankWeight {
      get { return hasJudgeRankWeight; }
    }
    public int JudgeRankWeight {
      get { return judgeRankWeight_; }
    }
    
    public const int CanSubmitFieldNumber = 44;
    private bool hasCanSubmit;
    private bool canSubmit_;
    public bool HasCanSubmit {
      get { return hasCanSubmit; }
    }
    public bool CanSubmit {
      get { return canSubmit_; }
    }
    
    public const int CanVoteFieldNumber = 45;
    private bool hasCanVote;
    private bool canVote_;
    public bool HasCanVote {
      get { return hasCanVote; }
    }
    public bool CanVote {
      get { return canVote_; }
    }
    
    public const int ShowontopFieldNumber = 46;
    private bool hasShowontop;
    private bool showontop_;
    public bool HasShowontop {
      get { return hasShowontop; }
    }
    public bool Showontop {
      get { return showontop_; }
    }
    
    public const int PrizeItemFieldNumber = 48;
    private pbc::PopsicleList<global::hdsense.PBPrizeItem> prizeItem_ = new pbc::PopsicleList<global::hdsense.PBPrizeItem>();
    public scg::IList<global::hdsense.PBPrizeItem> PrizeItemList {
      get { return prizeItem_; }
    }
    public int PrizeItemCount {
      get { return prizeItem_.Count; }
    }
    public global::hdsense.PBPrizeItem GetPrizeItem(int index) {
      return prizeItem_[index];
    }
    
    public const int ContestantsOnlyFieldNumber = 49;
    private bool hasContestantsOnly;
    private bool contestantsOnly_;
    public bool HasContestantsOnly {
      get { return hasContestantsOnly; }
    }
    public bool ContestantsOnly {
      get { return contestantsOnly_; }
    }
    
    public const int ContestantsFieldNumber = 50;
    private pbc::PopsicleList<global::hdsense.PBGameUser> contestants_ = new pbc::PopsicleList<global::hdsense.PBGameUser>();
    public scg::IList<global::hdsense.PBGameUser> ContestantsList {
      get { return contestants_; }
    }
    public int ContestantsCount {
      get { return contestants_.Count; }
    }
    public global::hdsense.PBGameUser GetContestants(int index) {
      return contestants_[index];
    }
    
    public const int JudgesFieldNumber = 51;
    private pbc::PopsicleList<global::hdsense.PBGameUser> judges_ = new pbc::PopsicleList<global::hdsense.PBGameUser>();
    public scg::IList<global::hdsense.PBGameUser> JudgesList {
      get { return judges_; }
    }
    public int JudgesCount {
      get { return judges_.Count; }
    }
    public global::hdsense.PBGameUser GetJudges(int index) {
      return judges_[index];
    }
    
    public const int ReportersFieldNumber = 52;
    private pbc::PopsicleList<global::hdsense.PBGameUser> reporters_ = new pbc::PopsicleList<global::hdsense.PBGameUser>();
    public scg::IList<global::hdsense.PBGameUser> ReportersList {
      get { return reporters_; }
    }
    public int ReportersCount {
      get { return reporters_.Count; }
    }
    public global::hdsense.PBGameUser GetReporters(int index) {
      return reporters_[index];
    }
    
    public const int WinnerUsersFieldNumber = 53;
    private pbc::PopsicleList<global::hdsense.PBUserAward> winnerUsers_ = new pbc::PopsicleList<global::hdsense.PBUserAward>();
    public scg::IList<global::hdsense.PBUserAward> WinnerUsersList {
      get { return winnerUsers_; }
    }
    public int WinnerUsersCount {
      get { return winnerUsers_.Count; }
    }
    public global::hdsense.PBUserAward GetWinnerUsers(int index) {
      return winnerUsers_[index];
    }
    
    public const int AwardUsersFieldNumber = 54;
    private pbc::PopsicleList<global::hdsense.PBUserAward> awardUsers_ = new pbc::PopsicleList<global::hdsense.PBUserAward>();
    public scg::IList<global::hdsense.PBUserAward> AwardUsersList {
      get { return awardUsers_; }
    }
    public int AwardUsersCount {
      get { return awardUsers_.Count; }
    }
    public global::hdsense.PBUserAward GetAwardUsers(int index) {
      return awardUsers_[index];
    }
    
    public const int RankTypesFieldNumber = 55;
    private pbc::PopsicleList<global::hdsense.PBIntKeyValue> rankTypes_ = new pbc::PopsicleList<global::hdsense.PBIntKeyValue>();
    public scg::IList<global::hdsense.PBIntKeyValue> RankTypesList {
      get { return rankTypes_; }
    }
    public int RankTypesCount {
      get { return rankTypes_.Count; }
    }
    public global::hdsense.PBIntKeyValue GetRankTypes(int index) {
      return rankTypes_[index];
    }
    
    public const int CmethoddescFieldNumber = 56;
    private bool hasCmethoddesc;
    private string cmethoddesc_ = "";
    public bool HasCmethoddesc {
      get { return hasCmethoddesc; }
    }
    public string Cmethoddesc {
      get { return cmethoddesc_; }
    }
    
    public const int CruledescFieldNumber = 57;
    private bool hasCruledesc;
    private string cruledesc_ = "";
    public bool HasCruledesc {
      get { return hasCruledesc; }
    }
    public string Cruledesc {
      get { return cruledesc_; }
    }
    
    public const int CawarddescFieldNumber = 58;
    private bool hasCawarddesc;
    private string cawarddesc_ = "";
    public bool HasCawarddesc {
      get { return hasCawarddesc; }
    }
    public string Cawarddesc {
      get { return cawarddesc_; }
    }
    
    public const int MoredescFieldNumber = 59;
    private bool hasMoredesc;
    private string moredesc_ = "";
    public bool HasMoredesc {
      get { return hasMoredesc; }
    }
    public string Moredesc {
      get { return moredesc_; }
    }
    
    public const int GroupFieldNumber = 60;
    private bool hasGroup;
    private global::hdsense.PBGroup group_;
    public bool HasGroup {
      get { return hasGroup; }
    }
    public global::hdsense.PBGroup Group {
      get { return group_ ?? global::hdsense.PBGroup.DefaultInstance; }
    }
    
    public const int JoinersTypeFieldNumber = 61;
    private bool hasJoinersType;
    private int joinersType_;
    public bool HasJoinersType {
      get { return hasJoinersType; }
    }
    public int JoinersType {
      get { return joinersType_; }
    }
    
    public const int DescFieldNumber = 62;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int NoticeFieldNumber = 63;
    private bool hasNotice;
    private string notice_ = "";
    public bool HasNotice {
      get { return hasNotice; }
    }
    public string Notice {
      get { return notice_; }
    }
    
    public const int AwardRulesFieldNumber = 64;
    private pbc::PopsicleList<int> awardRules_ = new pbc::PopsicleList<int>();
    public scg::IList<int> AwardRulesList {
      get { return pbc::Lists.AsReadOnly(awardRules_); }
    }
    public int AwardRulesCount {
      get { return awardRules_.Count; }
    }
    public int GetAwardRules(int index) {
      return awardRules_[index];
    }
    
    public const int AwardNameFieldNumber = 65;
    private pbc::PopsicleList<string> awardName_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AwardNameList {
      get { return pbc::Lists.AsReadOnly(awardName_); }
    }
    public int AwardNameCount {
      get { return awardName_.Count; }
    }
    public string GetAwardName(int index) {
      return awardName_[index];
    }
    
    public const int CreatorFieldNumber = 66;
    private bool hasCreator;
    private global::hdsense.PBGameUser creator_;
    public bool HasCreator {
      get { return hasCreator; }
    }
    public global::hdsense.PBGameUser Creator {
      get { return creator_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int AwardCountFieldNumber = 68;
    private bool hasAwardCount;
    private int awardCount_ = 10;
    public bool HasAwardCount {
      get { return hasAwardCount; }
    }
    public int AwardCount {
      get { return awardCount_; }
    }
    
    public const int ContestStatusFieldNumber = 69;
    private bool hasContestStatus;
    private int contestStatus_;
    public bool HasContestStatus {
      get { return hasContestStatus; }
    }
    public int ContestStatus {
      get { return contestStatus_; }
    }
    
    public const int ContestCategoryFieldNumber = 70;
    private bool hasContestCategory;
    private string contestCategory_ = "";
    public bool HasContestCategory {
      get { return hasContestCategory; }
    }
    public string ContestCategory {
      get { return contestCategory_; }
    }
    
    public const int NormalVoterTimeFieldNumber = 71;
    private bool hasNormalVoterTime;
    private int normalVoterTime_ = 1;
    public bool HasNormalVoterTime {
      get { return hasNormalVoterTime; }
    }
    public int NormalVoterTime {
      get { return normalVoterTime_; }
    }
    
    public const int AdvanceVoterTimeFieldNumber = 72;
    private bool hasAdvanceVoterTime;
    private int advanceVoterTime_ = 5;
    public bool HasAdvanceVoterTime {
      get { return hasAdvanceVoterTime; }
    }
    public int AdvanceVoterTime {
      get { return advanceVoterTime_; }
    }
    
    public const int JudgerVoteTimeFieldNumber = 73;
    private bool hasJudgerVoteTime;
    private int judgerVoteTime_ = 3;
    public bool HasJudgerVoteTime {
      get { return hasJudgerVoteTime; }
    }
    public int JudgerVoteTime {
      get { return judgerVoteTime_; }
    }
    
    public const int NormalVoterWeighFieldNumber = 74;
    private bool hasNormalVoterWeigh;
    private int normalVoterWeigh_ = 1;
    public bool HasNormalVoterWeigh {
      get { return hasNormalVoterWeigh; }
    }
    public int NormalVoterWeigh {
      get { return normalVoterWeigh_; }
    }
    
    public const int AdvanceVoterWeighFieldNumber = 75;
    private bool hasAdvanceVoterWeigh;
    private int advanceVoterWeigh_ = 2;
    public bool HasAdvanceVoterWeigh {
      get { return hasAdvanceVoterWeigh; }
    }
    public int AdvanceVoterWeigh {
      get { return advanceVoterWeigh_; }
    }
    
    public const int JudgerVoteWeighFieldNumber = 76;
    private bool hasJudgerVoteWeigh;
    private int judgerVoteWeigh_ = 10;
    public bool HasJudgerVoteWeigh {
      get { return hasJudgerVoteWeigh; }
    }
    public int JudgerVoteWeigh {
      get { return judgerVoteWeigh_; }
    }
    
    public const int MaxOpusPerContestFieldNumber = 77;
    private bool hasMaxOpusPerContest;
    private int maxOpusPerContest_ = 2;
    public bool HasMaxOpusPerContest {
      get { return hasMaxOpusPerContest; }
    }
    public int MaxOpusPerContest {
      get { return maxOpusPerContest_; }
    }
    
    public const int MaxVotePerOpusFieldNumber = 78;
    private bool hasMaxVotePerOpus;
    private int maxVotePerOpus_ = 3;
    public bool HasMaxVotePerOpus {
      get { return hasMaxVotePerOpus; }
    }
    public int MaxVotePerOpus {
      get { return maxVotePerOpus_; }
    }
    
    public const int OpusIdFieldNumber = 80;
    private bool hasOpusId;
    private string opusId_ = "";
    public bool HasOpusId {
      get { return hasOpusId; }
    }
    public string OpusId {
      get { return opusId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContestId) return false;
        foreach (global::hdsense.PBPrizeItem element in PrizeItemList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGameUser element in ContestantsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGameUser element in JudgesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGameUser element in ReportersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBUserAward element in WinnerUsersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBUserAward element in AwardUsersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBIntKeyValue element in RankTypesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasGroup) {
          if (!Group.IsInitialized) return false;
        }
        if (HasCreator) {
          if (!Creator.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBContestFieldNames;
      if (hasContestId) {
        output.WriteString(1, field_names[16], ContestId);
      }
      if (hasStartDate) {
        output.WriteInt32(2, field_names[60], StartDate);
      }
      if (hasEndDate) {
        output.WriteInt32(3, field_names[25], EndDate);
      }
      if (hasType) {
        output.WriteInt32(4, field_names[66], Type);
      }
      if (hasStatus) {
        output.WriteInt32(5, field_names[63], Status);
      }
      if (hasParticipantCount) {
        output.WriteInt32(6, field_names[53], ParticipantCount);
      }
      if (hasOpusCount) {
        output.WriteInt32(7, field_names[51], OpusCount);
      }
      if (hasTitle) {
        output.WriteString(8, field_names[64], Title);
      }
      if (hasContestUrl) {
        output.WriteString(9, field_names[18], ContestUrl);
      }
      if (hasStatementUrl) {
        output.WriteString(10, field_names[62], StatementUrl);
      }
      if (hasVoteStartDate) {
        output.WriteInt32(11, field_names[68], VoteStartDate);
      }
      if (hasVoteEndDate) {
        output.WriteInt32(12, field_names[67], VoteEndDate);
      }
      if (hasIsAnounymous) {
        output.WriteBool(13, field_names[30], IsAnounymous);
      }
      if (hasActivityType) {
        output.WriteInt32(14, field_names[0], ActivityType);
      }
      if (hasCategory) {
        output.WriteEnum(15, field_names[11], (int) Category, Category);
      }
      if (hasHolder) {
        output.WriteString(16, field_names[28], Holder);
      }
      if (hasActoperator) {
        output.WriteString(17, field_names[1], Actoperator);
      }
      if (hasLeader) {
        output.WriteString(18, field_names[37], Leader);
      }
      if (hasEnrollNumber) {
        output.WriteInt32(19, field_names[26], EnrollNumber);
      }
      if (hasLeaderDesc) {
        output.WriteString(20, field_names[38], LeaderDesc);
      }
      if (hasPlanDesc) {
        output.WriteString(21, field_names[54], PlanDesc);
      }
      if (hasCost) {
        output.WriteInt32(22, field_names[21], Cost);
      }
      if (hasContact) {
        output.WriteString(23, field_names[14], Contact);
      }
      if (hasLocation) {
        output.WriteString(24, field_names[39], Location);
      }
      if (hasModelNumber) {
        output.WriteInt32(25, field_names[46], ModelNumber);
      }
      if (hasTraffictype) {
        output.WriteInt32(26, field_names[65], Traffictype);
      }
      if (hasMaxNumbers) {
        output.WriteInt32(27, field_names[43], MaxNumbers);
      }
      if (hasLongitude) {
        output.WriteDouble(28, field_names[40], Longitude);
      }
      if (hasLatitude) {
        output.WriteDouble(29, field_names[36], Latitude);
      }
      if (hasStartLocation) {
        output.WriteString(30, field_names[61], StartLocation);
      }
      if (hasHotel) {
        output.WriteString(31, field_names[29], Hotel);
      }
      if (hasQrUrl) {
        output.WriteString(32, field_names[56], QrUrl);
      }
      if (hasCanSubmitCount) {
        output.WriteInt32(40, field_names[9], CanSubmitCount);
      }
      if (hasMaxFlowerPerContest) {
        output.WriteInt32(41, field_names[41], MaxFlowerPerContest);
      }
      if (hasMaxFlowerPerOpus) {
        output.WriteInt32(42, field_names[42], MaxFlowerPerOpus);
      }
      if (hasJudgeRankWeight) {
        output.WriteInt32(43, field_names[32], JudgeRankWeight);
      }
      if (hasCanSubmit) {
        output.WriteBool(44, field_names[8], CanSubmit);
      }
      if (hasCanVote) {
        output.WriteBool(45, field_names[10], CanVote);
      }
      if (hasShowontop) {
        output.WriteBool(46, field_names[59], Showontop);
      }
      if (prizeItem_.Count > 0) {
        output.WriteMessageArray(48, field_names[55], prizeItem_);
      }
      if (hasContestantsOnly) {
        output.WriteBool(49, field_names[20], ContestantsOnly);
      }
      if (contestants_.Count > 0) {
        output.WriteMessageArray(50, field_names[19], contestants_);
      }
      if (judges_.Count > 0) {
        output.WriteMessageArray(51, field_names[35], judges_);
      }
      if (reporters_.Count > 0) {
        output.WriteMessageArray(52, field_names[58], reporters_);
      }
      if (winnerUsers_.Count > 0) {
        output.WriteMessageArray(53, field_names[69], winnerUsers_);
      }
      if (awardUsers_.Count > 0) {
        output.WriteMessageArray(54, field_names[7], awardUsers_);
      }
      if (rankTypes_.Count > 0) {
        output.WriteMessageArray(55, field_names[57], rankTypes_);
      }
      if (hasCmethoddesc) {
        output.WriteString(56, field_names[13], Cmethoddesc);
      }
      if (hasCruledesc) {
        output.WriteString(57, field_names[23], Cruledesc);
      }
      if (hasCawarddesc) {
        output.WriteString(58, field_names[12], Cawarddesc);
      }
      if (hasMoredesc) {
        output.WriteString(59, field_names[47], Moredesc);
      }
      if (hasGroup) {
        output.WriteMessage(60, field_names[27], Group);
      }
      if (hasJoinersType) {
        output.WriteInt32(61, field_names[31], JoinersType);
      }
      if (hasDesc) {
        output.WriteString(62, field_names[24], Desc);
      }
      if (hasNotice) {
        output.WriteString(63, field_names[50], Notice);
      }
      if (awardRules_.Count > 0) {
        output.WriteInt32Array(64, field_names[6], awardRules_);
      }
      if (awardName_.Count > 0) {
        output.WriteStringArray(65, field_names[5], awardName_);
      }
      if (hasCreator) {
        output.WriteMessage(66, field_names[22], Creator);
      }
      if (hasAwardCount) {
        output.WriteInt32(68, field_names[4], AwardCount);
      }
      if (hasContestStatus) {
        output.WriteInt32(69, field_names[17], ContestStatus);
      }
      if (hasContestCategory) {
        output.WriteString(70, field_names[15], ContestCategory);
      }
      if (hasNormalVoterTime) {
        output.WriteInt32(71, field_names[48], NormalVoterTime);
      }
      if (hasAdvanceVoterTime) {
        output.WriteInt32(72, field_names[2], AdvanceVoterTime);
      }
      if (hasJudgerVoteTime) {
        output.WriteInt32(73, field_names[33], JudgerVoteTime);
      }
      if (hasNormalVoterWeigh) {
        output.WriteInt32(74, field_names[49], NormalVoterWeigh);
      }
      if (hasAdvanceVoterWeigh) {
        output.WriteInt32(75, field_names[3], AdvanceVoterWeigh);
      }
      if (hasJudgerVoteWeigh) {
        output.WriteInt32(76, field_names[34], JudgerVoteWeigh);
      }
      if (hasMaxOpusPerContest) {
        output.WriteInt32(77, field_names[44], MaxOpusPerContest);
      }
      if (hasMaxVotePerOpus) {
        output.WriteInt32(78, field_names[45], MaxVotePerOpus);
      }
      if (hasOpusId) {
        output.WriteString(80, field_names[52], OpusId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ContestId);
        }
        if (hasStartDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, StartDate);
        }
        if (hasEndDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, EndDate);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Type);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Status);
        }
        if (hasParticipantCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, ParticipantCount);
        }
        if (hasOpusCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, OpusCount);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Title);
        }
        if (hasContestUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(9, ContestUrl);
        }
        if (hasStatementUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(10, StatementUrl);
        }
        if (hasVoteStartDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, VoteStartDate);
        }
        if (hasVoteEndDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, VoteEndDate);
        }
        if (hasIsAnounymous) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, IsAnounymous);
        }
        if (hasActivityType) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, ActivityType);
        }
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeEnumSize(15, (int) Category);
        }
        if (hasHolder) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Holder);
        }
        if (hasActoperator) {
          size += pb::CodedOutputStream.ComputeStringSize(17, Actoperator);
        }
        if (hasLeader) {
          size += pb::CodedOutputStream.ComputeStringSize(18, Leader);
        }
        if (hasEnrollNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, EnrollNumber);
        }
        if (hasLeaderDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(20, LeaderDesc);
        }
        if (hasPlanDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(21, PlanDesc);
        }
        if (hasCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, Cost);
        }
        if (hasContact) {
          size += pb::CodedOutputStream.ComputeStringSize(23, Contact);
        }
        if (hasLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(24, Location);
        }
        if (hasModelNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, ModelNumber);
        }
        if (hasTraffictype) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, Traffictype);
        }
        if (hasMaxNumbers) {
          size += pb::CodedOutputStream.ComputeInt32Size(27, MaxNumbers);
        }
        if (hasLongitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(28, Longitude);
        }
        if (hasLatitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, Latitude);
        }
        if (hasStartLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(30, StartLocation);
        }
        if (hasHotel) {
          size += pb::CodedOutputStream.ComputeStringSize(31, Hotel);
        }
        if (hasQrUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(32, QrUrl);
        }
        if (hasCanSubmitCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(40, CanSubmitCount);
        }
        if (hasMaxFlowerPerContest) {
          size += pb::CodedOutputStream.ComputeInt32Size(41, MaxFlowerPerContest);
        }
        if (hasMaxFlowerPerOpus) {
          size += pb::CodedOutputStream.ComputeInt32Size(42, MaxFlowerPerOpus);
        }
        if (hasJudgeRankWeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(43, JudgeRankWeight);
        }
        if (hasCanSubmit) {
          size += pb::CodedOutputStream.ComputeBoolSize(44, CanSubmit);
        }
        if (hasCanVote) {
          size += pb::CodedOutputStream.ComputeBoolSize(45, CanVote);
        }
        if (hasShowontop) {
          size += pb::CodedOutputStream.ComputeBoolSize(46, Showontop);
        }
        foreach (global::hdsense.PBPrizeItem element in PrizeItemList) {
          size += pb::CodedOutputStream.ComputeMessageSize(48, element);
        }
        if (hasContestantsOnly) {
          size += pb::CodedOutputStream.ComputeBoolSize(49, ContestantsOnly);
        }
        foreach (global::hdsense.PBGameUser element in ContestantsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(50, element);
        }
        foreach (global::hdsense.PBGameUser element in JudgesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(51, element);
        }
        foreach (global::hdsense.PBGameUser element in ReportersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(52, element);
        }
        foreach (global::hdsense.PBUserAward element in WinnerUsersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(53, element);
        }
        foreach (global::hdsense.PBUserAward element in AwardUsersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(54, element);
        }
        foreach (global::hdsense.PBIntKeyValue element in RankTypesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(55, element);
        }
        if (hasCmethoddesc) {
          size += pb::CodedOutputStream.ComputeStringSize(56, Cmethoddesc);
        }
        if (hasCruledesc) {
          size += pb::CodedOutputStream.ComputeStringSize(57, Cruledesc);
        }
        if (hasCawarddesc) {
          size += pb::CodedOutputStream.ComputeStringSize(58, Cawarddesc);
        }
        if (hasMoredesc) {
          size += pb::CodedOutputStream.ComputeStringSize(59, Moredesc);
        }
        if (hasGroup) {
          size += pb::CodedOutputStream.ComputeMessageSize(60, Group);
        }
        if (hasJoinersType) {
          size += pb::CodedOutputStream.ComputeInt32Size(61, JoinersType);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(62, Desc);
        }
        if (hasNotice) {
          size += pb::CodedOutputStream.ComputeStringSize(63, Notice);
        }
        {
          int dataSize = 0;
          foreach (int element in AwardRulesList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * awardRules_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in AwardNameList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * awardName_.Count;
        }
        if (hasCreator) {
          size += pb::CodedOutputStream.ComputeMessageSize(66, Creator);
        }
        if (hasAwardCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(68, AwardCount);
        }
        if (hasContestStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(69, ContestStatus);
        }
        if (hasContestCategory) {
          size += pb::CodedOutputStream.ComputeStringSize(70, ContestCategory);
        }
        if (hasNormalVoterTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(71, NormalVoterTime);
        }
        if (hasAdvanceVoterTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(72, AdvanceVoterTime);
        }
        if (hasJudgerVoteTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(73, JudgerVoteTime);
        }
        if (hasNormalVoterWeigh) {
          size += pb::CodedOutputStream.ComputeInt32Size(74, NormalVoterWeigh);
        }
        if (hasAdvanceVoterWeigh) {
          size += pb::CodedOutputStream.ComputeInt32Size(75, AdvanceVoterWeigh);
        }
        if (hasJudgerVoteWeigh) {
          size += pb::CodedOutputStream.ComputeInt32Size(76, JudgerVoteWeigh);
        }
        if (hasMaxOpusPerContest) {
          size += pb::CodedOutputStream.ComputeInt32Size(77, MaxOpusPerContest);
        }
        if (hasMaxVotePerOpus) {
          size += pb::CodedOutputStream.ComputeInt32Size(78, MaxVotePerOpus);
        }
        if (hasOpusId) {
          size += pb::CodedOutputStream.ComputeStringSize(80, OpusId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBContest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBContest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBContest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBContest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBContest MakeReadOnly() {
      prizeItem_.MakeReadOnly();
      contestants_.MakeReadOnly();
      judges_.MakeReadOnly();
      reporters_.MakeReadOnly();
      winnerUsers_.MakeReadOnly();
      awardUsers_.MakeReadOnly();
      rankTypes_.MakeReadOnly();
      awardRules_.MakeReadOnly();
      awardName_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBContest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBContest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBContest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBContest result;
      
      private PBContest PrepareBuilder() {
        if (resultIsReadOnly) {
          PBContest original = result;
          result = new PBContest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBContest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBContest.Descriptor; }
      }
      
      public override PBContest DefaultInstanceForType {
        get { return global::hdsense.PBContest.DefaultInstance; }
      }
      
      public override PBContest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBContest) {
          return MergeFrom((PBContest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBContest other) {
        if (other == global::hdsense.PBContest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContestId) {
          ContestId = other.ContestId;
        }
        if (other.HasStartDate) {
          StartDate = other.StartDate;
        }
        if (other.HasEndDate) {
          EndDate = other.EndDate;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasParticipantCount) {
          ParticipantCount = other.ParticipantCount;
        }
        if (other.HasOpusCount) {
          OpusCount = other.OpusCount;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasContestUrl) {
          ContestUrl = other.ContestUrl;
        }
        if (other.HasStatementUrl) {
          StatementUrl = other.StatementUrl;
        }
        if (other.HasVoteStartDate) {
          VoteStartDate = other.VoteStartDate;
        }
        if (other.HasVoteEndDate) {
          VoteEndDate = other.VoteEndDate;
        }
        if (other.HasIsAnounymous) {
          IsAnounymous = other.IsAnounymous;
        }
        if (other.HasActivityType) {
          ActivityType = other.ActivityType;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasHolder) {
          Holder = other.Holder;
        }
        if (other.HasActoperator) {
          Actoperator = other.Actoperator;
        }
        if (other.HasLeader) {
          Leader = other.Leader;
        }
        if (other.HasEnrollNumber) {
          EnrollNumber = other.EnrollNumber;
        }
        if (other.HasLeaderDesc) {
          LeaderDesc = other.LeaderDesc;
        }
        if (other.HasPlanDesc) {
          PlanDesc = other.PlanDesc;
        }
        if (other.HasCost) {
          Cost = other.Cost;
        }
        if (other.HasContact) {
          Contact = other.Contact;
        }
        if (other.HasLocation) {
          Location = other.Location;
        }
        if (other.HasModelNumber) {
          ModelNumber = other.ModelNumber;
        }
        if (other.HasTraffictype) {
          Traffictype = other.Traffictype;
        }
        if (other.HasMaxNumbers) {
          MaxNumbers = other.MaxNumbers;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasStartLocation) {
          StartLocation = other.StartLocation;
        }
        if (other.HasHotel) {
          Hotel = other.Hotel;
        }
        if (other.HasQrUrl) {
          QrUrl = other.QrUrl;
        }
        if (other.HasCanSubmitCount) {
          CanSubmitCount = other.CanSubmitCount;
        }
        if (other.HasMaxFlowerPerContest) {
          MaxFlowerPerContest = other.MaxFlowerPerContest;
        }
        if (other.HasMaxFlowerPerOpus) {
          MaxFlowerPerOpus = other.MaxFlowerPerOpus;
        }
        if (other.HasJudgeRankWeight) {
          JudgeRankWeight = other.JudgeRankWeight;
        }
        if (other.HasCanSubmit) {
          CanSubmit = other.CanSubmit;
        }
        if (other.HasCanVote) {
          CanVote = other.CanVote;
        }
        if (other.HasShowontop) {
          Showontop = other.Showontop;
        }
        if (other.prizeItem_.Count != 0) {
          result.prizeItem_.Add(other.prizeItem_);
        }
        if (other.HasContestantsOnly) {
          ContestantsOnly = other.ContestantsOnly;
        }
        if (other.contestants_.Count != 0) {
          result.contestants_.Add(other.contestants_);
        }
        if (other.judges_.Count != 0) {
          result.judges_.Add(other.judges_);
        }
        if (other.reporters_.Count != 0) {
          result.reporters_.Add(other.reporters_);
        }
        if (other.winnerUsers_.Count != 0) {
          result.winnerUsers_.Add(other.winnerUsers_);
        }
        if (other.awardUsers_.Count != 0) {
          result.awardUsers_.Add(other.awardUsers_);
        }
        if (other.rankTypes_.Count != 0) {
          result.rankTypes_.Add(other.rankTypes_);
        }
        if (other.HasCmethoddesc) {
          Cmethoddesc = other.Cmethoddesc;
        }
        if (other.HasCruledesc) {
          Cruledesc = other.Cruledesc;
        }
        if (other.HasCawarddesc) {
          Cawarddesc = other.Cawarddesc;
        }
        if (other.HasMoredesc) {
          Moredesc = other.Moredesc;
        }
        if (other.HasGroup) {
          MergeGroup(other.Group);
        }
        if (other.HasJoinersType) {
          JoinersType = other.JoinersType;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasNotice) {
          Notice = other.Notice;
        }
        if (other.awardRules_.Count != 0) {
          result.awardRules_.Add(other.awardRules_);
        }
        if (other.awardName_.Count != 0) {
          result.awardName_.Add(other.awardName_);
        }
        if (other.HasCreator) {
          MergeCreator(other.Creator);
        }
        if (other.HasAwardCount) {
          AwardCount = other.AwardCount;
        }
        if (other.HasContestStatus) {
          ContestStatus = other.ContestStatus;
        }
        if (other.HasContestCategory) {
          ContestCategory = other.ContestCategory;
        }
        if (other.HasNormalVoterTime) {
          NormalVoterTime = other.NormalVoterTime;
        }
        if (other.HasAdvanceVoterTime) {
          AdvanceVoterTime = other.AdvanceVoterTime;
        }
        if (other.HasJudgerVoteTime) {
          JudgerVoteTime = other.JudgerVoteTime;
        }
        if (other.HasNormalVoterWeigh) {
          NormalVoterWeigh = other.NormalVoterWeigh;
        }
        if (other.HasAdvanceVoterWeigh) {
          AdvanceVoterWeigh = other.AdvanceVoterWeigh;
        }
        if (other.HasJudgerVoteWeigh) {
          JudgerVoteWeigh = other.JudgerVoteWeigh;
        }
        if (other.HasMaxOpusPerContest) {
          MaxOpusPerContest = other.MaxOpusPerContest;
        }
        if (other.HasMaxVotePerOpus) {
          MaxVotePerOpus = other.MaxVotePerOpus;
        }
        if (other.HasOpusId) {
          OpusId = other.OpusId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBContestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBContestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContestId = input.ReadString(ref result.contestId_);
              break;
            }
            case 16: {
              result.hasStartDate = input.ReadInt32(ref result.startDate_);
              break;
            }
            case 24: {
              result.hasEndDate = input.ReadInt32(ref result.endDate_);
              break;
            }
            case 32: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 40: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 48: {
              result.hasParticipantCount = input.ReadInt32(ref result.participantCount_);
              break;
            }
            case 56: {
              result.hasOpusCount = input.ReadInt32(ref result.opusCount_);
              break;
            }
            case 66: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 74: {
              result.hasContestUrl = input.ReadString(ref result.contestUrl_);
              break;
            }
            case 82: {
              result.hasStatementUrl = input.ReadString(ref result.statementUrl_);
              break;
            }
            case 88: {
              result.hasVoteStartDate = input.ReadInt32(ref result.voteStartDate_);
              break;
            }
            case 96: {
              result.hasVoteEndDate = input.ReadInt32(ref result.voteEndDate_);
              break;
            }
            case 104: {
              result.hasIsAnounymous = input.ReadBool(ref result.isAnounymous_);
              break;
            }
            case 112: {
              result.hasActivityType = input.ReadInt32(ref result.activityType_);
              break;
            }
            case 120: {
              object unknown;
              if(input.ReadEnum(ref result.category_, out unknown)) {
                result.hasCategory = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(15, (ulong)(int)unknown);
              }
              break;
            }
            case 130: {
              result.hasHolder = input.ReadString(ref result.holder_);
              break;
            }
            case 138: {
              result.hasActoperator = input.ReadString(ref result.actoperator_);
              break;
            }
            case 146: {
              result.hasLeader = input.ReadString(ref result.leader_);
              break;
            }
            case 152: {
              result.hasEnrollNumber = input.ReadInt32(ref result.enrollNumber_);
              break;
            }
            case 162: {
              result.hasLeaderDesc = input.ReadString(ref result.leaderDesc_);
              break;
            }
            case 170: {
              result.hasPlanDesc = input.ReadString(ref result.planDesc_);
              break;
            }
            case 176: {
              result.hasCost = input.ReadInt32(ref result.cost_);
              break;
            }
            case 186: {
              result.hasContact = input.ReadString(ref result.contact_);
              break;
            }
            case 194: {
              result.hasLocation = input.ReadString(ref result.location_);
              break;
            }
            case 200: {
              result.hasModelNumber = input.ReadInt32(ref result.modelNumber_);
              break;
            }
            case 208: {
              result.hasTraffictype = input.ReadInt32(ref result.traffictype_);
              break;
            }
            case 216: {
              result.hasMaxNumbers = input.ReadInt32(ref result.maxNumbers_);
              break;
            }
            case 225: {
              result.hasLongitude = input.ReadDouble(ref result.longitude_);
              break;
            }
            case 233: {
              result.hasLatitude = input.ReadDouble(ref result.latitude_);
              break;
            }
            case 242: {
              result.hasStartLocation = input.ReadString(ref result.startLocation_);
              break;
            }
            case 250: {
              result.hasHotel = input.ReadString(ref result.hotel_);
              break;
            }
            case 258: {
              result.hasQrUrl = input.ReadString(ref result.qrUrl_);
              break;
            }
            case 320: {
              result.hasCanSubmitCount = input.ReadInt32(ref result.canSubmitCount_);
              break;
            }
            case 328: {
              result.hasMaxFlowerPerContest = input.ReadInt32(ref result.maxFlowerPerContest_);
              break;
            }
            case 336: {
              result.hasMaxFlowerPerOpus = input.ReadInt32(ref result.maxFlowerPerOpus_);
              break;
            }
            case 344: {
              result.hasJudgeRankWeight = input.ReadInt32(ref result.judgeRankWeight_);
              break;
            }
            case 352: {
              result.hasCanSubmit = input.ReadBool(ref result.canSubmit_);
              break;
            }
            case 360: {
              result.hasCanVote = input.ReadBool(ref result.canVote_);
              break;
            }
            case 368: {
              result.hasShowontop = input.ReadBool(ref result.showontop_);
              break;
            }
            case 386: {
              input.ReadMessageArray(tag, field_name, result.prizeItem_, global::hdsense.PBPrizeItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 392: {
              result.hasContestantsOnly = input.ReadBool(ref result.contestantsOnly_);
              break;
            }
            case 402: {
              input.ReadMessageArray(tag, field_name, result.contestants_, global::hdsense.PBGameUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 410: {
              input.ReadMessageArray(tag, field_name, result.judges_, global::hdsense.PBGameUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 418: {
              input.ReadMessageArray(tag, field_name, result.reporters_, global::hdsense.PBGameUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 426: {
              input.ReadMessageArray(tag, field_name, result.winnerUsers_, global::hdsense.PBUserAward.DefaultInstance, extensionRegistry);
              break;
            }
            case 434: {
              input.ReadMessageArray(tag, field_name, result.awardUsers_, global::hdsense.PBUserAward.DefaultInstance, extensionRegistry);
              break;
            }
            case 442: {
              input.ReadMessageArray(tag, field_name, result.rankTypes_, global::hdsense.PBIntKeyValue.DefaultInstance, extensionRegistry);
              break;
            }
            case 450: {
              result.hasCmethoddesc = input.ReadString(ref result.cmethoddesc_);
              break;
            }
            case 458: {
              result.hasCruledesc = input.ReadString(ref result.cruledesc_);
              break;
            }
            case 466: {
              result.hasCawarddesc = input.ReadString(ref result.cawarddesc_);
              break;
            }
            case 474: {
              result.hasMoredesc = input.ReadString(ref result.moredesc_);
              break;
            }
            case 482: {
              global::hdsense.PBGroup.Builder subBuilder = global::hdsense.PBGroup.CreateBuilder();
              if (result.hasGroup) {
                subBuilder.MergeFrom(Group);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Group = subBuilder.BuildPartial();
              break;
            }
            case 488: {
              result.hasJoinersType = input.ReadInt32(ref result.joinersType_);
              break;
            }
            case 498: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 506: {
              result.hasNotice = input.ReadString(ref result.notice_);
              break;
            }
            case 514:
            case 512: {
              input.ReadInt32Array(tag, field_name, result.awardRules_);
              break;
            }
            case 522: {
              input.ReadStringArray(tag, field_name, result.awardName_);
              break;
            }
            case 530: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasCreator) {
                subBuilder.MergeFrom(Creator);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Creator = subBuilder.BuildPartial();
              break;
            }
            case 544: {
              result.hasAwardCount = input.ReadInt32(ref result.awardCount_);
              break;
            }
            case 552: {
              result.hasContestStatus = input.ReadInt32(ref result.contestStatus_);
              break;
            }
            case 562: {
              result.hasContestCategory = input.ReadString(ref result.contestCategory_);
              break;
            }
            case 568: {
              result.hasNormalVoterTime = input.ReadInt32(ref result.normalVoterTime_);
              break;
            }
            case 576: {
              result.hasAdvanceVoterTime = input.ReadInt32(ref result.advanceVoterTime_);
              break;
            }
            case 584: {
              result.hasJudgerVoteTime = input.ReadInt32(ref result.judgerVoteTime_);
              break;
            }
            case 592: {
              result.hasNormalVoterWeigh = input.ReadInt32(ref result.normalVoterWeigh_);
              break;
            }
            case 600: {
              result.hasAdvanceVoterWeigh = input.ReadInt32(ref result.advanceVoterWeigh_);
              break;
            }
            case 608: {
              result.hasJudgerVoteWeigh = input.ReadInt32(ref result.judgerVoteWeigh_);
              break;
            }
            case 616: {
              result.hasMaxOpusPerContest = input.ReadInt32(ref result.maxOpusPerContest_);
              break;
            }
            case 624: {
              result.hasMaxVotePerOpus = input.ReadInt32(ref result.maxVotePerOpus_);
              break;
            }
            case 642: {
              result.hasOpusId = input.ReadString(ref result.opusId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContestId {
        get { return result.hasContestId; }
      }
      public string ContestId {
        get { return result.ContestId; }
        set { SetContestId(value); }
      }
      public Builder SetContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestId = true;
        result.contestId_ = value;
        return this;
      }
      public Builder ClearContestId() {
        PrepareBuilder();
        result.hasContestId = false;
        result.contestId_ = "";
        return this;
      }
      
      public bool HasStartDate {
        get { return result.hasStartDate; }
      }
      public int StartDate {
        get { return result.StartDate; }
        set { SetStartDate(value); }
      }
      public Builder SetStartDate(int value) {
        PrepareBuilder();
        result.hasStartDate = true;
        result.startDate_ = value;
        return this;
      }
      public Builder ClearStartDate() {
        PrepareBuilder();
        result.hasStartDate = false;
        result.startDate_ = 0;
        return this;
      }
      
      public bool HasEndDate {
        get { return result.hasEndDate; }
      }
      public int EndDate {
        get { return result.EndDate; }
        set { SetEndDate(value); }
      }
      public Builder SetEndDate(int value) {
        PrepareBuilder();
        result.hasEndDate = true;
        result.endDate_ = value;
        return this;
      }
      public Builder ClearEndDate() {
        PrepareBuilder();
        result.hasEndDate = false;
        result.endDate_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasParticipantCount {
        get { return result.hasParticipantCount; }
      }
      public int ParticipantCount {
        get { return result.ParticipantCount; }
        set { SetParticipantCount(value); }
      }
      public Builder SetParticipantCount(int value) {
        PrepareBuilder();
        result.hasParticipantCount = true;
        result.participantCount_ = value;
        return this;
      }
      public Builder ClearParticipantCount() {
        PrepareBuilder();
        result.hasParticipantCount = false;
        result.participantCount_ = 0;
        return this;
      }
      
      public bool HasOpusCount {
        get { return result.hasOpusCount; }
      }
      public int OpusCount {
        get { return result.OpusCount; }
        set { SetOpusCount(value); }
      }
      public Builder SetOpusCount(int value) {
        PrepareBuilder();
        result.hasOpusCount = true;
        result.opusCount_ = value;
        return this;
      }
      public Builder ClearOpusCount() {
        PrepareBuilder();
        result.hasOpusCount = false;
        result.opusCount_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasContestUrl {
        get { return result.hasContestUrl; }
      }
      public string ContestUrl {
        get { return result.ContestUrl; }
        set { SetContestUrl(value); }
      }
      public Builder SetContestUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestUrl = true;
        result.contestUrl_ = value;
        return this;
      }
      public Builder ClearContestUrl() {
        PrepareBuilder();
        result.hasContestUrl = false;
        result.contestUrl_ = "";
        return this;
      }
      
      public bool HasStatementUrl {
        get { return result.hasStatementUrl; }
      }
      public string StatementUrl {
        get { return result.StatementUrl; }
        set { SetStatementUrl(value); }
      }
      public Builder SetStatementUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatementUrl = true;
        result.statementUrl_ = value;
        return this;
      }
      public Builder ClearStatementUrl() {
        PrepareBuilder();
        result.hasStatementUrl = false;
        result.statementUrl_ = "";
        return this;
      }
      
      public bool HasVoteStartDate {
        get { return result.hasVoteStartDate; }
      }
      public int VoteStartDate {
        get { return result.VoteStartDate; }
        set { SetVoteStartDate(value); }
      }
      public Builder SetVoteStartDate(int value) {
        PrepareBuilder();
        result.hasVoteStartDate = true;
        result.voteStartDate_ = value;
        return this;
      }
      public Builder ClearVoteStartDate() {
        PrepareBuilder();
        result.hasVoteStartDate = false;
        result.voteStartDate_ = 0;
        return this;
      }
      
      public bool HasVoteEndDate {
        get { return result.hasVoteEndDate; }
      }
      public int VoteEndDate {
        get { return result.VoteEndDate; }
        set { SetVoteEndDate(value); }
      }
      public Builder SetVoteEndDate(int value) {
        PrepareBuilder();
        result.hasVoteEndDate = true;
        result.voteEndDate_ = value;
        return this;
      }
      public Builder ClearVoteEndDate() {
        PrepareBuilder();
        result.hasVoteEndDate = false;
        result.voteEndDate_ = 0;
        return this;
      }
      
      public bool HasIsAnounymous {
        get { return result.hasIsAnounymous; }
      }
      public bool IsAnounymous {
        get { return result.IsAnounymous; }
        set { SetIsAnounymous(value); }
      }
      public Builder SetIsAnounymous(bool value) {
        PrepareBuilder();
        result.hasIsAnounymous = true;
        result.isAnounymous_ = value;
        return this;
      }
      public Builder ClearIsAnounymous() {
        PrepareBuilder();
        result.hasIsAnounymous = false;
        result.isAnounymous_ = false;
        return this;
      }
      
      public bool HasActivityType {
        get { return result.hasActivityType; }
      }
      public int ActivityType {
        get { return result.ActivityType; }
        set { SetActivityType(value); }
      }
      public Builder SetActivityType(int value) {
        PrepareBuilder();
        result.hasActivityType = true;
        result.activityType_ = value;
        return this;
      }
      public Builder ClearActivityType() {
        PrepareBuilder();
        result.hasActivityType = false;
        result.activityType_ = 0;
        return this;
      }
      
      public bool HasCategory {
       get { return result.hasCategory; }
      }
      public global::hdsense.PBOpusCategoryType Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(global::hdsense.PBOpusCategoryType value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = global::hdsense.PBOpusCategoryType.DRAW_CATEGORY;
        return this;
      }
      
      public bool HasHolder {
        get { return result.hasHolder; }
      }
      public string Holder {
        get { return result.Holder; }
        set { SetHolder(value); }
      }
      public Builder SetHolder(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHolder = true;
        result.holder_ = value;
        return this;
      }
      public Builder ClearHolder() {
        PrepareBuilder();
        result.hasHolder = false;
        result.holder_ = "";
        return this;
      }
      
      public bool HasActoperator {
        get { return result.hasActoperator; }
      }
      public string Actoperator {
        get { return result.Actoperator; }
        set { SetActoperator(value); }
      }
      public Builder SetActoperator(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActoperator = true;
        result.actoperator_ = value;
        return this;
      }
      public Builder ClearActoperator() {
        PrepareBuilder();
        result.hasActoperator = false;
        result.actoperator_ = "";
        return this;
      }
      
      public bool HasLeader {
        get { return result.hasLeader; }
      }
      public string Leader {
        get { return result.Leader; }
        set { SetLeader(value); }
      }
      public Builder SetLeader(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLeader = true;
        result.leader_ = value;
        return this;
      }
      public Builder ClearLeader() {
        PrepareBuilder();
        result.hasLeader = false;
        result.leader_ = "";
        return this;
      }
      
      public bool HasEnrollNumber {
        get { return result.hasEnrollNumber; }
      }
      public int EnrollNumber {
        get { return result.EnrollNumber; }
        set { SetEnrollNumber(value); }
      }
      public Builder SetEnrollNumber(int value) {
        PrepareBuilder();
        result.hasEnrollNumber = true;
        result.enrollNumber_ = value;
        return this;
      }
      public Builder ClearEnrollNumber() {
        PrepareBuilder();
        result.hasEnrollNumber = false;
        result.enrollNumber_ = 0;
        return this;
      }
      
      public bool HasLeaderDesc {
        get { return result.hasLeaderDesc; }
      }
      public string LeaderDesc {
        get { return result.LeaderDesc; }
        set { SetLeaderDesc(value); }
      }
      public Builder SetLeaderDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLeaderDesc = true;
        result.leaderDesc_ = value;
        return this;
      }
      public Builder ClearLeaderDesc() {
        PrepareBuilder();
        result.hasLeaderDesc = false;
        result.leaderDesc_ = "";
        return this;
      }
      
      public bool HasPlanDesc {
        get { return result.hasPlanDesc; }
      }
      public string PlanDesc {
        get { return result.PlanDesc; }
        set { SetPlanDesc(value); }
      }
      public Builder SetPlanDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlanDesc = true;
        result.planDesc_ = value;
        return this;
      }
      public Builder ClearPlanDesc() {
        PrepareBuilder();
        result.hasPlanDesc = false;
        result.planDesc_ = "";
        return this;
      }
      
      public bool HasCost {
        get { return result.hasCost; }
      }
      public int Cost {
        get { return result.Cost; }
        set { SetCost(value); }
      }
      public Builder SetCost(int value) {
        PrepareBuilder();
        result.hasCost = true;
        result.cost_ = value;
        return this;
      }
      public Builder ClearCost() {
        PrepareBuilder();
        result.hasCost = false;
        result.cost_ = 0;
        return this;
      }
      
      public bool HasContact {
        get { return result.hasContact; }
      }
      public string Contact {
        get { return result.Contact; }
        set { SetContact(value); }
      }
      public Builder SetContact(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContact = true;
        result.contact_ = value;
        return this;
      }
      public Builder ClearContact() {
        PrepareBuilder();
        result.hasContact = false;
        result.contact_ = "";
        return this;
      }
      
      public bool HasLocation {
        get { return result.hasLocation; }
      }
      public string Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = "";
        return this;
      }
      
      public bool HasModelNumber {
        get { return result.hasModelNumber; }
      }
      public int ModelNumber {
        get { return result.ModelNumber; }
        set { SetModelNumber(value); }
      }
      public Builder SetModelNumber(int value) {
        PrepareBuilder();
        result.hasModelNumber = true;
        result.modelNumber_ = value;
        return this;
      }
      public Builder ClearModelNumber() {
        PrepareBuilder();
        result.hasModelNumber = false;
        result.modelNumber_ = 0;
        return this;
      }
      
      public bool HasTraffictype {
        get { return result.hasTraffictype; }
      }
      public int Traffictype {
        get { return result.Traffictype; }
        set { SetTraffictype(value); }
      }
      public Builder SetTraffictype(int value) {
        PrepareBuilder();
        result.hasTraffictype = true;
        result.traffictype_ = value;
        return this;
      }
      public Builder ClearTraffictype() {
        PrepareBuilder();
        result.hasTraffictype = false;
        result.traffictype_ = 0;
        return this;
      }
      
      public bool HasMaxNumbers {
        get { return result.hasMaxNumbers; }
      }
      public int MaxNumbers {
        get { return result.MaxNumbers; }
        set { SetMaxNumbers(value); }
      }
      public Builder SetMaxNumbers(int value) {
        PrepareBuilder();
        result.hasMaxNumbers = true;
        result.maxNumbers_ = value;
        return this;
      }
      public Builder ClearMaxNumbers() {
        PrepareBuilder();
        result.hasMaxNumbers = false;
        result.maxNumbers_ = 0;
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public double Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(double value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public double Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(double value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      public bool HasStartLocation {
        get { return result.hasStartLocation; }
      }
      public string StartLocation {
        get { return result.StartLocation; }
        set { SetStartLocation(value); }
      }
      public Builder SetStartLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStartLocation = true;
        result.startLocation_ = value;
        return this;
      }
      public Builder ClearStartLocation() {
        PrepareBuilder();
        result.hasStartLocation = false;
        result.startLocation_ = "";
        return this;
      }
      
      public bool HasHotel {
        get { return result.hasHotel; }
      }
      public string Hotel {
        get { return result.Hotel; }
        set { SetHotel(value); }
      }
      public Builder SetHotel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHotel = true;
        result.hotel_ = value;
        return this;
      }
      public Builder ClearHotel() {
        PrepareBuilder();
        result.hasHotel = false;
        result.hotel_ = "";
        return this;
      }
      
      public bool HasQrUrl {
        get { return result.hasQrUrl; }
      }
      public string QrUrl {
        get { return result.QrUrl; }
        set { SetQrUrl(value); }
      }
      public Builder SetQrUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQrUrl = true;
        result.qrUrl_ = value;
        return this;
      }
      public Builder ClearQrUrl() {
        PrepareBuilder();
        result.hasQrUrl = false;
        result.qrUrl_ = "";
        return this;
      }
      
      public bool HasCanSubmitCount {
        get { return result.hasCanSubmitCount; }
      }
      public int CanSubmitCount {
        get { return result.CanSubmitCount; }
        set { SetCanSubmitCount(value); }
      }
      public Builder SetCanSubmitCount(int value) {
        PrepareBuilder();
        result.hasCanSubmitCount = true;
        result.canSubmitCount_ = value;
        return this;
      }
      public Builder ClearCanSubmitCount() {
        PrepareBuilder();
        result.hasCanSubmitCount = false;
        result.canSubmitCount_ = 1;
        return this;
      }
      
      public bool HasMaxFlowerPerContest {
        get { return result.hasMaxFlowerPerContest; }
      }
      public int MaxFlowerPerContest {
        get { return result.MaxFlowerPerContest; }
        set { SetMaxFlowerPerContest(value); }
      }
      public Builder SetMaxFlowerPerContest(int value) {
        PrepareBuilder();
        result.hasMaxFlowerPerContest = true;
        result.maxFlowerPerContest_ = value;
        return this;
      }
      public Builder ClearMaxFlowerPerContest() {
        PrepareBuilder();
        result.hasMaxFlowerPerContest = false;
        result.maxFlowerPerContest_ = 20;
        return this;
      }
      
      public bool HasMaxFlowerPerOpus {
        get { return result.hasMaxFlowerPerOpus; }
      }
      public int MaxFlowerPerOpus {
        get { return result.MaxFlowerPerOpus; }
        set { SetMaxFlowerPerOpus(value); }
      }
      public Builder SetMaxFlowerPerOpus(int value) {
        PrepareBuilder();
        result.hasMaxFlowerPerOpus = true;
        result.maxFlowerPerOpus_ = value;
        return this;
      }
      public Builder ClearMaxFlowerPerOpus() {
        PrepareBuilder();
        result.hasMaxFlowerPerOpus = false;
        result.maxFlowerPerOpus_ = 3;
        return this;
      }
      
      public bool HasJudgeRankWeight {
        get { return result.hasJudgeRankWeight; }
      }
      public int JudgeRankWeight {
        get { return result.JudgeRankWeight; }
        set { SetJudgeRankWeight(value); }
      }
      public Builder SetJudgeRankWeight(int value) {
        PrepareBuilder();
        result.hasJudgeRankWeight = true;
        result.judgeRankWeight_ = value;
        return this;
      }
      public Builder ClearJudgeRankWeight() {
        PrepareBuilder();
        result.hasJudgeRankWeight = false;
        result.judgeRankWeight_ = 0;
        return this;
      }
      
      public bool HasCanSubmit {
        get { return result.hasCanSubmit; }
      }
      public bool CanSubmit {
        get { return result.CanSubmit; }
        set { SetCanSubmit(value); }
      }
      public Builder SetCanSubmit(bool value) {
        PrepareBuilder();
        result.hasCanSubmit = true;
        result.canSubmit_ = value;
        return this;
      }
      public Builder ClearCanSubmit() {
        PrepareBuilder();
        result.hasCanSubmit = false;
        result.canSubmit_ = false;
        return this;
      }
      
      public bool HasCanVote {
        get { return result.hasCanVote; }
      }
      public bool CanVote {
        get { return result.CanVote; }
        set { SetCanVote(value); }
      }
      public Builder SetCanVote(bool value) {
        PrepareBuilder();
        result.hasCanVote = true;
        result.canVote_ = value;
        return this;
      }
      public Builder ClearCanVote() {
        PrepareBuilder();
        result.hasCanVote = false;
        result.canVote_ = false;
        return this;
      }
      
      public bool HasShowontop {
        get { return result.hasShowontop; }
      }
      public bool Showontop {
        get { return result.Showontop; }
        set { SetShowontop(value); }
      }
      public Builder SetShowontop(bool value) {
        PrepareBuilder();
        result.hasShowontop = true;
        result.showontop_ = value;
        return this;
      }
      public Builder ClearShowontop() {
        PrepareBuilder();
        result.hasShowontop = false;
        result.showontop_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBPrizeItem> PrizeItemList {
        get { return PrepareBuilder().prizeItem_; }
      }
      public int PrizeItemCount {
        get { return result.PrizeItemCount; }
      }
      public global::hdsense.PBPrizeItem GetPrizeItem(int index) {
        return result.GetPrizeItem(index);
      }
      public Builder SetPrizeItem(int index, global::hdsense.PBPrizeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.prizeItem_[index] = value;
        return this;
      }
      public Builder SetPrizeItem(int index, global::hdsense.PBPrizeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.prizeItem_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPrizeItem(global::hdsense.PBPrizeItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.prizeItem_.Add(value);
        return this;
      }
      public Builder AddPrizeItem(global::hdsense.PBPrizeItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.prizeItem_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePrizeItem(scg::IEnumerable<global::hdsense.PBPrizeItem> values) {
        PrepareBuilder();
        result.prizeItem_.Add(values);
        return this;
      }
      public Builder ClearPrizeItem() {
        PrepareBuilder();
        result.prizeItem_.Clear();
        return this;
      }
      
      public bool HasContestantsOnly {
        get { return result.hasContestantsOnly; }
      }
      public bool ContestantsOnly {
        get { return result.ContestantsOnly; }
        set { SetContestantsOnly(value); }
      }
      public Builder SetContestantsOnly(bool value) {
        PrepareBuilder();
        result.hasContestantsOnly = true;
        result.contestantsOnly_ = value;
        return this;
      }
      public Builder ClearContestantsOnly() {
        PrepareBuilder();
        result.hasContestantsOnly = false;
        result.contestantsOnly_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGameUser> ContestantsList {
        get { return PrepareBuilder().contestants_; }
      }
      public int ContestantsCount {
        get { return result.ContestantsCount; }
      }
      public global::hdsense.PBGameUser GetContestants(int index) {
        return result.GetContestants(index);
      }
      public Builder SetContestants(int index, global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contestants_[index] = value;
        return this;
      }
      public Builder SetContestants(int index, global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contestants_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContestants(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contestants_.Add(value);
        return this;
      }
      public Builder AddContestants(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contestants_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContestants(scg::IEnumerable<global::hdsense.PBGameUser> values) {
        PrepareBuilder();
        result.contestants_.Add(values);
        return this;
      }
      public Builder ClearContestants() {
        PrepareBuilder();
        result.contestants_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGameUser> JudgesList {
        get { return PrepareBuilder().judges_; }
      }
      public int JudgesCount {
        get { return result.JudgesCount; }
      }
      public global::hdsense.PBGameUser GetJudges(int index) {
        return result.GetJudges(index);
      }
      public Builder SetJudges(int index, global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.judges_[index] = value;
        return this;
      }
      public Builder SetJudges(int index, global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.judges_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddJudges(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.judges_.Add(value);
        return this;
      }
      public Builder AddJudges(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.judges_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeJudges(scg::IEnumerable<global::hdsense.PBGameUser> values) {
        PrepareBuilder();
        result.judges_.Add(values);
        return this;
      }
      public Builder ClearJudges() {
        PrepareBuilder();
        result.judges_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGameUser> ReportersList {
        get { return PrepareBuilder().reporters_; }
      }
      public int ReportersCount {
        get { return result.ReportersCount; }
      }
      public global::hdsense.PBGameUser GetReporters(int index) {
        return result.GetReporters(index);
      }
      public Builder SetReporters(int index, global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reporters_[index] = value;
        return this;
      }
      public Builder SetReporters(int index, global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reporters_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddReporters(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.reporters_.Add(value);
        return this;
      }
      public Builder AddReporters(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.reporters_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeReporters(scg::IEnumerable<global::hdsense.PBGameUser> values) {
        PrepareBuilder();
        result.reporters_.Add(values);
        return this;
      }
      public Builder ClearReporters() {
        PrepareBuilder();
        result.reporters_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBUserAward> WinnerUsersList {
        get { return PrepareBuilder().winnerUsers_; }
      }
      public int WinnerUsersCount {
        get { return result.WinnerUsersCount; }
      }
      public global::hdsense.PBUserAward GetWinnerUsers(int index) {
        return result.GetWinnerUsers(index);
      }
      public Builder SetWinnerUsers(int index, global::hdsense.PBUserAward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.winnerUsers_[index] = value;
        return this;
      }
      public Builder SetWinnerUsers(int index, global::hdsense.PBUserAward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.winnerUsers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWinnerUsers(global::hdsense.PBUserAward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.winnerUsers_.Add(value);
        return this;
      }
      public Builder AddWinnerUsers(global::hdsense.PBUserAward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.winnerUsers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWinnerUsers(scg::IEnumerable<global::hdsense.PBUserAward> values) {
        PrepareBuilder();
        result.winnerUsers_.Add(values);
        return this;
      }
      public Builder ClearWinnerUsers() {
        PrepareBuilder();
        result.winnerUsers_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBUserAward> AwardUsersList {
        get { return PrepareBuilder().awardUsers_; }
      }
      public int AwardUsersCount {
        get { return result.AwardUsersCount; }
      }
      public global::hdsense.PBUserAward GetAwardUsers(int index) {
        return result.GetAwardUsers(index);
      }
      public Builder SetAwardUsers(int index, global::hdsense.PBUserAward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.awardUsers_[index] = value;
        return this;
      }
      public Builder SetAwardUsers(int index, global::hdsense.PBUserAward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.awardUsers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAwardUsers(global::hdsense.PBUserAward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.awardUsers_.Add(value);
        return this;
      }
      public Builder AddAwardUsers(global::hdsense.PBUserAward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.awardUsers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAwardUsers(scg::IEnumerable<global::hdsense.PBUserAward> values) {
        PrepareBuilder();
        result.awardUsers_.Add(values);
        return this;
      }
      public Builder ClearAwardUsers() {
        PrepareBuilder();
        result.awardUsers_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBIntKeyValue> RankTypesList {
        get { return PrepareBuilder().rankTypes_; }
      }
      public int RankTypesCount {
        get { return result.RankTypesCount; }
      }
      public global::hdsense.PBIntKeyValue GetRankTypes(int index) {
        return result.GetRankTypes(index);
      }
      public Builder SetRankTypes(int index, global::hdsense.PBIntKeyValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rankTypes_[index] = value;
        return this;
      }
      public Builder SetRankTypes(int index, global::hdsense.PBIntKeyValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rankTypes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRankTypes(global::hdsense.PBIntKeyValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.rankTypes_.Add(value);
        return this;
      }
      public Builder AddRankTypes(global::hdsense.PBIntKeyValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.rankTypes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRankTypes(scg::IEnumerable<global::hdsense.PBIntKeyValue> values) {
        PrepareBuilder();
        result.rankTypes_.Add(values);
        return this;
      }
      public Builder ClearRankTypes() {
        PrepareBuilder();
        result.rankTypes_.Clear();
        return this;
      }
      
      public bool HasCmethoddesc {
        get { return result.hasCmethoddesc; }
      }
      public string Cmethoddesc {
        get { return result.Cmethoddesc; }
        set { SetCmethoddesc(value); }
      }
      public Builder SetCmethoddesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmethoddesc = true;
        result.cmethoddesc_ = value;
        return this;
      }
      public Builder ClearCmethoddesc() {
        PrepareBuilder();
        result.hasCmethoddesc = false;
        result.cmethoddesc_ = "";
        return this;
      }
      
      public bool HasCruledesc {
        get { return result.hasCruledesc; }
      }
      public string Cruledesc {
        get { return result.Cruledesc; }
        set { SetCruledesc(value); }
      }
      public Builder SetCruledesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCruledesc = true;
        result.cruledesc_ = value;
        return this;
      }
      public Builder ClearCruledesc() {
        PrepareBuilder();
        result.hasCruledesc = false;
        result.cruledesc_ = "";
        return this;
      }
      
      public bool HasCawarddesc {
        get { return result.hasCawarddesc; }
      }
      public string Cawarddesc {
        get { return result.Cawarddesc; }
        set { SetCawarddesc(value); }
      }
      public Builder SetCawarddesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCawarddesc = true;
        result.cawarddesc_ = value;
        return this;
      }
      public Builder ClearCawarddesc() {
        PrepareBuilder();
        result.hasCawarddesc = false;
        result.cawarddesc_ = "";
        return this;
      }
      
      public bool HasMoredesc {
        get { return result.hasMoredesc; }
      }
      public string Moredesc {
        get { return result.Moredesc; }
        set { SetMoredesc(value); }
      }
      public Builder SetMoredesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMoredesc = true;
        result.moredesc_ = value;
        return this;
      }
      public Builder ClearMoredesc() {
        PrepareBuilder();
        result.hasMoredesc = false;
        result.moredesc_ = "";
        return this;
      }
      
      public bool HasGroup {
       get { return result.hasGroup; }
      }
      public global::hdsense.PBGroup Group {
        get { return result.Group; }
        set { SetGroup(value); }
      }
      public Builder SetGroup(global::hdsense.PBGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroup = true;
        result.group_ = value;
        return this;
      }
      public Builder SetGroup(global::hdsense.PBGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGroup = true;
        result.group_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGroup(global::hdsense.PBGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGroup &&
            result.group_ != global::hdsense.PBGroup.DefaultInstance) {
            result.group_ = global::hdsense.PBGroup.CreateBuilder(result.group_).MergeFrom(value).BuildPartial();
        } else {
          result.group_ = value;
        }
        result.hasGroup = true;
        return this;
      }
      public Builder ClearGroup() {
        PrepareBuilder();
        result.hasGroup = false;
        result.group_ = null;
        return this;
      }
      
      public bool HasJoinersType {
        get { return result.hasJoinersType; }
      }
      public int JoinersType {
        get { return result.JoinersType; }
        set { SetJoinersType(value); }
      }
      public Builder SetJoinersType(int value) {
        PrepareBuilder();
        result.hasJoinersType = true;
        result.joinersType_ = value;
        return this;
      }
      public Builder ClearJoinersType() {
        PrepareBuilder();
        result.hasJoinersType = false;
        result.joinersType_ = 0;
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasNotice {
        get { return result.hasNotice; }
      }
      public string Notice {
        get { return result.Notice; }
        set { SetNotice(value); }
      }
      public Builder SetNotice(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNotice = true;
        result.notice_ = value;
        return this;
      }
      public Builder ClearNotice() {
        PrepareBuilder();
        result.hasNotice = false;
        result.notice_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> AwardRulesList {
        get { return PrepareBuilder().awardRules_; }
      }
      public int AwardRulesCount {
        get { return result.AwardRulesCount; }
      }
      public int GetAwardRules(int index) {
        return result.GetAwardRules(index);
      }
      public Builder SetAwardRules(int index, int value) {
        PrepareBuilder();
        result.awardRules_[index] = value;
        return this;
      }
      public Builder AddAwardRules(int value) {
        PrepareBuilder();
        result.awardRules_.Add(value);
        return this;
      }
      public Builder AddRangeAwardRules(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.awardRules_.Add(values);
        return this;
      }
      public Builder ClearAwardRules() {
        PrepareBuilder();
        result.awardRules_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AwardNameList {
        get { return PrepareBuilder().awardName_; }
      }
      public int AwardNameCount {
        get { return result.AwardNameCount; }
      }
      public string GetAwardName(int index) {
        return result.GetAwardName(index);
      }
      public Builder SetAwardName(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.awardName_[index] = value;
        return this;
      }
      public Builder AddAwardName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.awardName_.Add(value);
        return this;
      }
      public Builder AddRangeAwardName(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.awardName_.Add(values);
        return this;
      }
      public Builder ClearAwardName() {
        PrepareBuilder();
        result.awardName_.Clear();
        return this;
      }
      
      public bool HasCreator {
       get { return result.hasCreator; }
      }
      public global::hdsense.PBGameUser Creator {
        get { return result.Creator; }
        set { SetCreator(value); }
      }
      public Builder SetCreator(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = value;
        return this;
      }
      public Builder SetCreator(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreator = true;
        result.creator_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreator(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreator &&
            result.creator_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.creator_ = global::hdsense.PBGameUser.CreateBuilder(result.creator_).MergeFrom(value).BuildPartial();
        } else {
          result.creator_ = value;
        }
        result.hasCreator = true;
        return this;
      }
      public Builder ClearCreator() {
        PrepareBuilder();
        result.hasCreator = false;
        result.creator_ = null;
        return this;
      }
      
      public bool HasAwardCount {
        get { return result.hasAwardCount; }
      }
      public int AwardCount {
        get { return result.AwardCount; }
        set { SetAwardCount(value); }
      }
      public Builder SetAwardCount(int value) {
        PrepareBuilder();
        result.hasAwardCount = true;
        result.awardCount_ = value;
        return this;
      }
      public Builder ClearAwardCount() {
        PrepareBuilder();
        result.hasAwardCount = false;
        result.awardCount_ = 10;
        return this;
      }
      
      public bool HasContestStatus {
        get { return result.hasContestStatus; }
      }
      public int ContestStatus {
        get { return result.ContestStatus; }
        set { SetContestStatus(value); }
      }
      public Builder SetContestStatus(int value) {
        PrepareBuilder();
        result.hasContestStatus = true;
        result.contestStatus_ = value;
        return this;
      }
      public Builder ClearContestStatus() {
        PrepareBuilder();
        result.hasContestStatus = false;
        result.contestStatus_ = 0;
        return this;
      }
      
      public bool HasContestCategory {
        get { return result.hasContestCategory; }
      }
      public string ContestCategory {
        get { return result.ContestCategory; }
        set { SetContestCategory(value); }
      }
      public Builder SetContestCategory(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestCategory = true;
        result.contestCategory_ = value;
        return this;
      }
      public Builder ClearContestCategory() {
        PrepareBuilder();
        result.hasContestCategory = false;
        result.contestCategory_ = "";
        return this;
      }
      
      public bool HasNormalVoterTime {
        get { return result.hasNormalVoterTime; }
      }
      public int NormalVoterTime {
        get { return result.NormalVoterTime; }
        set { SetNormalVoterTime(value); }
      }
      public Builder SetNormalVoterTime(int value) {
        PrepareBuilder();
        result.hasNormalVoterTime = true;
        result.normalVoterTime_ = value;
        return this;
      }
      public Builder ClearNormalVoterTime() {
        PrepareBuilder();
        result.hasNormalVoterTime = false;
        result.normalVoterTime_ = 1;
        return this;
      }
      
      public bool HasAdvanceVoterTime {
        get { return result.hasAdvanceVoterTime; }
      }
      public int AdvanceVoterTime {
        get { return result.AdvanceVoterTime; }
        set { SetAdvanceVoterTime(value); }
      }
      public Builder SetAdvanceVoterTime(int value) {
        PrepareBuilder();
        result.hasAdvanceVoterTime = true;
        result.advanceVoterTime_ = value;
        return this;
      }
      public Builder ClearAdvanceVoterTime() {
        PrepareBuilder();
        result.hasAdvanceVoterTime = false;
        result.advanceVoterTime_ = 5;
        return this;
      }
      
      public bool HasJudgerVoteTime {
        get { return result.hasJudgerVoteTime; }
      }
      public int JudgerVoteTime {
        get { return result.JudgerVoteTime; }
        set { SetJudgerVoteTime(value); }
      }
      public Builder SetJudgerVoteTime(int value) {
        PrepareBuilder();
        result.hasJudgerVoteTime = true;
        result.judgerVoteTime_ = value;
        return this;
      }
      public Builder ClearJudgerVoteTime() {
        PrepareBuilder();
        result.hasJudgerVoteTime = false;
        result.judgerVoteTime_ = 3;
        return this;
      }
      
      public bool HasNormalVoterWeigh {
        get { return result.hasNormalVoterWeigh; }
      }
      public int NormalVoterWeigh {
        get { return result.NormalVoterWeigh; }
        set { SetNormalVoterWeigh(value); }
      }
      public Builder SetNormalVoterWeigh(int value) {
        PrepareBuilder();
        result.hasNormalVoterWeigh = true;
        result.normalVoterWeigh_ = value;
        return this;
      }
      public Builder ClearNormalVoterWeigh() {
        PrepareBuilder();
        result.hasNormalVoterWeigh = false;
        result.normalVoterWeigh_ = 1;
        return this;
      }
      
      public bool HasAdvanceVoterWeigh {
        get { return result.hasAdvanceVoterWeigh; }
      }
      public int AdvanceVoterWeigh {
        get { return result.AdvanceVoterWeigh; }
        set { SetAdvanceVoterWeigh(value); }
      }
      public Builder SetAdvanceVoterWeigh(int value) {
        PrepareBuilder();
        result.hasAdvanceVoterWeigh = true;
        result.advanceVoterWeigh_ = value;
        return this;
      }
      public Builder ClearAdvanceVoterWeigh() {
        PrepareBuilder();
        result.hasAdvanceVoterWeigh = false;
        result.advanceVoterWeigh_ = 2;
        return this;
      }
      
      public bool HasJudgerVoteWeigh {
        get { return result.hasJudgerVoteWeigh; }
      }
      public int JudgerVoteWeigh {
        get { return result.JudgerVoteWeigh; }
        set { SetJudgerVoteWeigh(value); }
      }
      public Builder SetJudgerVoteWeigh(int value) {
        PrepareBuilder();
        result.hasJudgerVoteWeigh = true;
        result.judgerVoteWeigh_ = value;
        return this;
      }
      public Builder ClearJudgerVoteWeigh() {
        PrepareBuilder();
        result.hasJudgerVoteWeigh = false;
        result.judgerVoteWeigh_ = 10;
        return this;
      }
      
      public bool HasMaxOpusPerContest {
        get { return result.hasMaxOpusPerContest; }
      }
      public int MaxOpusPerContest {
        get { return result.MaxOpusPerContest; }
        set { SetMaxOpusPerContest(value); }
      }
      public Builder SetMaxOpusPerContest(int value) {
        PrepareBuilder();
        result.hasMaxOpusPerContest = true;
        result.maxOpusPerContest_ = value;
        return this;
      }
      public Builder ClearMaxOpusPerContest() {
        PrepareBuilder();
        result.hasMaxOpusPerContest = false;
        result.maxOpusPerContest_ = 2;
        return this;
      }
      
      public bool HasMaxVotePerOpus {
        get { return result.hasMaxVotePerOpus; }
      }
      public int MaxVotePerOpus {
        get { return result.MaxVotePerOpus; }
        set { SetMaxVotePerOpus(value); }
      }
      public Builder SetMaxVotePerOpus(int value) {
        PrepareBuilder();
        result.hasMaxVotePerOpus = true;
        result.maxVotePerOpus_ = value;
        return this;
      }
      public Builder ClearMaxVotePerOpus() {
        PrepareBuilder();
        result.hasMaxVotePerOpus = false;
        result.maxVotePerOpus_ = 3;
        return this;
      }
      
      public bool HasOpusId {
        get { return result.hasOpusId; }
      }
      public string OpusId {
        get { return result.OpusId; }
        set { SetOpusId(value); }
      }
      public Builder SetOpusId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusId = true;
        result.opusId_ = value;
        return this;
      }
      public Builder ClearOpusId() {
        PrepareBuilder();
        result.hasOpusId = false;
        result.opusId_ = "";
        return this;
      }
    }
    static PBContest() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBContestList : pb::GeneratedMessage<PBContestList, PBContestList.Builder> {
    private PBContestList() { }
    private static readonly PBContestList defaultInstance = new PBContestList().MakeReadOnly();
    private static readonly string[] _pBContestListFieldNames = new string[] { "contests" };
    private static readonly uint[] _pBContestListFieldTags = new uint[] { 10 };
    public static PBContestList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBContestList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBContestList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Group.internal__static_hdsense_PBContestList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBContestList, PBContestList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Group.internal__static_hdsense_PBContestList__FieldAccessorTable; }
    }
    
    public const int ContestsFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBContest> contests_ = new pbc::PopsicleList<global::hdsense.PBContest>();
    public scg::IList<global::hdsense.PBContest> ContestsList {
      get { return contests_; }
    }
    public int ContestsCount {
      get { return contests_.Count; }
    }
    public global::hdsense.PBContest GetContests(int index) {
      return contests_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBContest element in ContestsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBContestListFieldNames;
      if (contests_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], contests_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBContest element in ContestsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBContestList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContestList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContestList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBContestList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBContestList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContestList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBContestList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBContestList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBContestList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBContestList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBContestList MakeReadOnly() {
      contests_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBContestList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBContestList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBContestList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBContestList result;
      
      private PBContestList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBContestList original = result;
          result = new PBContestList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBContestList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBContestList.Descriptor; }
      }
      
      public override PBContestList DefaultInstanceForType {
        get { return global::hdsense.PBContestList.DefaultInstance; }
      }
      
      public override PBContestList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBContestList) {
          return MergeFrom((PBContestList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBContestList other) {
        if (other == global::hdsense.PBContestList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.contests_.Count != 0) {
          result.contests_.Add(other.contests_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBContestListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBContestListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.contests_, global::hdsense.PBContest.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBContest> ContestsList {
        get { return PrepareBuilder().contests_; }
      }
      public int ContestsCount {
        get { return result.ContestsCount; }
      }
      public global::hdsense.PBContest GetContests(int index) {
        return result.GetContests(index);
      }
      public Builder SetContests(int index, global::hdsense.PBContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contests_[index] = value;
        return this;
      }
      public Builder SetContests(int index, global::hdsense.PBContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contests_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContests(global::hdsense.PBContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contests_.Add(value);
        return this;
      }
      public Builder AddContests(global::hdsense.PBContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contests_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContests(scg::IEnumerable<global::hdsense.PBContest> values) {
        PrepareBuilder();
        result.contests_.Add(values);
        return this;
      }
      public Builder ClearContests() {
        PrepareBuilder();
        result.contests_.Clear();
        return this;
      }
    }
    static PBContestList() {
      object.ReferenceEquals(global::hdsense.Group.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
