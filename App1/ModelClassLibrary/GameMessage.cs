// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameMessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_DataQueryResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.DataQueryResponse, global::hdsense.DataQueryResponse.Builder> internal__static_hdsense_DataQueryResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameMessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFHYW1lTWVzc2FnZS5wcm90bxIHaGRzZW5zZRoTR2FtZUNvbnN0YW50cy5w" + 
          "cm90bxoPR2FtZUJhc2ljLnByb3RvGgpEcmF3LnByb3RvGglCQlMucHJvdG8a" + 
          "Ck9wdXMucHJvdG8aC1Bob3RvLnByb3RvGgpTaW5nLnByb3RvGgtHcm91cC5w" + 
          "cm90byKyCwoRRGF0YVF1ZXJ5UmVzcG9uc2USEgoKcmVzdWx0Q29kZRgBIAIo" + 
          "BRISCgp0b3RhbENvdW50GAIgASgFEg8KB3ZlcnNpb24YAyABKAUSIQoIZHJh" + 
          "d0RhdGEYFSADKAsyDy5oZHNlbnNlLlBCRHJhdxIjCgdtZXNzYWdlGCAgAygL" + 
          "MhIuaGRzZW5zZS5QQk1lc3NhZ2USKwoLbWVzc2FnZVN0YXQYISADKAsyFi5o" + 
          "ZHNlbnNlLlBCTWVzc2FnZVN0YXQSIQoIc2luZ0ZlZWQYKCABKAsyDy5oZHNl" + 
          "bnNlLlBCRmVlZBIdCgRmZWVkGCkgAygLMg8uaGRzZW5zZS5QQkZlZWQSJwoL" + 
          "Y29udGVzdExpc3QYKiADKAsyEi5oZHNlbnNlLlBCQ29udGVzdBIjCgdjb250" + 
          "ZXN0GCsgASgLMhIuaGRzZW5zZS5QQkNvbnRlc3QSJQoIYmJzQm9hcmQYMyAD" + 
          "KAsyEy5oZHNlbnNlLlBCQkJTQm9hcmQSIwoHYmJzUG9zdBg0IAMoCzISLmhk" + 
          "c2Vuc2UuUEJCQlNQb3N0EicKCWJic0FjdGlvbhg1IAMoCzIULmhkc2Vuc2Uu" + 
          "UEJCQlNBY3Rpb24SJwoLYmJzRHJhd0RhdGEYNiABKAsyEi5oZHNlbnNlLlBC" + 
          "QkJTRHJhdxIxChBiYnNQcml2aWxlZ2VMaXN0GDcgAygLMhcuaGRzZW5zZS5Q" + 
          "QkJCU1ByaXZpbGVnZRInCgtiYnNVc2VyTGlzdBg4IAMoCzISLmhkc2Vuc2Uu" + 
          "UEJCQlNVc2VyEioKDGJ1bGxldGluTGlzdBhLIAMoCzIULmhkc2Vuc2UuUEJC" + 
          "dWxsZXRpb24SIQoId2FsbExpc3QYUCADKAsyDy5oZHNlbnNlLlBCV2FsbBId" + 
          "CgR3YWxsGFEgASgLMg8uaGRzZW5zZS5QQldhbGwSJwoJdXNlclBob3RvGFIg" + 
          "ASgLMhQuaGRzZW5zZS5QQlVzZXJQaG90bxIrCg11c2VyUGhvdG9MaXN0GFMg" + 
          "AygLMhQuaGRzZW5zZS5QQlVzZXJQaG90bxIlCgh1c2VyTGlzdBhUIAMoCzIT" + 
          "Lmhkc2Vuc2UuUEJHYW1lVXNlchIhCgR1c2VyGFUgASgLMhMuaGRzZW5zZS5Q" + 
          "QkdhbWVVc2VyEhQKDHVzZXJSZWxhdGlvbhhWIAEoBRIdCgRvcHVzGFcgASgL" + 
          "Mg8uaGRzZW5zZS5QQk9wdXMSIQoIb3B1c0xpc3QYWCADKAsyDy5oZHNlbnNl" + 
          "LlBCT3B1cxIOCgZpZExpc3QYWiADKAkSIgoFc29uZ3MYZSABKAsyEy5oZHNl" + 
          "bnNlLlBCU29uZ0xpc3QSJwoJZ3Vlc3NSYW5rGHggASgLMhQuaGRzZW5zZS5Q" + 
          "Qkd1ZXNzUmFuaxIrCg1ndWVzc1JhbmtMaXN0GHkgAygLMhQuaGRzZW5zZS5Q" + 
          "Qkd1ZXNzUmFuaxItCgxndWVzc0NvbnRlc3QYeiABKAsyFy5oZHNlbnNlLlBC" + 
          "R3Vlc3NDb250ZXN0EjEKEGd1ZXNzQ29udGVzdExpc3QYeyADKAsyFy5oZHNl" + 
          "bnNlLlBCR3Vlc3NDb250ZXN0EiAKBWdyb3VwGJYBIAEoCzIQLmhkc2Vuc2Uu" + 
          "UEJHcm91cBIkCglncm91cExpc3QYlwEgAygLMhAuaGRzZW5zZS5QQkdyb3Vw" + 
          "EjYKD2dyb3VwTWVtYmVyTGlzdBiYASADKAsyHC5oZHNlbnNlLlBCR3JvdXBV" + 
          "c2Vyc0J5VGl0bGUSKwoKbm90aWNlTGlzdBiZASADKAsyFi5oZHNlbnNlLlBC" + 
          "R3JvdXBOb3RpY2USKgoGYmFkZ2VzGJsBIAMoCzIZLmhkc2Vuc2UuUEJJbnRL" + 
          "ZXlJbnRWYWx1ZRIMCgN1cmwYnAEgASgJEiwKCWdyb3VwUm9sZRidASADKAsy" + 
          "GC5oZHNlbnNlLlBCR3JvdXBVc2VyUm9sZUI+Ciljb20uaGRzZW5zZS5uZXR3" + 
          "b3JrLmdhbWUucHJvdG9jb2wubWVzc2FnZUIRR2FtZU1lc3NhZ2VQcm90b3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_DataQueryResponse__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_DataQueryResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.DataQueryResponse, global::hdsense.DataQueryResponse.Builder>(internal__static_hdsense_DataQueryResponse__Descriptor,
                new string[] { "ResultCode", "TotalCount", "Version", "DrawData", "Message", "MessageStat", "SingFeed", "Feed", "ContestList", "Contest", "BbsBoard", "BbsPost", "BbsAction", "BbsDrawData", "BbsPrivilegeList", "BbsUserList", "BulletinList", "WallList", "Wall", "UserPhoto", "UserPhotoList", "UserList", "User", "UserRelation", "Opus", "OpusList", "IdList", "Songs", "GuessRank", "GuessRankList", "GuessContest", "GuessContestList", "Group", "GroupList", "GroupMemberList", "NoticeList", "Badges", "Url", "GroupRole", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::hdsense.GameConstants.Descriptor, 
          global::hdsense.GameBasic.Descriptor, 
          global::hdsense.Draw.Descriptor, 
          global::hdsense.BBS.Descriptor, 
          global::hdsense.Opus.Descriptor, 
          global::hdsense.Photo.Descriptor, 
          global::hdsense.Sing.Descriptor, 
          global::hdsense.Group.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DataQueryResponse : pb::GeneratedMessage<DataQueryResponse, DataQueryResponse.Builder> {
    private DataQueryResponse() { }
    private static readonly DataQueryResponse defaultInstance = new DataQueryResponse().MakeReadOnly();
    private static readonly string[] _dataQueryResponseFieldNames = new string[] { "badges", "bbsAction", "bbsBoard", "bbsDrawData", "bbsPost", "bbsPrivilegeList", "bbsUserList", "bulletinList", "contest", "contestList", "drawData", "feed", "group", "groupList", "groupMemberList", "groupRole", "guessContest", "guessContestList", "guessRank", "guessRankList", "idList", "message", "messageStat", "noticeList", "opus", "opusList", "resultCode", "singFeed", "songs", "totalCount", "url", "user", "userList", "userPhoto", "userPhotoList", "userRelation", "version", "wall", "wallList" };
    private static readonly uint[] _dataQueryResponseFieldTags = new uint[] { 1242, 426, 410, 434, 418, 442, 450, 602, 346, 338, 170, 330, 1202, 1210, 1218, 1258, 978, 986, 962, 970, 722, 258, 266, 1226, 698, 706, 8, 322, 810, 16, 1250, 682, 674, 658, 666, 688, 24, 650, 642 };
    public static DataQueryResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DataQueryResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DataQueryResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameMessage.internal__static_hdsense_DataQueryResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DataQueryResponse, DataQueryResponse.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameMessage.internal__static_hdsense_DataQueryResponse__FieldAccessorTable; }
    }
    
    public const int ResultCodeFieldNumber = 1;
    private bool hasResultCode;
    private int resultCode_;
    public bool HasResultCode {
      get { return hasResultCode; }
    }
    public int ResultCode {
      get { return resultCode_; }
    }
    
    public const int TotalCountFieldNumber = 2;
    private bool hasTotalCount;
    private int totalCount_;
    public bool HasTotalCount {
      get { return hasTotalCount; }
    }
    public int TotalCount {
      get { return totalCount_; }
    }
    
    public const int VersionFieldNumber = 3;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int DrawDataFieldNumber = 21;
    private pbc::PopsicleList<global::hdsense.PBDraw> drawData_ = new pbc::PopsicleList<global::hdsense.PBDraw>();
    public scg::IList<global::hdsense.PBDraw> DrawDataList {
      get { return drawData_; }
    }
    public int DrawDataCount {
      get { return drawData_.Count; }
    }
    public global::hdsense.PBDraw GetDrawData(int index) {
      return drawData_[index];
    }
    
    public const int MessageFieldNumber = 32;
    private pbc::PopsicleList<global::hdsense.PBMessage> message_ = new pbc::PopsicleList<global::hdsense.PBMessage>();
    public scg::IList<global::hdsense.PBMessage> MessageList {
      get { return message_; }
    }
    public int MessageCount {
      get { return message_.Count; }
    }
    public global::hdsense.PBMessage GetMessage(int index) {
      return message_[index];
    }
    
    public const int MessageStatFieldNumber = 33;
    private pbc::PopsicleList<global::hdsense.PBMessageStat> messageStat_ = new pbc::PopsicleList<global::hdsense.PBMessageStat>();
    public scg::IList<global::hdsense.PBMessageStat> MessageStatList {
      get { return messageStat_; }
    }
    public int MessageStatCount {
      get { return messageStat_.Count; }
    }
    public global::hdsense.PBMessageStat GetMessageStat(int index) {
      return messageStat_[index];
    }
    
    public const int SingFeedFieldNumber = 40;
    private bool hasSingFeed;
    private global::hdsense.PBFeed singFeed_;
    public bool HasSingFeed {
      get { return hasSingFeed; }
    }
    public global::hdsense.PBFeed SingFeed {
      get { return singFeed_ ?? global::hdsense.PBFeed.DefaultInstance; }
    }
    
    public const int FeedFieldNumber = 41;
    private pbc::PopsicleList<global::hdsense.PBFeed> feed_ = new pbc::PopsicleList<global::hdsense.PBFeed>();
    public scg::IList<global::hdsense.PBFeed> FeedList {
      get { return feed_; }
    }
    public int FeedCount {
      get { return feed_.Count; }
    }
    public global::hdsense.PBFeed GetFeed(int index) {
      return feed_[index];
    }
    
    public const int ContestListFieldNumber = 42;
    private pbc::PopsicleList<global::hdsense.PBContest> contestList_ = new pbc::PopsicleList<global::hdsense.PBContest>();
    public scg::IList<global::hdsense.PBContest> ContestListList {
      get { return contestList_; }
    }
    public int ContestListCount {
      get { return contestList_.Count; }
    }
    public global::hdsense.PBContest GetContestList(int index) {
      return contestList_[index];
    }
    
    public const int ContestFieldNumber = 43;
    private bool hasContest;
    private global::hdsense.PBContest contest_;
    public bool HasContest {
      get { return hasContest; }
    }
    public global::hdsense.PBContest Contest {
      get { return contest_ ?? global::hdsense.PBContest.DefaultInstance; }
    }
    
    public const int BbsBoardFieldNumber = 51;
    private pbc::PopsicleList<global::hdsense.PBBBSBoard> bbsBoard_ = new pbc::PopsicleList<global::hdsense.PBBBSBoard>();
    public scg::IList<global::hdsense.PBBBSBoard> BbsBoardList {
      get { return bbsBoard_; }
    }
    public int BbsBoardCount {
      get { return bbsBoard_.Count; }
    }
    public global::hdsense.PBBBSBoard GetBbsBoard(int index) {
      return bbsBoard_[index];
    }
    
    public const int BbsPostFieldNumber = 52;
    private pbc::PopsicleList<global::hdsense.PBBBSPost> bbsPost_ = new pbc::PopsicleList<global::hdsense.PBBBSPost>();
    public scg::IList<global::hdsense.PBBBSPost> BbsPostList {
      get { return bbsPost_; }
    }
    public int BbsPostCount {
      get { return bbsPost_.Count; }
    }
    public global::hdsense.PBBBSPost GetBbsPost(int index) {
      return bbsPost_[index];
    }
    
    public const int BbsActionFieldNumber = 53;
    private pbc::PopsicleList<global::hdsense.PBBBSAction> bbsAction_ = new pbc::PopsicleList<global::hdsense.PBBBSAction>();
    public scg::IList<global::hdsense.PBBBSAction> BbsActionList {
      get { return bbsAction_; }
    }
    public int BbsActionCount {
      get { return bbsAction_.Count; }
    }
    public global::hdsense.PBBBSAction GetBbsAction(int index) {
      return bbsAction_[index];
    }
    
    public const int BbsDrawDataFieldNumber = 54;
    private bool hasBbsDrawData;
    private global::hdsense.PBBBSDraw bbsDrawData_;
    public bool HasBbsDrawData {
      get { return hasBbsDrawData; }
    }
    public global::hdsense.PBBBSDraw BbsDrawData {
      get { return bbsDrawData_ ?? global::hdsense.PBBBSDraw.DefaultInstance; }
    }
    
    public const int BbsPrivilegeListFieldNumber = 55;
    private pbc::PopsicleList<global::hdsense.PBBBSPrivilege> bbsPrivilegeList_ = new pbc::PopsicleList<global::hdsense.PBBBSPrivilege>();
    public scg::IList<global::hdsense.PBBBSPrivilege> BbsPrivilegeListList {
      get { return bbsPrivilegeList_; }
    }
    public int BbsPrivilegeListCount {
      get { return bbsPrivilegeList_.Count; }
    }
    public global::hdsense.PBBBSPrivilege GetBbsPrivilegeList(int index) {
      return bbsPrivilegeList_[index];
    }
    
    public const int BbsUserListFieldNumber = 56;
    private pbc::PopsicleList<global::hdsense.PBBBSUser> bbsUserList_ = new pbc::PopsicleList<global::hdsense.PBBBSUser>();
    public scg::IList<global::hdsense.PBBBSUser> BbsUserListList {
      get { return bbsUserList_; }
    }
    public int BbsUserListCount {
      get { return bbsUserList_.Count; }
    }
    public global::hdsense.PBBBSUser GetBbsUserList(int index) {
      return bbsUserList_[index];
    }
    
    public const int BulletinListFieldNumber = 75;
    private pbc::PopsicleList<global::hdsense.PBBulletion> bulletinList_ = new pbc::PopsicleList<global::hdsense.PBBulletion>();
    public scg::IList<global::hdsense.PBBulletion> BulletinListList {
      get { return bulletinList_; }
    }
    public int BulletinListCount {
      get { return bulletinList_.Count; }
    }
    public global::hdsense.PBBulletion GetBulletinList(int index) {
      return bulletinList_[index];
    }
    
    public const int WallListFieldNumber = 80;
    private pbc::PopsicleList<global::hdsense.PBWall> wallList_ = new pbc::PopsicleList<global::hdsense.PBWall>();
    public scg::IList<global::hdsense.PBWall> WallListList {
      get { return wallList_; }
    }
    public int WallListCount {
      get { return wallList_.Count; }
    }
    public global::hdsense.PBWall GetWallList(int index) {
      return wallList_[index];
    }
    
    public const int WallFieldNumber = 81;
    private bool hasWall;
    private global::hdsense.PBWall wall_;
    public bool HasWall {
      get { return hasWall; }
    }
    public global::hdsense.PBWall Wall {
      get { return wall_ ?? global::hdsense.PBWall.DefaultInstance; }
    }
    
    public const int UserPhotoFieldNumber = 82;
    private bool hasUserPhoto;
    private global::hdsense.PBUserPhoto userPhoto_;
    public bool HasUserPhoto {
      get { return hasUserPhoto; }
    }
    public global::hdsense.PBUserPhoto UserPhoto {
      get { return userPhoto_ ?? global::hdsense.PBUserPhoto.DefaultInstance; }
    }
    
    public const int UserPhotoListFieldNumber = 83;
    private pbc::PopsicleList<global::hdsense.PBUserPhoto> userPhotoList_ = new pbc::PopsicleList<global::hdsense.PBUserPhoto>();
    public scg::IList<global::hdsense.PBUserPhoto> UserPhotoListList {
      get { return userPhotoList_; }
    }
    public int UserPhotoListCount {
      get { return userPhotoList_.Count; }
    }
    public global::hdsense.PBUserPhoto GetUserPhotoList(int index) {
      return userPhotoList_[index];
    }
    
    public const int UserListFieldNumber = 84;
    private pbc::PopsicleList<global::hdsense.PBGameUser> userList_ = new pbc::PopsicleList<global::hdsense.PBGameUser>();
    public scg::IList<global::hdsense.PBGameUser> UserListList {
      get { return userList_; }
    }
    public int UserListCount {
      get { return userList_.Count; }
    }
    public global::hdsense.PBGameUser GetUserList(int index) {
      return userList_[index];
    }
    
    public const int UserFieldNumber = 85;
    private bool hasUser;
    private global::hdsense.PBGameUser user_;
    public bool HasUser {
      get { return hasUser; }
    }
    public global::hdsense.PBGameUser User {
      get { return user_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int UserRelationFieldNumber = 86;
    private bool hasUserRelation;
    private int userRelation_;
    public bool HasUserRelation {
      get { return hasUserRelation; }
    }
    public int UserRelation {
      get { return userRelation_; }
    }
    
    public const int OpusFieldNumber = 87;
    private bool hasOpus;
    private global::hdsense.PBOpus opus_;
    public bool HasOpus {
      get { return hasOpus; }
    }
    public global::hdsense.PBOpus Opus {
      get { return opus_ ?? global::hdsense.PBOpus.DefaultInstance; }
    }
    
    public const int OpusListFieldNumber = 88;
    private pbc::PopsicleList<global::hdsense.PBOpus> opusList_ = new pbc::PopsicleList<global::hdsense.PBOpus>();
    public scg::IList<global::hdsense.PBOpus> OpusListList {
      get { return opusList_; }
    }
    public int OpusListCount {
      get { return opusList_.Count; }
    }
    public global::hdsense.PBOpus GetOpusList(int index) {
      return opusList_[index];
    }
    
    public const int IdListFieldNumber = 90;
    private pbc::PopsicleList<string> idList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> IdListList {
      get { return pbc::Lists.AsReadOnly(idList_); }
    }
    public int IdListCount {
      get { return idList_.Count; }
    }
    public string GetIdList(int index) {
      return idList_[index];
    }
    
    public const int SongsFieldNumber = 101;
    private bool hasSongs;
    private global::hdsense.PBSongList songs_;
    public bool HasSongs {
      get { return hasSongs; }
    }
    public global::hdsense.PBSongList Songs {
      get { return songs_ ?? global::hdsense.PBSongList.DefaultInstance; }
    }
    
    public const int GuessRankFieldNumber = 120;
    private bool hasGuessRank;
    private global::hdsense.PBGuessRank guessRank_;
    public bool HasGuessRank {
      get { return hasGuessRank; }
    }
    public global::hdsense.PBGuessRank GuessRank {
      get { return guessRank_ ?? global::hdsense.PBGuessRank.DefaultInstance; }
    }
    
    public const int GuessRankListFieldNumber = 121;
    private pbc::PopsicleList<global::hdsense.PBGuessRank> guessRankList_ = new pbc::PopsicleList<global::hdsense.PBGuessRank>();
    public scg::IList<global::hdsense.PBGuessRank> GuessRankListList {
      get { return guessRankList_; }
    }
    public int GuessRankListCount {
      get { return guessRankList_.Count; }
    }
    public global::hdsense.PBGuessRank GetGuessRankList(int index) {
      return guessRankList_[index];
    }
    
    public const int GuessContestFieldNumber = 122;
    private bool hasGuessContest;
    private global::hdsense.PBGuessContest guessContest_;
    public bool HasGuessContest {
      get { return hasGuessContest; }
    }
    public global::hdsense.PBGuessContest GuessContest {
      get { return guessContest_ ?? global::hdsense.PBGuessContest.DefaultInstance; }
    }
    
    public const int GuessContestListFieldNumber = 123;
    private pbc::PopsicleList<global::hdsense.PBGuessContest> guessContestList_ = new pbc::PopsicleList<global::hdsense.PBGuessContest>();
    public scg::IList<global::hdsense.PBGuessContest> GuessContestListList {
      get { return guessContestList_; }
    }
    public int GuessContestListCount {
      get { return guessContestList_.Count; }
    }
    public global::hdsense.PBGuessContest GetGuessContestList(int index) {
      return guessContestList_[index];
    }
    
    public const int GroupFieldNumber = 150;
    private bool hasGroup;
    private global::hdsense.PBGroup group_;
    public bool HasGroup {
      get { return hasGroup; }
    }
    public global::hdsense.PBGroup Group {
      get { return group_ ?? global::hdsense.PBGroup.DefaultInstance; }
    }
    
    public const int GroupListFieldNumber = 151;
    private pbc::PopsicleList<global::hdsense.PBGroup> groupList_ = new pbc::PopsicleList<global::hdsense.PBGroup>();
    public scg::IList<global::hdsense.PBGroup> GroupListList {
      get { return groupList_; }
    }
    public int GroupListCount {
      get { return groupList_.Count; }
    }
    public global::hdsense.PBGroup GetGroupList(int index) {
      return groupList_[index];
    }
    
    public const int GroupMemberListFieldNumber = 152;
    private pbc::PopsicleList<global::hdsense.PBGroupUsersByTitle> groupMemberList_ = new pbc::PopsicleList<global::hdsense.PBGroupUsersByTitle>();
    public scg::IList<global::hdsense.PBGroupUsersByTitle> GroupMemberListList {
      get { return groupMemberList_; }
    }
    public int GroupMemberListCount {
      get { return groupMemberList_.Count; }
    }
    public global::hdsense.PBGroupUsersByTitle GetGroupMemberList(int index) {
      return groupMemberList_[index];
    }
    
    public const int NoticeListFieldNumber = 153;
    private pbc::PopsicleList<global::hdsense.PBGroupNotice> noticeList_ = new pbc::PopsicleList<global::hdsense.PBGroupNotice>();
    public scg::IList<global::hdsense.PBGroupNotice> NoticeListList {
      get { return noticeList_; }
    }
    public int NoticeListCount {
      get { return noticeList_.Count; }
    }
    public global::hdsense.PBGroupNotice GetNoticeList(int index) {
      return noticeList_[index];
    }
    
    public const int BadgesFieldNumber = 155;
    private pbc::PopsicleList<global::hdsense.PBIntKeyIntValue> badges_ = new pbc::PopsicleList<global::hdsense.PBIntKeyIntValue>();
    public scg::IList<global::hdsense.PBIntKeyIntValue> BadgesList {
      get { return badges_; }
    }
    public int BadgesCount {
      get { return badges_.Count; }
    }
    public global::hdsense.PBIntKeyIntValue GetBadges(int index) {
      return badges_[index];
    }
    
    public const int UrlFieldNumber = 156;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int GroupRoleFieldNumber = 157;
    private pbc::PopsicleList<global::hdsense.PBGroupUserRole> groupRole_ = new pbc::PopsicleList<global::hdsense.PBGroupUserRole>();
    public scg::IList<global::hdsense.PBGroupUserRole> GroupRoleList {
      get { return groupRole_; }
    }
    public int GroupRoleCount {
      get { return groupRole_.Count; }
    }
    public global::hdsense.PBGroupUserRole GetGroupRole(int index) {
      return groupRole_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResultCode) return false;
        foreach (global::hdsense.PBDraw element in DrawDataList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBMessage element in MessageList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBMessageStat element in MessageStatList) {
          if (!element.IsInitialized) return false;
        }
        if (HasSingFeed) {
          if (!SingFeed.IsInitialized) return false;
        }
        foreach (global::hdsense.PBFeed element in FeedList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBContest element in ContestListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasContest) {
          if (!Contest.IsInitialized) return false;
        }
        foreach (global::hdsense.PBBBSBoard element in BbsBoardList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBBBSPost element in BbsPostList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBBBSAction element in BbsActionList) {
          if (!element.IsInitialized) return false;
        }
        if (HasBbsDrawData) {
          if (!BbsDrawData.IsInitialized) return false;
        }
        foreach (global::hdsense.PBBBSPrivilege element in BbsPrivilegeListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBBBSUser element in BbsUserListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBBulletion element in BulletinListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBWall element in WallListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasWall) {
          if (!Wall.IsInitialized) return false;
        }
        if (HasUserPhoto) {
          if (!UserPhoto.IsInitialized) return false;
        }
        foreach (global::hdsense.PBUserPhoto element in UserPhotoListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGameUser element in UserListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasUser) {
          if (!User.IsInitialized) return false;
        }
        if (HasOpus) {
          if (!Opus.IsInitialized) return false;
        }
        foreach (global::hdsense.PBOpus element in OpusListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasSongs) {
          if (!Songs.IsInitialized) return false;
        }
        if (HasGuessRank) {
          if (!GuessRank.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGuessRank element in GuessRankListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasGuessContest) {
          if (!GuessContest.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGuessContest element in GuessContestListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasGroup) {
          if (!Group.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGroup element in GroupListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGroupUsersByTitle element in GroupMemberListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGroupNotice element in NoticeListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBIntKeyIntValue element in BadgesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBGroupUserRole element in GroupRoleList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dataQueryResponseFieldNames;
      if (hasResultCode) {
        output.WriteInt32(1, field_names[26], ResultCode);
      }
      if (hasTotalCount) {
        output.WriteInt32(2, field_names[29], TotalCount);
      }
      if (hasVersion) {
        output.WriteInt32(3, field_names[36], Version);
      }
      if (drawData_.Count > 0) {
        output.WriteMessageArray(21, field_names[10], drawData_);
      }
      if (message_.Count > 0) {
        output.WriteMessageArray(32, field_names[21], message_);
      }
      if (messageStat_.Count > 0) {
        output.WriteMessageArray(33, field_names[22], messageStat_);
      }
      if (hasSingFeed) {
        output.WriteMessage(40, field_names[27], SingFeed);
      }
      if (feed_.Count > 0) {
        output.WriteMessageArray(41, field_names[11], feed_);
      }
      if (contestList_.Count > 0) {
        output.WriteMessageArray(42, field_names[9], contestList_);
      }
      if (hasContest) {
        output.WriteMessage(43, field_names[8], Contest);
      }
      if (bbsBoard_.Count > 0) {
        output.WriteMessageArray(51, field_names[2], bbsBoard_);
      }
      if (bbsPost_.Count > 0) {
        output.WriteMessageArray(52, field_names[4], bbsPost_);
      }
      if (bbsAction_.Count > 0) {
        output.WriteMessageArray(53, field_names[1], bbsAction_);
      }
      if (hasBbsDrawData) {
        output.WriteMessage(54, field_names[3], BbsDrawData);
      }
      if (bbsPrivilegeList_.Count > 0) {
        output.WriteMessageArray(55, field_names[5], bbsPrivilegeList_);
      }
      if (bbsUserList_.Count > 0) {
        output.WriteMessageArray(56, field_names[6], bbsUserList_);
      }
      if (bulletinList_.Count > 0) {
        output.WriteMessageArray(75, field_names[7], bulletinList_);
      }
      if (wallList_.Count > 0) {
        output.WriteMessageArray(80, field_names[38], wallList_);
      }
      if (hasWall) {
        output.WriteMessage(81, field_names[37], Wall);
      }
      if (hasUserPhoto) {
        output.WriteMessage(82, field_names[33], UserPhoto);
      }
      if (userPhotoList_.Count > 0) {
        output.WriteMessageArray(83, field_names[34], userPhotoList_);
      }
      if (userList_.Count > 0) {
        output.WriteMessageArray(84, field_names[32], userList_);
      }
      if (hasUser) {
        output.WriteMessage(85, field_names[31], User);
      }
      if (hasUserRelation) {
        output.WriteInt32(86, field_names[35], UserRelation);
      }
      if (hasOpus) {
        output.WriteMessage(87, field_names[24], Opus);
      }
      if (opusList_.Count > 0) {
        output.WriteMessageArray(88, field_names[25], opusList_);
      }
      if (idList_.Count > 0) {
        output.WriteStringArray(90, field_names[20], idList_);
      }
      if (hasSongs) {
        output.WriteMessage(101, field_names[28], Songs);
      }
      if (hasGuessRank) {
        output.WriteMessage(120, field_names[18], GuessRank);
      }
      if (guessRankList_.Count > 0) {
        output.WriteMessageArray(121, field_names[19], guessRankList_);
      }
      if (hasGuessContest) {
        output.WriteMessage(122, field_names[16], GuessContest);
      }
      if (guessContestList_.Count > 0) {
        output.WriteMessageArray(123, field_names[17], guessContestList_);
      }
      if (hasGroup) {
        output.WriteMessage(150, field_names[12], Group);
      }
      if (groupList_.Count > 0) {
        output.WriteMessageArray(151, field_names[13], groupList_);
      }
      if (groupMemberList_.Count > 0) {
        output.WriteMessageArray(152, field_names[14], groupMemberList_);
      }
      if (noticeList_.Count > 0) {
        output.WriteMessageArray(153, field_names[23], noticeList_);
      }
      if (badges_.Count > 0) {
        output.WriteMessageArray(155, field_names[0], badges_);
      }
      if (hasUrl) {
        output.WriteString(156, field_names[30], Url);
      }
      if (groupRole_.Count > 0) {
        output.WriteMessageArray(157, field_names[15], groupRole_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResultCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ResultCode);
        }
        if (hasTotalCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, TotalCount);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Version);
        }
        foreach (global::hdsense.PBDraw element in DrawDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        foreach (global::hdsense.PBMessage element in MessageList) {
          size += pb::CodedOutputStream.ComputeMessageSize(32, element);
        }
        foreach (global::hdsense.PBMessageStat element in MessageStatList) {
          size += pb::CodedOutputStream.ComputeMessageSize(33, element);
        }
        if (hasSingFeed) {
          size += pb::CodedOutputStream.ComputeMessageSize(40, SingFeed);
        }
        foreach (global::hdsense.PBFeed element in FeedList) {
          size += pb::CodedOutputStream.ComputeMessageSize(41, element);
        }
        foreach (global::hdsense.PBContest element in ContestListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(42, element);
        }
        if (hasContest) {
          size += pb::CodedOutputStream.ComputeMessageSize(43, Contest);
        }
        foreach (global::hdsense.PBBBSBoard element in BbsBoardList) {
          size += pb::CodedOutputStream.ComputeMessageSize(51, element);
        }
        foreach (global::hdsense.PBBBSPost element in BbsPostList) {
          size += pb::CodedOutputStream.ComputeMessageSize(52, element);
        }
        foreach (global::hdsense.PBBBSAction element in BbsActionList) {
          size += pb::CodedOutputStream.ComputeMessageSize(53, element);
        }
        if (hasBbsDrawData) {
          size += pb::CodedOutputStream.ComputeMessageSize(54, BbsDrawData);
        }
        foreach (global::hdsense.PBBBSPrivilege element in BbsPrivilegeListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(55, element);
        }
        foreach (global::hdsense.PBBBSUser element in BbsUserListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(56, element);
        }
        foreach (global::hdsense.PBBulletion element in BulletinListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(75, element);
        }
        foreach (global::hdsense.PBWall element in WallListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(80, element);
        }
        if (hasWall) {
          size += pb::CodedOutputStream.ComputeMessageSize(81, Wall);
        }
        if (hasUserPhoto) {
          size += pb::CodedOutputStream.ComputeMessageSize(82, UserPhoto);
        }
        foreach (global::hdsense.PBUserPhoto element in UserPhotoListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(83, element);
        }
        foreach (global::hdsense.PBGameUser element in UserListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(84, element);
        }
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(85, User);
        }
        if (hasUserRelation) {
          size += pb::CodedOutputStream.ComputeInt32Size(86, UserRelation);
        }
        if (hasOpus) {
          size += pb::CodedOutputStream.ComputeMessageSize(87, Opus);
        }
        foreach (global::hdsense.PBOpus element in OpusListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(88, element);
        }
        {
          int dataSize = 0;
          foreach (string element in IdListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * idList_.Count;
        }
        if (hasSongs) {
          size += pb::CodedOutputStream.ComputeMessageSize(101, Songs);
        }
        if (hasGuessRank) {
          size += pb::CodedOutputStream.ComputeMessageSize(120, GuessRank);
        }
        foreach (global::hdsense.PBGuessRank element in GuessRankListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(121, element);
        }
        if (hasGuessContest) {
          size += pb::CodedOutputStream.ComputeMessageSize(122, GuessContest);
        }
        foreach (global::hdsense.PBGuessContest element in GuessContestListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(123, element);
        }
        if (hasGroup) {
          size += pb::CodedOutputStream.ComputeMessageSize(150, Group);
        }
        foreach (global::hdsense.PBGroup element in GroupListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(151, element);
        }
        foreach (global::hdsense.PBGroupUsersByTitle element in GroupMemberListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(152, element);
        }
        foreach (global::hdsense.PBGroupNotice element in NoticeListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(153, element);
        }
        foreach (global::hdsense.PBIntKeyIntValue element in BadgesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(155, element);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(156, Url);
        }
        foreach (global::hdsense.PBGroupUserRole element in GroupRoleList) {
          size += pb::CodedOutputStream.ComputeMessageSize(157, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DataQueryResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataQueryResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataQueryResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DataQueryResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DataQueryResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataQueryResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DataQueryResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DataQueryResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DataQueryResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DataQueryResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DataQueryResponse MakeReadOnly() {
      drawData_.MakeReadOnly();
      message_.MakeReadOnly();
      messageStat_.MakeReadOnly();
      feed_.MakeReadOnly();
      contestList_.MakeReadOnly();
      bbsBoard_.MakeReadOnly();
      bbsPost_.MakeReadOnly();
      bbsAction_.MakeReadOnly();
      bbsPrivilegeList_.MakeReadOnly();
      bbsUserList_.MakeReadOnly();
      bulletinList_.MakeReadOnly();
      wallList_.MakeReadOnly();
      userPhotoList_.MakeReadOnly();
      userList_.MakeReadOnly();
      opusList_.MakeReadOnly();
      idList_.MakeReadOnly();
      guessRankList_.MakeReadOnly();
      guessContestList_.MakeReadOnly();
      groupList_.MakeReadOnly();
      groupMemberList_.MakeReadOnly();
      noticeList_.MakeReadOnly();
      badges_.MakeReadOnly();
      groupRole_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DataQueryResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DataQueryResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DataQueryResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DataQueryResponse result;
      
      private DataQueryResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          DataQueryResponse original = result;
          result = new DataQueryResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DataQueryResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.DataQueryResponse.Descriptor; }
      }
      
      public override DataQueryResponse DefaultInstanceForType {
        get { return global::hdsense.DataQueryResponse.DefaultInstance; }
      }
      
      public override DataQueryResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DataQueryResponse) {
          return MergeFrom((DataQueryResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DataQueryResponse other) {
        if (other == global::hdsense.DataQueryResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResultCode) {
          ResultCode = other.ResultCode;
        }
        if (other.HasTotalCount) {
          TotalCount = other.TotalCount;
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.drawData_.Count != 0) {
          result.drawData_.Add(other.drawData_);
        }
        if (other.message_.Count != 0) {
          result.message_.Add(other.message_);
        }
        if (other.messageStat_.Count != 0) {
          result.messageStat_.Add(other.messageStat_);
        }
        if (other.HasSingFeed) {
          MergeSingFeed(other.SingFeed);
        }
        if (other.feed_.Count != 0) {
          result.feed_.Add(other.feed_);
        }
        if (other.contestList_.Count != 0) {
          result.contestList_.Add(other.contestList_);
        }
        if (other.HasContest) {
          MergeContest(other.Contest);
        }
        if (other.bbsBoard_.Count != 0) {
          result.bbsBoard_.Add(other.bbsBoard_);
        }
        if (other.bbsPost_.Count != 0) {
          result.bbsPost_.Add(other.bbsPost_);
        }
        if (other.bbsAction_.Count != 0) {
          result.bbsAction_.Add(other.bbsAction_);
        }
        if (other.HasBbsDrawData) {
          MergeBbsDrawData(other.BbsDrawData);
        }
        if (other.bbsPrivilegeList_.Count != 0) {
          result.bbsPrivilegeList_.Add(other.bbsPrivilegeList_);
        }
        if (other.bbsUserList_.Count != 0) {
          result.bbsUserList_.Add(other.bbsUserList_);
        }
        if (other.bulletinList_.Count != 0) {
          result.bulletinList_.Add(other.bulletinList_);
        }
        if (other.wallList_.Count != 0) {
          result.wallList_.Add(other.wallList_);
        }
        if (other.HasWall) {
          MergeWall(other.Wall);
        }
        if (other.HasUserPhoto) {
          MergeUserPhoto(other.UserPhoto);
        }
        if (other.userPhotoList_.Count != 0) {
          result.userPhotoList_.Add(other.userPhotoList_);
        }
        if (other.userList_.Count != 0) {
          result.userList_.Add(other.userList_);
        }
        if (other.HasUser) {
          MergeUser(other.User);
        }
        if (other.HasUserRelation) {
          UserRelation = other.UserRelation;
        }
        if (other.HasOpus) {
          MergeOpus(other.Opus);
        }
        if (other.opusList_.Count != 0) {
          result.opusList_.Add(other.opusList_);
        }
        if (other.idList_.Count != 0) {
          result.idList_.Add(other.idList_);
        }
        if (other.HasSongs) {
          MergeSongs(other.Songs);
        }
        if (other.HasGuessRank) {
          MergeGuessRank(other.GuessRank);
        }
        if (other.guessRankList_.Count != 0) {
          result.guessRankList_.Add(other.guessRankList_);
        }
        if (other.HasGuessContest) {
          MergeGuessContest(other.GuessContest);
        }
        if (other.guessContestList_.Count != 0) {
          result.guessContestList_.Add(other.guessContestList_);
        }
        if (other.HasGroup) {
          MergeGroup(other.Group);
        }
        if (other.groupList_.Count != 0) {
          result.groupList_.Add(other.groupList_);
        }
        if (other.groupMemberList_.Count != 0) {
          result.groupMemberList_.Add(other.groupMemberList_);
        }
        if (other.noticeList_.Count != 0) {
          result.noticeList_.Add(other.noticeList_);
        }
        if (other.badges_.Count != 0) {
          result.badges_.Add(other.badges_);
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.groupRole_.Count != 0) {
          result.groupRole_.Add(other.groupRole_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dataQueryResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dataQueryResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResultCode = input.ReadInt32(ref result.resultCode_);
              break;
            }
            case 16: {
              result.hasTotalCount = input.ReadInt32(ref result.totalCount_);
              break;
            }
            case 24: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 170: {
              input.ReadMessageArray(tag, field_name, result.drawData_, global::hdsense.PBDraw.DefaultInstance, extensionRegistry);
              break;
            }
            case 258: {
              input.ReadMessageArray(tag, field_name, result.message_, global::hdsense.PBMessage.DefaultInstance, extensionRegistry);
              break;
            }
            case 266: {
              input.ReadMessageArray(tag, field_name, result.messageStat_, global::hdsense.PBMessageStat.DefaultInstance, extensionRegistry);
              break;
            }
            case 322: {
              global::hdsense.PBFeed.Builder subBuilder = global::hdsense.PBFeed.CreateBuilder();
              if (result.hasSingFeed) {
                subBuilder.MergeFrom(SingFeed);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SingFeed = subBuilder.BuildPartial();
              break;
            }
            case 330: {
              input.ReadMessageArray(tag, field_name, result.feed_, global::hdsense.PBFeed.DefaultInstance, extensionRegistry);
              break;
            }
            case 338: {
              input.ReadMessageArray(tag, field_name, result.contestList_, global::hdsense.PBContest.DefaultInstance, extensionRegistry);
              break;
            }
            case 346: {
              global::hdsense.PBContest.Builder subBuilder = global::hdsense.PBContest.CreateBuilder();
              if (result.hasContest) {
                subBuilder.MergeFrom(Contest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Contest = subBuilder.BuildPartial();
              break;
            }
            case 410: {
              input.ReadMessageArray(tag, field_name, result.bbsBoard_, global::hdsense.PBBBSBoard.DefaultInstance, extensionRegistry);
              break;
            }
            case 418: {
              input.ReadMessageArray(tag, field_name, result.bbsPost_, global::hdsense.PBBBSPost.DefaultInstance, extensionRegistry);
              break;
            }
            case 426: {
              input.ReadMessageArray(tag, field_name, result.bbsAction_, global::hdsense.PBBBSAction.DefaultInstance, extensionRegistry);
              break;
            }
            case 434: {
              global::hdsense.PBBBSDraw.Builder subBuilder = global::hdsense.PBBBSDraw.CreateBuilder();
              if (result.hasBbsDrawData) {
                subBuilder.MergeFrom(BbsDrawData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BbsDrawData = subBuilder.BuildPartial();
              break;
            }
            case 442: {
              input.ReadMessageArray(tag, field_name, result.bbsPrivilegeList_, global::hdsense.PBBBSPrivilege.DefaultInstance, extensionRegistry);
              break;
            }
            case 450: {
              input.ReadMessageArray(tag, field_name, result.bbsUserList_, global::hdsense.PBBBSUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 602: {
              input.ReadMessageArray(tag, field_name, result.bulletinList_, global::hdsense.PBBulletion.DefaultInstance, extensionRegistry);
              break;
            }
            case 642: {
              input.ReadMessageArray(tag, field_name, result.wallList_, global::hdsense.PBWall.DefaultInstance, extensionRegistry);
              break;
            }
            case 650: {
              global::hdsense.PBWall.Builder subBuilder = global::hdsense.PBWall.CreateBuilder();
              if (result.hasWall) {
                subBuilder.MergeFrom(Wall);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Wall = subBuilder.BuildPartial();
              break;
            }
            case 658: {
              global::hdsense.PBUserPhoto.Builder subBuilder = global::hdsense.PBUserPhoto.CreateBuilder();
              if (result.hasUserPhoto) {
                subBuilder.MergeFrom(UserPhoto);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserPhoto = subBuilder.BuildPartial();
              break;
            }
            case 666: {
              input.ReadMessageArray(tag, field_name, result.userPhotoList_, global::hdsense.PBUserPhoto.DefaultInstance, extensionRegistry);
              break;
            }
            case 674: {
              input.ReadMessageArray(tag, field_name, result.userList_, global::hdsense.PBGameUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 682: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasUser) {
                subBuilder.MergeFrom(User);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              User = subBuilder.BuildPartial();
              break;
            }
            case 688: {
              result.hasUserRelation = input.ReadInt32(ref result.userRelation_);
              break;
            }
            case 698: {
              global::hdsense.PBOpus.Builder subBuilder = global::hdsense.PBOpus.CreateBuilder();
              if (result.hasOpus) {
                subBuilder.MergeFrom(Opus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Opus = subBuilder.BuildPartial();
              break;
            }
            case 706: {
              input.ReadMessageArray(tag, field_name, result.opusList_, global::hdsense.PBOpus.DefaultInstance, extensionRegistry);
              break;
            }
            case 722: {
              input.ReadStringArray(tag, field_name, result.idList_);
              break;
            }
            case 810: {
              global::hdsense.PBSongList.Builder subBuilder = global::hdsense.PBSongList.CreateBuilder();
              if (result.hasSongs) {
                subBuilder.MergeFrom(Songs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Songs = subBuilder.BuildPartial();
              break;
            }
            case 962: {
              global::hdsense.PBGuessRank.Builder subBuilder = global::hdsense.PBGuessRank.CreateBuilder();
              if (result.hasGuessRank) {
                subBuilder.MergeFrom(GuessRank);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuessRank = subBuilder.BuildPartial();
              break;
            }
            case 970: {
              input.ReadMessageArray(tag, field_name, result.guessRankList_, global::hdsense.PBGuessRank.DefaultInstance, extensionRegistry);
              break;
            }
            case 978: {
              global::hdsense.PBGuessContest.Builder subBuilder = global::hdsense.PBGuessContest.CreateBuilder();
              if (result.hasGuessContest) {
                subBuilder.MergeFrom(GuessContest);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuessContest = subBuilder.BuildPartial();
              break;
            }
            case 986: {
              input.ReadMessageArray(tag, field_name, result.guessContestList_, global::hdsense.PBGuessContest.DefaultInstance, extensionRegistry);
              break;
            }
            case 1202: {
              global::hdsense.PBGroup.Builder subBuilder = global::hdsense.PBGroup.CreateBuilder();
              if (result.hasGroup) {
                subBuilder.MergeFrom(Group);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Group = subBuilder.BuildPartial();
              break;
            }
            case 1210: {
              input.ReadMessageArray(tag, field_name, result.groupList_, global::hdsense.PBGroup.DefaultInstance, extensionRegistry);
              break;
            }
            case 1218: {
              input.ReadMessageArray(tag, field_name, result.groupMemberList_, global::hdsense.PBGroupUsersByTitle.DefaultInstance, extensionRegistry);
              break;
            }
            case 1226: {
              input.ReadMessageArray(tag, field_name, result.noticeList_, global::hdsense.PBGroupNotice.DefaultInstance, extensionRegistry);
              break;
            }
            case 1242: {
              input.ReadMessageArray(tag, field_name, result.badges_, global::hdsense.PBIntKeyIntValue.DefaultInstance, extensionRegistry);
              break;
            }
            case 1250: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 1258: {
              input.ReadMessageArray(tag, field_name, result.groupRole_, global::hdsense.PBGroupUserRole.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResultCode {
        get { return result.hasResultCode; }
      }
      public int ResultCode {
        get { return result.ResultCode; }
        set { SetResultCode(value); }
      }
      public Builder SetResultCode(int value) {
        PrepareBuilder();
        result.hasResultCode = true;
        result.resultCode_ = value;
        return this;
      }
      public Builder ClearResultCode() {
        PrepareBuilder();
        result.hasResultCode = false;
        result.resultCode_ = 0;
        return this;
      }
      
      public bool HasTotalCount {
        get { return result.hasTotalCount; }
      }
      public int TotalCount {
        get { return result.TotalCount; }
        set { SetTotalCount(value); }
      }
      public Builder SetTotalCount(int value) {
        PrepareBuilder();
        result.hasTotalCount = true;
        result.totalCount_ = value;
        return this;
      }
      public Builder ClearTotalCount() {
        PrepareBuilder();
        result.hasTotalCount = false;
        result.totalCount_ = 0;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBDraw> DrawDataList {
        get { return PrepareBuilder().drawData_; }
      }
      public int DrawDataCount {
        get { return result.DrawDataCount; }
      }
      public global::hdsense.PBDraw GetDrawData(int index) {
        return result.GetDrawData(index);
      }
      public Builder SetDrawData(int index, global::hdsense.PBDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_[index] = value;
        return this;
      }
      public Builder SetDrawData(int index, global::hdsense.PBDraw.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_.Add(value);
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDraw.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawData(scg::IEnumerable<global::hdsense.PBDraw> values) {
        PrepareBuilder();
        result.drawData_.Add(values);
        return this;
      }
      public Builder ClearDrawData() {
        PrepareBuilder();
        result.drawData_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBMessage> MessageList {
        get { return PrepareBuilder().message_; }
      }
      public int MessageCount {
        get { return result.MessageCount; }
      }
      public global::hdsense.PBMessage GetMessage(int index) {
        return result.GetMessage(index);
      }
      public Builder SetMessage(int index, global::hdsense.PBMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.message_[index] = value;
        return this;
      }
      public Builder SetMessage(int index, global::hdsense.PBMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.message_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMessage(global::hdsense.PBMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.message_.Add(value);
        return this;
      }
      public Builder AddMessage(global::hdsense.PBMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.message_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMessage(scg::IEnumerable<global::hdsense.PBMessage> values) {
        PrepareBuilder();
        result.message_.Add(values);
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.message_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBMessageStat> MessageStatList {
        get { return PrepareBuilder().messageStat_; }
      }
      public int MessageStatCount {
        get { return result.MessageStatCount; }
      }
      public global::hdsense.PBMessageStat GetMessageStat(int index) {
        return result.GetMessageStat(index);
      }
      public Builder SetMessageStat(int index, global::hdsense.PBMessageStat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.messageStat_[index] = value;
        return this;
      }
      public Builder SetMessageStat(int index, global::hdsense.PBMessageStat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.messageStat_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMessageStat(global::hdsense.PBMessageStat value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.messageStat_.Add(value);
        return this;
      }
      public Builder AddMessageStat(global::hdsense.PBMessageStat.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.messageStat_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMessageStat(scg::IEnumerable<global::hdsense.PBMessageStat> values) {
        PrepareBuilder();
        result.messageStat_.Add(values);
        return this;
      }
      public Builder ClearMessageStat() {
        PrepareBuilder();
        result.messageStat_.Clear();
        return this;
      }
      
      public bool HasSingFeed {
       get { return result.hasSingFeed; }
      }
      public global::hdsense.PBFeed SingFeed {
        get { return result.SingFeed; }
        set { SetSingFeed(value); }
      }
      public Builder SetSingFeed(global::hdsense.PBFeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSingFeed = true;
        result.singFeed_ = value;
        return this;
      }
      public Builder SetSingFeed(global::hdsense.PBFeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSingFeed = true;
        result.singFeed_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSingFeed(global::hdsense.PBFeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSingFeed &&
            result.singFeed_ != global::hdsense.PBFeed.DefaultInstance) {
            result.singFeed_ = global::hdsense.PBFeed.CreateBuilder(result.singFeed_).MergeFrom(value).BuildPartial();
        } else {
          result.singFeed_ = value;
        }
        result.hasSingFeed = true;
        return this;
      }
      public Builder ClearSingFeed() {
        PrepareBuilder();
        result.hasSingFeed = false;
        result.singFeed_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBFeed> FeedList {
        get { return PrepareBuilder().feed_; }
      }
      public int FeedCount {
        get { return result.FeedCount; }
      }
      public global::hdsense.PBFeed GetFeed(int index) {
        return result.GetFeed(index);
      }
      public Builder SetFeed(int index, global::hdsense.PBFeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.feed_[index] = value;
        return this;
      }
      public Builder SetFeed(int index, global::hdsense.PBFeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.feed_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFeed(global::hdsense.PBFeed value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.feed_.Add(value);
        return this;
      }
      public Builder AddFeed(global::hdsense.PBFeed.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.feed_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFeed(scg::IEnumerable<global::hdsense.PBFeed> values) {
        PrepareBuilder();
        result.feed_.Add(values);
        return this;
      }
      public Builder ClearFeed() {
        PrepareBuilder();
        result.feed_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBContest> ContestListList {
        get { return PrepareBuilder().contestList_; }
      }
      public int ContestListCount {
        get { return result.ContestListCount; }
      }
      public global::hdsense.PBContest GetContestList(int index) {
        return result.GetContestList(index);
      }
      public Builder SetContestList(int index, global::hdsense.PBContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contestList_[index] = value;
        return this;
      }
      public Builder SetContestList(int index, global::hdsense.PBContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contestList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContestList(global::hdsense.PBContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contestList_.Add(value);
        return this;
      }
      public Builder AddContestList(global::hdsense.PBContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contestList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContestList(scg::IEnumerable<global::hdsense.PBContest> values) {
        PrepareBuilder();
        result.contestList_.Add(values);
        return this;
      }
      public Builder ClearContestList() {
        PrepareBuilder();
        result.contestList_.Clear();
        return this;
      }
      
      public bool HasContest {
       get { return result.hasContest; }
      }
      public global::hdsense.PBContest Contest {
        get { return result.Contest; }
        set { SetContest(value); }
      }
      public Builder SetContest(global::hdsense.PBContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContest = true;
        result.contest_ = value;
        return this;
      }
      public Builder SetContest(global::hdsense.PBContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContest = true;
        result.contest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContest(global::hdsense.PBContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContest &&
            result.contest_ != global::hdsense.PBContest.DefaultInstance) {
            result.contest_ = global::hdsense.PBContest.CreateBuilder(result.contest_).MergeFrom(value).BuildPartial();
        } else {
          result.contest_ = value;
        }
        result.hasContest = true;
        return this;
      }
      public Builder ClearContest() {
        PrepareBuilder();
        result.hasContest = false;
        result.contest_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBBSBoard> BbsBoardList {
        get { return PrepareBuilder().bbsBoard_; }
      }
      public int BbsBoardCount {
        get { return result.BbsBoardCount; }
      }
      public global::hdsense.PBBBSBoard GetBbsBoard(int index) {
        return result.GetBbsBoard(index);
      }
      public Builder SetBbsBoard(int index, global::hdsense.PBBBSBoard value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsBoard_[index] = value;
        return this;
      }
      public Builder SetBbsBoard(int index, global::hdsense.PBBBSBoard.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsBoard_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBbsBoard(global::hdsense.PBBBSBoard value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsBoard_.Add(value);
        return this;
      }
      public Builder AddBbsBoard(global::hdsense.PBBBSBoard.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsBoard_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBbsBoard(scg::IEnumerable<global::hdsense.PBBBSBoard> values) {
        PrepareBuilder();
        result.bbsBoard_.Add(values);
        return this;
      }
      public Builder ClearBbsBoard() {
        PrepareBuilder();
        result.bbsBoard_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBBSPost> BbsPostList {
        get { return PrepareBuilder().bbsPost_; }
      }
      public int BbsPostCount {
        get { return result.BbsPostCount; }
      }
      public global::hdsense.PBBBSPost GetBbsPost(int index) {
        return result.GetBbsPost(index);
      }
      public Builder SetBbsPost(int index, global::hdsense.PBBBSPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsPost_[index] = value;
        return this;
      }
      public Builder SetBbsPost(int index, global::hdsense.PBBBSPost.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsPost_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBbsPost(global::hdsense.PBBBSPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsPost_.Add(value);
        return this;
      }
      public Builder AddBbsPost(global::hdsense.PBBBSPost.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsPost_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBbsPost(scg::IEnumerable<global::hdsense.PBBBSPost> values) {
        PrepareBuilder();
        result.bbsPost_.Add(values);
        return this;
      }
      public Builder ClearBbsPost() {
        PrepareBuilder();
        result.bbsPost_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBBSAction> BbsActionList {
        get { return PrepareBuilder().bbsAction_; }
      }
      public int BbsActionCount {
        get { return result.BbsActionCount; }
      }
      public global::hdsense.PBBBSAction GetBbsAction(int index) {
        return result.GetBbsAction(index);
      }
      public Builder SetBbsAction(int index, global::hdsense.PBBBSAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsAction_[index] = value;
        return this;
      }
      public Builder SetBbsAction(int index, global::hdsense.PBBBSAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsAction_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBbsAction(global::hdsense.PBBBSAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsAction_.Add(value);
        return this;
      }
      public Builder AddBbsAction(global::hdsense.PBBBSAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsAction_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBbsAction(scg::IEnumerable<global::hdsense.PBBBSAction> values) {
        PrepareBuilder();
        result.bbsAction_.Add(values);
        return this;
      }
      public Builder ClearBbsAction() {
        PrepareBuilder();
        result.bbsAction_.Clear();
        return this;
      }
      
      public bool HasBbsDrawData {
       get { return result.hasBbsDrawData; }
      }
      public global::hdsense.PBBBSDraw BbsDrawData {
        get { return result.BbsDrawData; }
        set { SetBbsDrawData(value); }
      }
      public Builder SetBbsDrawData(global::hdsense.PBBBSDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBbsDrawData = true;
        result.bbsDrawData_ = value;
        return this;
      }
      public Builder SetBbsDrawData(global::hdsense.PBBBSDraw.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBbsDrawData = true;
        result.bbsDrawData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBbsDrawData(global::hdsense.PBBBSDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBbsDrawData &&
            result.bbsDrawData_ != global::hdsense.PBBBSDraw.DefaultInstance) {
            result.bbsDrawData_ = global::hdsense.PBBBSDraw.CreateBuilder(result.bbsDrawData_).MergeFrom(value).BuildPartial();
        } else {
          result.bbsDrawData_ = value;
        }
        result.hasBbsDrawData = true;
        return this;
      }
      public Builder ClearBbsDrawData() {
        PrepareBuilder();
        result.hasBbsDrawData = false;
        result.bbsDrawData_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBBSPrivilege> BbsPrivilegeListList {
        get { return PrepareBuilder().bbsPrivilegeList_; }
      }
      public int BbsPrivilegeListCount {
        get { return result.BbsPrivilegeListCount; }
      }
      public global::hdsense.PBBBSPrivilege GetBbsPrivilegeList(int index) {
        return result.GetBbsPrivilegeList(index);
      }
      public Builder SetBbsPrivilegeList(int index, global::hdsense.PBBBSPrivilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsPrivilegeList_[index] = value;
        return this;
      }
      public Builder SetBbsPrivilegeList(int index, global::hdsense.PBBBSPrivilege.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsPrivilegeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBbsPrivilegeList(global::hdsense.PBBBSPrivilege value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsPrivilegeList_.Add(value);
        return this;
      }
      public Builder AddBbsPrivilegeList(global::hdsense.PBBBSPrivilege.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsPrivilegeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBbsPrivilegeList(scg::IEnumerable<global::hdsense.PBBBSPrivilege> values) {
        PrepareBuilder();
        result.bbsPrivilegeList_.Add(values);
        return this;
      }
      public Builder ClearBbsPrivilegeList() {
        PrepareBuilder();
        result.bbsPrivilegeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBBSUser> BbsUserListList {
        get { return PrepareBuilder().bbsUserList_; }
      }
      public int BbsUserListCount {
        get { return result.BbsUserListCount; }
      }
      public global::hdsense.PBBBSUser GetBbsUserList(int index) {
        return result.GetBbsUserList(index);
      }
      public Builder SetBbsUserList(int index, global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsUserList_[index] = value;
        return this;
      }
      public Builder SetBbsUserList(int index, global::hdsense.PBBBSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsUserList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBbsUserList(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bbsUserList_.Add(value);
        return this;
      }
      public Builder AddBbsUserList(global::hdsense.PBBBSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bbsUserList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBbsUserList(scg::IEnumerable<global::hdsense.PBBBSUser> values) {
        PrepareBuilder();
        result.bbsUserList_.Add(values);
        return this;
      }
      public Builder ClearBbsUserList() {
        PrepareBuilder();
        result.bbsUserList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBulletion> BulletinListList {
        get { return PrepareBuilder().bulletinList_; }
      }
      public int BulletinListCount {
        get { return result.BulletinListCount; }
      }
      public global::hdsense.PBBulletion GetBulletinList(int index) {
        return result.GetBulletinList(index);
      }
      public Builder SetBulletinList(int index, global::hdsense.PBBulletion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bulletinList_[index] = value;
        return this;
      }
      public Builder SetBulletinList(int index, global::hdsense.PBBulletion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bulletinList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBulletinList(global::hdsense.PBBulletion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bulletinList_.Add(value);
        return this;
      }
      public Builder AddBulletinList(global::hdsense.PBBulletion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bulletinList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBulletinList(scg::IEnumerable<global::hdsense.PBBulletion> values) {
        PrepareBuilder();
        result.bulletinList_.Add(values);
        return this;
      }
      public Builder ClearBulletinList() {
        PrepareBuilder();
        result.bulletinList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBWall> WallListList {
        get { return PrepareBuilder().wallList_; }
      }
      public int WallListCount {
        get { return result.WallListCount; }
      }
      public global::hdsense.PBWall GetWallList(int index) {
        return result.GetWallList(index);
      }
      public Builder SetWallList(int index, global::hdsense.PBWall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wallList_[index] = value;
        return this;
      }
      public Builder SetWallList(int index, global::hdsense.PBWall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wallList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddWallList(global::hdsense.PBWall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.wallList_.Add(value);
        return this;
      }
      public Builder AddWallList(global::hdsense.PBWall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.wallList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeWallList(scg::IEnumerable<global::hdsense.PBWall> values) {
        PrepareBuilder();
        result.wallList_.Add(values);
        return this;
      }
      public Builder ClearWallList() {
        PrepareBuilder();
        result.wallList_.Clear();
        return this;
      }
      
      public bool HasWall {
       get { return result.hasWall; }
      }
      public global::hdsense.PBWall Wall {
        get { return result.Wall; }
        set { SetWall(value); }
      }
      public Builder SetWall(global::hdsense.PBWall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWall = true;
        result.wall_ = value;
        return this;
      }
      public Builder SetWall(global::hdsense.PBWall.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWall = true;
        result.wall_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWall(global::hdsense.PBWall value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWall &&
            result.wall_ != global::hdsense.PBWall.DefaultInstance) {
            result.wall_ = global::hdsense.PBWall.CreateBuilder(result.wall_).MergeFrom(value).BuildPartial();
        } else {
          result.wall_ = value;
        }
        result.hasWall = true;
        return this;
      }
      public Builder ClearWall() {
        PrepareBuilder();
        result.hasWall = false;
        result.wall_ = null;
        return this;
      }
      
      public bool HasUserPhoto {
       get { return result.hasUserPhoto; }
      }
      public global::hdsense.PBUserPhoto UserPhoto {
        get { return result.UserPhoto; }
        set { SetUserPhoto(value); }
      }
      public Builder SetUserPhoto(global::hdsense.PBUserPhoto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserPhoto = true;
        result.userPhoto_ = value;
        return this;
      }
      public Builder SetUserPhoto(global::hdsense.PBUserPhoto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserPhoto = true;
        result.userPhoto_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserPhoto(global::hdsense.PBUserPhoto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserPhoto &&
            result.userPhoto_ != global::hdsense.PBUserPhoto.DefaultInstance) {
            result.userPhoto_ = global::hdsense.PBUserPhoto.CreateBuilder(result.userPhoto_).MergeFrom(value).BuildPartial();
        } else {
          result.userPhoto_ = value;
        }
        result.hasUserPhoto = true;
        return this;
      }
      public Builder ClearUserPhoto() {
        PrepareBuilder();
        result.hasUserPhoto = false;
        result.userPhoto_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBUserPhoto> UserPhotoListList {
        get { return PrepareBuilder().userPhotoList_; }
      }
      public int UserPhotoListCount {
        get { return result.UserPhotoListCount; }
      }
      public global::hdsense.PBUserPhoto GetUserPhotoList(int index) {
        return result.GetUserPhotoList(index);
      }
      public Builder SetUserPhotoList(int index, global::hdsense.PBUserPhoto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userPhotoList_[index] = value;
        return this;
      }
      public Builder SetUserPhotoList(int index, global::hdsense.PBUserPhoto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userPhotoList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserPhotoList(global::hdsense.PBUserPhoto value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userPhotoList_.Add(value);
        return this;
      }
      public Builder AddUserPhotoList(global::hdsense.PBUserPhoto.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userPhotoList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserPhotoList(scg::IEnumerable<global::hdsense.PBUserPhoto> values) {
        PrepareBuilder();
        result.userPhotoList_.Add(values);
        return this;
      }
      public Builder ClearUserPhotoList() {
        PrepareBuilder();
        result.userPhotoList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGameUser> UserListList {
        get { return PrepareBuilder().userList_; }
      }
      public int UserListCount {
        get { return result.UserListCount; }
      }
      public global::hdsense.PBGameUser GetUserList(int index) {
        return result.GetUserList(index);
      }
      public Builder SetUserList(int index, global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userList_[index] = value;
        return this;
      }
      public Builder SetUserList(int index, global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserList(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userList_.Add(value);
        return this;
      }
      public Builder AddUserList(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserList(scg::IEnumerable<global::hdsense.PBGameUser> values) {
        PrepareBuilder();
        result.userList_.Add(values);
        return this;
      }
      public Builder ClearUserList() {
        PrepareBuilder();
        result.userList_.Clear();
        return this;
      }
      
      public bool HasUser {
       get { return result.hasUser; }
      }
      public global::hdsense.PBGameUser User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder SetUser(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUser &&
            result.user_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.user_ = global::hdsense.PBGameUser.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
        } else {
          result.user_ = value;
        }
        result.hasUser = true;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = null;
        return this;
      }
      
      public bool HasUserRelation {
        get { return result.hasUserRelation; }
      }
      public int UserRelation {
        get { return result.UserRelation; }
        set { SetUserRelation(value); }
      }
      public Builder SetUserRelation(int value) {
        PrepareBuilder();
        result.hasUserRelation = true;
        result.userRelation_ = value;
        return this;
      }
      public Builder ClearUserRelation() {
        PrepareBuilder();
        result.hasUserRelation = false;
        result.userRelation_ = 0;
        return this;
      }
      
      public bool HasOpus {
       get { return result.hasOpus; }
      }
      public global::hdsense.PBOpus Opus {
        get { return result.Opus; }
        set { SetOpus(value); }
      }
      public Builder SetOpus(global::hdsense.PBOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpus = true;
        result.opus_ = value;
        return this;
      }
      public Builder SetOpus(global::hdsense.PBOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOpus = true;
        result.opus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOpus(global::hdsense.PBOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOpus &&
            result.opus_ != global::hdsense.PBOpus.DefaultInstance) {
            result.opus_ = global::hdsense.PBOpus.CreateBuilder(result.opus_).MergeFrom(value).BuildPartial();
        } else {
          result.opus_ = value;
        }
        result.hasOpus = true;
        return this;
      }
      public Builder ClearOpus() {
        PrepareBuilder();
        result.hasOpus = false;
        result.opus_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBOpus> OpusListList {
        get { return PrepareBuilder().opusList_; }
      }
      public int OpusListCount {
        get { return result.OpusListCount; }
      }
      public global::hdsense.PBOpus GetOpusList(int index) {
        return result.GetOpusList(index);
      }
      public Builder SetOpusList(int index, global::hdsense.PBOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opusList_[index] = value;
        return this;
      }
      public Builder SetOpusList(int index, global::hdsense.PBOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.opusList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOpusList(global::hdsense.PBOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opusList_.Add(value);
        return this;
      }
      public Builder AddOpusList(global::hdsense.PBOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.opusList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOpusList(scg::IEnumerable<global::hdsense.PBOpus> values) {
        PrepareBuilder();
        result.opusList_.Add(values);
        return this;
      }
      public Builder ClearOpusList() {
        PrepareBuilder();
        result.opusList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> IdListList {
        get { return PrepareBuilder().idList_; }
      }
      public int IdListCount {
        get { return result.IdListCount; }
      }
      public string GetIdList(int index) {
        return result.GetIdList(index);
      }
      public Builder SetIdList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.idList_[index] = value;
        return this;
      }
      public Builder AddIdList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.idList_.Add(value);
        return this;
      }
      public Builder AddRangeIdList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.idList_.Add(values);
        return this;
      }
      public Builder ClearIdList() {
        PrepareBuilder();
        result.idList_.Clear();
        return this;
      }
      
      public bool HasSongs {
       get { return result.hasSongs; }
      }
      public global::hdsense.PBSongList Songs {
        get { return result.Songs; }
        set { SetSongs(value); }
      }
      public Builder SetSongs(global::hdsense.PBSongList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSongs = true;
        result.songs_ = value;
        return this;
      }
      public Builder SetSongs(global::hdsense.PBSongList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSongs = true;
        result.songs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSongs(global::hdsense.PBSongList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSongs &&
            result.songs_ != global::hdsense.PBSongList.DefaultInstance) {
            result.songs_ = global::hdsense.PBSongList.CreateBuilder(result.songs_).MergeFrom(value).BuildPartial();
        } else {
          result.songs_ = value;
        }
        result.hasSongs = true;
        return this;
      }
      public Builder ClearSongs() {
        PrepareBuilder();
        result.hasSongs = false;
        result.songs_ = null;
        return this;
      }
      
      public bool HasGuessRank {
       get { return result.hasGuessRank; }
      }
      public global::hdsense.PBGuessRank GuessRank {
        get { return result.GuessRank; }
        set { SetGuessRank(value); }
      }
      public Builder SetGuessRank(global::hdsense.PBGuessRank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuessRank = true;
        result.guessRank_ = value;
        return this;
      }
      public Builder SetGuessRank(global::hdsense.PBGuessRank.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuessRank = true;
        result.guessRank_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuessRank(global::hdsense.PBGuessRank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuessRank &&
            result.guessRank_ != global::hdsense.PBGuessRank.DefaultInstance) {
            result.guessRank_ = global::hdsense.PBGuessRank.CreateBuilder(result.guessRank_).MergeFrom(value).BuildPartial();
        } else {
          result.guessRank_ = value;
        }
        result.hasGuessRank = true;
        return this;
      }
      public Builder ClearGuessRank() {
        PrepareBuilder();
        result.hasGuessRank = false;
        result.guessRank_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGuessRank> GuessRankListList {
        get { return PrepareBuilder().guessRankList_; }
      }
      public int GuessRankListCount {
        get { return result.GuessRankListCount; }
      }
      public global::hdsense.PBGuessRank GetGuessRankList(int index) {
        return result.GetGuessRankList(index);
      }
      public Builder SetGuessRankList(int index, global::hdsense.PBGuessRank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guessRankList_[index] = value;
        return this;
      }
      public Builder SetGuessRankList(int index, global::hdsense.PBGuessRank.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guessRankList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGuessRankList(global::hdsense.PBGuessRank value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guessRankList_.Add(value);
        return this;
      }
      public Builder AddGuessRankList(global::hdsense.PBGuessRank.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guessRankList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGuessRankList(scg::IEnumerable<global::hdsense.PBGuessRank> values) {
        PrepareBuilder();
        result.guessRankList_.Add(values);
        return this;
      }
      public Builder ClearGuessRankList() {
        PrepareBuilder();
        result.guessRankList_.Clear();
        return this;
      }
      
      public bool HasGuessContest {
       get { return result.hasGuessContest; }
      }
      public global::hdsense.PBGuessContest GuessContest {
        get { return result.GuessContest; }
        set { SetGuessContest(value); }
      }
      public Builder SetGuessContest(global::hdsense.PBGuessContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuessContest = true;
        result.guessContest_ = value;
        return this;
      }
      public Builder SetGuessContest(global::hdsense.PBGuessContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuessContest = true;
        result.guessContest_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuessContest(global::hdsense.PBGuessContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuessContest &&
            result.guessContest_ != global::hdsense.PBGuessContest.DefaultInstance) {
            result.guessContest_ = global::hdsense.PBGuessContest.CreateBuilder(result.guessContest_).MergeFrom(value).BuildPartial();
        } else {
          result.guessContest_ = value;
        }
        result.hasGuessContest = true;
        return this;
      }
      public Builder ClearGuessContest() {
        PrepareBuilder();
        result.hasGuessContest = false;
        result.guessContest_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGuessContest> GuessContestListList {
        get { return PrepareBuilder().guessContestList_; }
      }
      public int GuessContestListCount {
        get { return result.GuessContestListCount; }
      }
      public global::hdsense.PBGuessContest GetGuessContestList(int index) {
        return result.GetGuessContestList(index);
      }
      public Builder SetGuessContestList(int index, global::hdsense.PBGuessContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guessContestList_[index] = value;
        return this;
      }
      public Builder SetGuessContestList(int index, global::hdsense.PBGuessContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guessContestList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGuessContestList(global::hdsense.PBGuessContest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.guessContestList_.Add(value);
        return this;
      }
      public Builder AddGuessContestList(global::hdsense.PBGuessContest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.guessContestList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGuessContestList(scg::IEnumerable<global::hdsense.PBGuessContest> values) {
        PrepareBuilder();
        result.guessContestList_.Add(values);
        return this;
      }
      public Builder ClearGuessContestList() {
        PrepareBuilder();
        result.guessContestList_.Clear();
        return this;
      }
      
      public bool HasGroup {
       get { return result.hasGroup; }
      }
      public global::hdsense.PBGroup Group {
        get { return result.Group; }
        set { SetGroup(value); }
      }
      public Builder SetGroup(global::hdsense.PBGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroup = true;
        result.group_ = value;
        return this;
      }
      public Builder SetGroup(global::hdsense.PBGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGroup = true;
        result.group_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGroup(global::hdsense.PBGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGroup &&
            result.group_ != global::hdsense.PBGroup.DefaultInstance) {
            result.group_ = global::hdsense.PBGroup.CreateBuilder(result.group_).MergeFrom(value).BuildPartial();
        } else {
          result.group_ = value;
        }
        result.hasGroup = true;
        return this;
      }
      public Builder ClearGroup() {
        PrepareBuilder();
        result.hasGroup = false;
        result.group_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGroup> GroupListList {
        get { return PrepareBuilder().groupList_; }
      }
      public int GroupListCount {
        get { return result.GroupListCount; }
      }
      public global::hdsense.PBGroup GetGroupList(int index) {
        return result.GetGroupList(index);
      }
      public Builder SetGroupList(int index, global::hdsense.PBGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupList_[index] = value;
        return this;
      }
      public Builder SetGroupList(int index, global::hdsense.PBGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroupList(global::hdsense.PBGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupList_.Add(value);
        return this;
      }
      public Builder AddGroupList(global::hdsense.PBGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroupList(scg::IEnumerable<global::hdsense.PBGroup> values) {
        PrepareBuilder();
        result.groupList_.Add(values);
        return this;
      }
      public Builder ClearGroupList() {
        PrepareBuilder();
        result.groupList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGroupUsersByTitle> GroupMemberListList {
        get { return PrepareBuilder().groupMemberList_; }
      }
      public int GroupMemberListCount {
        get { return result.GroupMemberListCount; }
      }
      public global::hdsense.PBGroupUsersByTitle GetGroupMemberList(int index) {
        return result.GetGroupMemberList(index);
      }
      public Builder SetGroupMemberList(int index, global::hdsense.PBGroupUsersByTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupMemberList_[index] = value;
        return this;
      }
      public Builder SetGroupMemberList(int index, global::hdsense.PBGroupUsersByTitle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupMemberList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroupMemberList(global::hdsense.PBGroupUsersByTitle value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupMemberList_.Add(value);
        return this;
      }
      public Builder AddGroupMemberList(global::hdsense.PBGroupUsersByTitle.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupMemberList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroupMemberList(scg::IEnumerable<global::hdsense.PBGroupUsersByTitle> values) {
        PrepareBuilder();
        result.groupMemberList_.Add(values);
        return this;
      }
      public Builder ClearGroupMemberList() {
        PrepareBuilder();
        result.groupMemberList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGroupNotice> NoticeListList {
        get { return PrepareBuilder().noticeList_; }
      }
      public int NoticeListCount {
        get { return result.NoticeListCount; }
      }
      public global::hdsense.PBGroupNotice GetNoticeList(int index) {
        return result.GetNoticeList(index);
      }
      public Builder SetNoticeList(int index, global::hdsense.PBGroupNotice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.noticeList_[index] = value;
        return this;
      }
      public Builder SetNoticeList(int index, global::hdsense.PBGroupNotice.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.noticeList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNoticeList(global::hdsense.PBGroupNotice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.noticeList_.Add(value);
        return this;
      }
      public Builder AddNoticeList(global::hdsense.PBGroupNotice.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.noticeList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNoticeList(scg::IEnumerable<global::hdsense.PBGroupNotice> values) {
        PrepareBuilder();
        result.noticeList_.Add(values);
        return this;
      }
      public Builder ClearNoticeList() {
        PrepareBuilder();
        result.noticeList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBIntKeyIntValue> BadgesList {
        get { return PrepareBuilder().badges_; }
      }
      public int BadgesCount {
        get { return result.BadgesCount; }
      }
      public global::hdsense.PBIntKeyIntValue GetBadges(int index) {
        return result.GetBadges(index);
      }
      public Builder SetBadges(int index, global::hdsense.PBIntKeyIntValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.badges_[index] = value;
        return this;
      }
      public Builder SetBadges(int index, global::hdsense.PBIntKeyIntValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.badges_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBadges(global::hdsense.PBIntKeyIntValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.badges_.Add(value);
        return this;
      }
      public Builder AddBadges(global::hdsense.PBIntKeyIntValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.badges_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBadges(scg::IEnumerable<global::hdsense.PBIntKeyIntValue> values) {
        PrepareBuilder();
        result.badges_.Add(values);
        return this;
      }
      public Builder ClearBadges() {
        PrepareBuilder();
        result.badges_.Clear();
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBGroupUserRole> GroupRoleList {
        get { return PrepareBuilder().groupRole_; }
      }
      public int GroupRoleCount {
        get { return result.GroupRoleCount; }
      }
      public global::hdsense.PBGroupUserRole GetGroupRole(int index) {
        return result.GetGroupRole(index);
      }
      public Builder SetGroupRole(int index, global::hdsense.PBGroupUserRole value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupRole_[index] = value;
        return this;
      }
      public Builder SetGroupRole(int index, global::hdsense.PBGroupUserRole.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupRole_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroupRole(global::hdsense.PBGroupUserRole value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupRole_.Add(value);
        return this;
      }
      public Builder AddGroupRole(global::hdsense.PBGroupUserRole.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groupRole_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroupRole(scg::IEnumerable<global::hdsense.PBGroupUserRole> values) {
        PrepareBuilder();
        result.groupRole_.Add(values);
        return this;
      }
      public Builder ClearGroupRole() {
        PrepareBuilder();
        result.groupRole_.Clear();
        return this;
      }
    }
    static DataQueryResponse() {
      object.ReferenceEquals(global::hdsense.GameMessage.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
