// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameBasic {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBKeyValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBKeyValue, global::hdsense.PBKeyValue.Builder> internal__static_hdsense_PBKeyValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBIntKeyValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIntKeyValue, global::hdsense.PBIntKeyValue.Builder> internal__static_hdsense_PBIntKeyValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBIntKeyIntValue__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIntKeyIntValue, global::hdsense.PBIntKeyIntValue.Builder> internal__static_hdsense_PBIntKeyIntValue__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSNSUser__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSNSUser, global::hdsense.PBSNSUser.Builder> internal__static_hdsense_PBSNSUser__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSNSUserCredential__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSNSUserCredential, global::hdsense.PBSNSUserCredential.Builder> internal__static_hdsense_PBSNSUserCredential__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBUserLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserLevel, global::hdsense.PBUserLevel.Builder> internal__static_hdsense_PBUserLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGameUser__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGameUser, global::hdsense.PBGameUser.Builder> internal__static_hdsense_PBGameUser__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSimpleGroup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSimpleGroup, global::hdsense.PBSimpleGroup.Builder> internal__static_hdsense_PBSimpleGroup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBDrawBg__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawBg, global::hdsense.PBDrawBg.Builder> internal__static_hdsense_PBDrawBg__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGradient__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGradient, global::hdsense.PBGradient.Builder> internal__static_hdsense_PBGradient__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBDrawAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawAction, global::hdsense.PBDrawAction.Builder> internal__static_hdsense_PBDrawAction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBMessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBMessage, global::hdsense.PBMessage.Builder> internal__static_hdsense_PBMessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBMessageStat__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBMessageStat, global::hdsense.PBMessageStat.Builder> internal__static_hdsense_PBMessageStat__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBUserBasicInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserBasicInfo, global::hdsense.PBUserBasicInfo.Builder> internal__static_hdsense_PBUserBasicInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBItemPriceInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBItemPriceInfo, global::hdsense.PBItemPriceInfo.Builder> internal__static_hdsense_PBItemPriceInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBPromotionInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBPromotionInfo, global::hdsense.PBPromotionInfo.Builder> internal__static_hdsense_PBPromotionInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGameItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGameItem, global::hdsense.PBGameItem.Builder> internal__static_hdsense_PBGameItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGameItemList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGameItemList, global::hdsense.PBGameItemList.Builder> internal__static_hdsense_PBGameItemList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBIAPProduct__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIAPProduct, global::hdsense.PBIAPProduct.Builder> internal__static_hdsense_PBIAPProduct__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBIAPProductPrice__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIAPProductPrice, global::hdsense.PBIAPProductPrice.Builder> internal__static_hdsense_PBIAPProductPrice__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBIAPProductList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIAPProductList, global::hdsense.PBIAPProductList.Builder> internal__static_hdsense_PBIAPProductList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBUserItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserItem, global::hdsense.PBUserItem.Builder> internal__static_hdsense_PBUserItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBUserItemList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserItemList, global::hdsense.PBUserItemList.Builder> internal__static_hdsense_PBUserItemList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBLocalizeString__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLocalizeString, global::hdsense.PBLocalizeString.Builder> internal__static_hdsense_PBLocalizeString__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSize__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSize, global::hdsense.PBSize.Builder> internal__static_hdsense_PBSize__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBOpusRank__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpusRank, global::hdsense.PBOpusRank.Builder> internal__static_hdsense_PBOpusRank__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBUserAward__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserAward, global::hdsense.PBUserAward.Builder> internal__static_hdsense_PBUserAward__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBTask__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBTask, global::hdsense.PBTask.Builder> internal__static_hdsense_PBTask__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBSodoTag__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSodoTag, global::hdsense.PBSodoTag.Builder> internal__static_hdsense_PBSodoTag__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBAlbum__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAlbum, global::hdsense.PBAlbum.Builder> internal__static_hdsense_PBAlbum__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBulletion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBulletion, global::hdsense.PBBulletion.Builder> internal__static_hdsense_PBBulletion__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameBasic() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg9HYW1lQmFzaWMucHJvdG8SB2hkc2Vuc2UaE0dhbWVDb25zdGFudHMucHJv" + 
          "dG8iKQoKUEJLZXlWYWx1ZRIMCgRuYW1lGAEgAigJEg0KBXZhbHVlGAIgASgJ" + 
          "IisKDVBCSW50S2V5VmFsdWUSCwoDa2V5GAEgAigFEg0KBXZhbHVlGAIgASgJ" + 
          "Ii4KEFBCSW50S2V5SW50VmFsdWUSCwoDa2V5GAEgAigFEg0KBXZhbHVlGAIg" + 
          "AigFIrsBCglQQlNOU1VzZXISDAoEdHlwZRgBIAIoBRIOCgZ1c2VySWQYAiAC" + 
          "KAkSEAoIbmlja05hbWUYAyACKAkSEwoLYWNjZXNzVG9rZW4YBCABKAkSGQoR" + 
          "YWNjZXNzVG9rZW5TZWNyZXQYBSABKAkSFAoMcmVmcmVzaFRva2VuGAYgASgJ" + 
          "EhIKCmV4cGlyZVRpbWUYByABKAUSEAoIcXFPcGVuSWQYCCABKAkSEgoKY3Jl" + 
          "ZGVudGlhbBgUIAEoCSI3ChNQQlNOU1VzZXJDcmVkZW50aWFsEgwKBHR5cGUY" + 
          "ASACKAUSEgoKY3JlZGVudGlhbBgUIAEoCSI/CgtQQlVzZXJMZXZlbBIOCgZn" + 
          "YW1lSWQYASACKAkSEAoFbGV2ZWwYAiABKAU6ATESDgoDZXhwGAMgASgDOgEw" + 
          "ItINCgpQQkdhbWVVc2VyEg4KBnVzZXJJZBgBIAIoCRIQCghuaWNrTmFtZRgC" + 
          "IAIoCRIOCgZhdmF0YXIYAyABKAkSFQoGZ2VuZGVyGAQgASgIOgVmYWxzZRIk" + 
          "CghzbnNVc2VycxgFIAMoCzISLmhkc2Vuc2UuUEJTTlNVc2VyEhAKCGxvY2F0" + 
          "aW9uGAYgASgJEhEKCXVzZXJMZXZlbBgHIAEoBRISCgpjYW1lcmFNb2RlGAgg" + 
          "ASgJEg4KBnNlYXRJZBgJIAEoBRIUCgx4aWFvamlOdW1iZXIYCiABKAkSNAoO" + 
          "c25zQ3JlZGVudGlhbHMYCyADKAsyHC5oZHNlbnNlLlBCU05TVXNlckNyZWRl" + 
          "bnRpYWwSFwoPcmVjb21tZW5kU3RhdHVzGAwgASgFEhoKEnJlY29tbWVuZFN0" + 
          "YXJ0RGF0ZRgNIAEoBRISCgpyZWNvbW1lbmRzGA4gASgJEhAKCHJlYWxOYW1l" + 
          "GA8gASgJEhoKEmlkZW50aXR5Q2FyZE51bWJlchgQIAEoCRITCgtyZWFsQWRk" + 
          "cmVzcxgRIAEoCRIVCg1zaG90VGl0bGVOYW1lGBIgASgJEg0KBXFyVXJsGBQg" + 
          "ASgJEicKCmF0dHJpYnV0ZXMYFiADKAsyEy5oZHNlbnNlLlBCS2V5VmFsdWUS" + 
          "EwoLcGhvbmVudW1iZXIYHiABKAkSDQoFZW1haWwYHyABKAkSEAoIcGFzc3dv" + 
          "cmQYICABKAkSEAoIYmlydGhkYXkYISABKAkSDgoGem9kaWFjGCIgASgFEhUK" + 
          "DWJhY2tncm91bmRVUkwYJCABKAkSEwoLZGV2aWNlVG9rZW4YJSABKAkSEwoL" + 
          "Y291bnRyeUNvZGUYJiABKAkSEAoIbGFuZ3VhZ2UYJyABKAkSDQoFbGV2ZWwY" + 
          "KSABKAUSEgoKZXhwZXJpZW5jZRgqIAEoAxIOCgZzdGF0dXMYKyABKAUSGQoR" + 
          "Y2FuQ3JlYXRlQWN0aXZpdHkYLCABKAgSGAoQY2FuQ3JlYXRlQ29udGVzdBgt" + 
          "IAEoCBITCgtjb2luQmFsYW5jZRgzIAEoBRIUCgxpbmdvdEJhbGFuY2UYNCAB" + 
          "KAUSIgoFaXRlbXMYPSADKAsyEy5oZHNlbnNlLlBCVXNlckl0ZW0SEwoLZGV2" + 
          "aWNlTW9kZWwYRyABKAkSEAoIZGV2aWNlT1MYSCABKAkSEAoIZGV2aWNlSWQY" + 
          "SSABKAkSEgoKZGV2aWNlVHlwZRhKIAEoCRIWCg5ibG9ja0RldmljZUlkcxhL" + 
          "IAMoCRISCgpibG9vZEdyb3VwGFEgASgJEhAKCGZhbkNvdW50GFIgASgFEhMK" + 
          "C2ZvbGxvd0NvdW50GFMgASgFEhEKCWxvbmdpdHVkZRhUIAEoARIQCghsYXRp" + 
          "dHVkZRhVIAEoARIUCgxpc0phaWxCcm9rZW4YViABKAgSPQoMb3BlbkluZm9U" + 
          "eXBlGFsgASgOMhcuaGRzZW5zZS5QQk9wZW5JbmZvVHlwZToOT1BFTl9UT19G" + 
          "UklFTkQSGQoRb3B1c0NvdmVyZmxvd1R5cGUYXCABKAUSLgoMdXNlclJvbGVU" + 
          "eXBlGF0gASgOMhguaGRzZW5zZS5QQk9Vc2VyUm9sZVR5cGUSEQoJc2lnbmF0" + 
          "dXJlGGQgASgJEhMKC2ZlYXR1cmVPcHVzGGUgASgFEhIKCmZyaWVuZE1lbW8Y" + 
          "ZiABKAkSGQoRZW1haWxWZXJpZnlTdGF0dXMYZyABKAUSHQoOY2FuU2hha2VO" + 
          "dW1iZXIYaCABKAg6BWZhbHNlEhsKEHNoYWtlTnVtYmVyVGltZXMYaSABKAU6" + 
          "ATASFAoJdGFrZUNvaW5zGGogASgFOgEwEg4KA3ZpcBhuIAEoBToBMBIYCg12" + 
          "aXBFeHBpcmVEYXRlGG8gASgFOgEwEhkKDnZpcExhc3RQYXlEYXRlGHAgASgF" + 
          "OgEwEgwKBHFxSWQYeCABKAkSDgoGc2luYUlkGHkgASgJEhAKCHdlaXhpbklk" + 
          "GHogASgJEg8KB3JlZ0RhdGUYeyABKAUSDwoHcmVnRnJvbRh8IAEoBRIRCgl2" + 
          "aXNpdERhdGUYfSABKAUSEgoKdXBkYXRlRGF0ZRh+IAEoBRIUCgxlbWFpbFZT" + 
          "dGF0dXMYfyABKAUSEwoKZW1haWxWQ29kZRiAASABKAkSFgoNbW9iaWxlVlN0" + 
          "YXR1cxiBASABKAUSKgoJZ3JvdXBJbmZvGJYBIAEoCzIWLmhkc2Vuc2UuUEJT" + 
          "aW1wbGVHcm91cBIUCgtvZmZHcm91cElkcxiXASADKAkSFAoLcGVybWlzc2lv" + 
          "bnMYmAEgAygJEhwKD3NpbmdSZWNvcmRMaW1pdBjIASABKAU6AjYwIkcKDVBC" + 
          "U2ltcGxlR3JvdXASDwoHZ3JvdXBJZBgBIAIoCRIRCglncm91cE5hbWUYAiAC" + 
          "KAkSEgoKZ3JvdXBNZWRhbBgDIAIoCSJTCghQQkRyYXdCZxIMCgRiZ0lkGAEg" + 
          "AigJEhAKCGxvY2FsVXJsGAIgASgJEhEKCXJlbW90ZVVybBgDIAEoCRIUCglz" + 
          "aG93U3R5bGUYBCABKAU6ATAiQAoKUEJHcmFkaWVudBIQCghkaXZpc2lvbhgB" + 
          "IAIoAhIRCgVjb2xvchgCIAMoBUICEAESDQoFcG9pbnQYAyADKAIiwgMKDFBC" + 
          "RHJhd0FjdGlvbhIMCgR0eXBlGAEgAigFEhIKBnBvaW50cxgCIAMoBUICEAES" + 
          "DQoFd2lkdGgYAyABKAISDQoFY29sb3IYBCABKAUSDwoHcGVuVHlwZRgFIAEo" + 
          "BRIRCglzaGFwZVR5cGUYBiABKAUSFQoNcmVjdENvbXBvbmVudBgHIAMoAhIT" + 
          "CgtzaGFwZVN0cm9rZRgIIAEoCBIPCgdwb2ludHNYGAsgAygCEg8KB3BvaW50" + 
          "c1kYDCADKAISEwoLYmV0dGVyQ29sb3IYDSABKAUSIQoGZHJhd0JnGA4gASgL" + 
          "MhEuaGRzZW5zZS5QQkRyYXdCZxIVCg1zaGFkb3dPZmZzZXRYGA8gASgCEhUK" + 
          "DXNoYWRvd09mZnNldFkYECABKAISEwoLc2hhZG93Q29sb3IYESABKAUSEgoK" + 
          "c2hhZG93Qmx1chgSIAEoAhIPCgdjbGlwVGFnGBQgASgFEhAKCGNsaXBUeXBl" + 
          "GBUgASgFEhAKCGxheWVyVGFnGBcgASgFEhUKCmxheWVyQWxwaGEYGCABKAI6" + 
          "ATESJQoIZ3JhZGllbnQYHiABKAsyEy5oZHNlbnNlLlBCR3JhZGllbnQimwQK" + 
          "CVBCTWVzc2FnZRIRCgltZXNzYWdlSWQYASACKAkSDAoEZnJvbRgCIAIoCRIK" + 
          "CgJ0bxgDIAIoCRIOCgZzdGF0dXMYBCABKAUSDwoEdHlwZRgFIAEoBToBMBIW" + 
          "Cgdpc0dyb3VwGAYgASgIOgVmYWxzZRIlCghmcm9tVXNlchgHIAEoCzITLmhk" + 
          "c2Vuc2UuUEJHYW1lVXNlchIjCgZ0b1VzZXIYCCABKAsyEy5oZHNlbnNlLlBC" + 
          "R2FtZVVzZXISDAoEdGV4dBgUIAEoCRInCghkcmF3RGF0YRgVIAMoCzIVLmhk" + 
          "c2Vuc2UuUEJEcmF3QWN0aW9uEhIKCmNyZWF0ZURhdGUYFiABKAUSGgoPZHJh" + 
          "d0RhdGFWZXJzaW9uGBcgASgFOgEwEiMKCmNhbnZhc1NpemUYGCABKAsyDy5o" + 
          "ZHNlbnNlLlBCU2l6ZRIRCglzdGFydERhdGUYGSABKAUSDwoHZW5kRGF0ZRga" + 
          "IAEoBRIQCghsb2NhdGlvbhgeIAEoCRIRCglsb25naXR1ZGUYHyABKAESEAoI" + 
          "bGF0aXR1ZGUYICABKAESFAoMcmVxTWVzc2FnZUlkGCEgASgJEhMKC3JlcGx5" + 
          "UmVzdWx0GCIgASgFEhAKCGltYWdlVVJMGCkgASgJEhUKDXRodW1iSW1hZ2VV" + 
          "UkwYKiABKAkSDwoHZGF0YVVybBgzIAEoCRIQCghkdXJhdGlvbhg0IAEoBSLH" + 
          "AwoNUEJNZXNzYWdlU3RhdBIOCgZ1c2VySWQYASACKAkSFAoMZnJpZW5kVXNl" + 
          "cklkGAIgAigJEhYKDmZyaWVuZE5pY2tOYW1lGAMgAigJEhQKDGZyaWVuZEF2" + 
          "YXRhchgEIAEoCRIUCgxmcmllbmRHZW5kZXIYBSABKAgSFgoHaXNHcm91cBgG" + 
          "IAEoCDoFZmFsc2USEAoFaXNWaXAYByABKAU6ATASNAoMc3RhdFJvbGVUeXBl" + 
          "GAggASgOMh4uaGRzZW5zZS5QQk1lc3NhZ2VTdGF0Um9sZVR5cGUSEQoJbWVz" + 
          "c2FnZUlkGAogASgJEgwKBGZyb20YCyACKAkSCgoCdG8YDCACKAkSDAoEdGV4" + 
          "dBgNIAEoCRInCghkcmF3RGF0YRgOIAMoCzIVLmhkc2Vuc2UuUEJEcmF3QWN0" + 
          "aW9uEhIKCmNyZWF0ZURhdGUYDyABKAUSDAoEdHlwZRgQIAEoBRIUCgxtb2Rp" + 
          "ZmllZERhdGUYHyABKAUSGQoRdG90YWxNZXNzYWdlQ291bnQYICABKAUSFwoP" + 
          "bmV3TWVzc2FnZUNvdW50GCEgASgFEhwKFG5ld0dyb3VwTWVzc2FnZUNvdW50" + 
          "GCIgASgFIlMKD1BCVXNlckJhc2ljSW5mbxIOCgZ1c2VySWQYASACKAkSEAoI" + 
          "bmlja05hbWUYAiACKAkSDgoGYXZhdGFyGAMgAigJEg4KBmdlbmRlchgEIAIo" + 
          "CSJLCg9QQkl0ZW1QcmljZUluZm8SDQoFcHJpY2UYASACKAUSKQoIY3VycmVu" + 
          "Y3kYAiABKA4yFy5oZHNlbnNlLlBCR2FtZUN1cnJlbmN5IkcKD1BCUHJvbW90" + 
          "aW9uSW5mbxINCgVwcmljZRgBIAIoBRIRCglzdGFydERhdGUYAiABKAUSEgoK" + 
          "ZXhwaXJlRGF0ZRgDIAEoBSL9AgoKUEJHYW1lSXRlbRIOCgZpdGVtSWQYASAC" + 
          "KAUSDAoEbmFtZRgCIAIoCRIMCgRkZXNjGAMgASgJEgsKA3VybBgEIAEoCRIz" + 
          "Cgtjb25zdW1lVHlwZRgFIAEoDjIeLmhkc2Vuc2UuUEJHYW1lSXRlbUNvbnN1" + 
          "bWVUeXBlEg0KBWltYWdlGAsgASgJEhEKCWRlbW9JbWFnZRgMIAEoCRIMCgR0" + 
          "eXBlGA8gASgFEhYKDmFwcGxlUHJvZHVjdElkGBYgASgJEisKCXByaWNlSW5m" + 
          "bxgXIAEoCzIYLmhkc2Vuc2UuUEJJdGVtUHJpY2VJbmZvEi8KDXByb21vdGlv" + 
          "bkluZm8YGCABKAsyGC5oZHNlbnNlLlBCUHJvbW90aW9uSW5mbxIYChBkZWZh" + 
          "dWx0U2FsZUNvdW50GB4gASgFEi4KDXVzYWdlTGlmZVVuaXQYMiABKA4yFy5o" + 
          "ZHNlbnNlLlBCR2FtZVRpbWVVbml0EhEKCXVzYWdlTGlmZRgzIAEoBSI0Cg5Q" + 
          "QkdhbWVJdGVtTGlzdBIiCgVpdGVtcxgBIAMoCzITLmhkc2Vuc2UuUEJHYW1l" + 
          "SXRlbSKcAgoMUEJJQVBQcm9kdWN0EicKBHR5cGUYASACKA4yGS5oZHNlbnNl" + 
          "LlBCSUFQUHJvZHVjdFR5cGUSFgoOYXBwbGVQcm9kdWN0SWQYAiACKAkSFwoP" + 
          "YWxpcGF5UHJvZHVjdElkGAMgASgJEgwKBG5hbWUYBSABKAkSDAoEZGVzYxgI" + 
          "IAEoCRIQCgVjb3VudBgLIAEoBToBMRISCgp0b3RhbFByaWNlGAwgASgJEhAK" + 
          "CGN1cnJlbmN5GBUgASgJEg8KB2NvdW50cnkYFiABKAkSDgoGc2F2aW5nGDIg" + 
          "ASgJEhEKCXRhb2Jhb1VybBg9IAEoCRIqCgZwcmljZXMYYyADKAsyGi5oZHNl" + 
          "bnNlLlBCSUFQUHJvZHVjdFByaWNlIlUKEVBCSUFQUHJvZHVjdFByaWNlEg0K" + 
          "BXByaWNlGAEgASgJEhAKCGN1cnJlbmN5GAIgASgJEg8KB2NvdW50cnkYCyAB" + 
          "KAkSDgoGc2F2aW5nGGMgASgJIjsKEFBCSUFQUHJvZHVjdExpc3QSJwoIcHJv" + 
          "ZHVjdHMYASADKAsyFS5oZHNlbnNlLlBCSUFQUHJvZHVjdCJqCgpQQlVzZXJJ" + 
          "dGVtEg4KBml0ZW1JZBgBIAIoBRIQCgVjb3VudBgCIAEoBToBMBISCgpjcmVh" + 
          "dGVEYXRlGAUgASgFEhIKCm1vZGlmeURhdGUYBiABKAUSEgoKZXhwaXJlRGF0" + 
          "ZRgHIAEoBSI4Cg5QQlVzZXJJdGVtTGlzdBImCgl1c2VySXRlbXMYAiADKAsy" + 
          "Ey5oZHNlbnNlLlBCVXNlckl0ZW0iTQoQUEJMb2NhbGl6ZVN0cmluZxIUCgxs" + 
          "YW5ndWFnZUNvZGUYASACKAkSDAoEdGV4dBgCIAEoCRIVCg1sb2NhbGl6ZWRU" + 
          "ZXh0GAMgAigJIjEKBlBCU2l6ZRISCgV3aWR0aBgBIAEoAjoDMzA0EhMKBmhl" + 
          "aWdodBgCIAEoAjoDMzIwIj8KClBCT3B1c1JhbmsSDwoEdHlwZRgBIAIoBToB" + 
          "MRIQCgV2YWx1ZRgCIAIoBToBMBIOCgZ1c2VySWQYAyABKAkivgEKC1BCVXNl" + 
          "ckF3YXJkEikKCWF3YXJkVHlwZRgBIAIoCzIWLmhkc2Vuc2UuUEJJbnRLZXlW" + 
          "YWx1ZRIhCgR1c2VyGAIgAigLMhMuaGRzZW5zZS5QQkdhbWVVc2VyEgwKBHJh" + 
          "bmsYAyABKAUSDQoFc2NvcmUYBCABKAISDQoFY29pbnMYBSABKAUSDgoGb3B1" + 
          "c0lkGAYgASgJEhIKCmNyZWF0ZURhdGUYCyABKAUSEQoJY29udGVzdElkGBQg" + 
          "ASgJInkKBlBCVGFzaxIOCgZ0YXNrSWQYASACKAUSDAoEbmFtZRgCIAIoCRIM" + 
          "CgRkZXNjGAMgASgJEiUKBnN0YXR1cxgEIAEoDjIVLmhkc2Vuc2UuUEJUYXNr" + 
          "U3RhdHVzEg0KBWJhZGdlGAUgASgFEg0KBWF3YXJkGAYgASgFIssBCglQQlNv" + 
          "ZG9UYWcSDwoHY2xhc3NJZBgBIAIoCRIjCgdzdWJUYWdzGAMgAygLMhIuaGRz" + 
          "ZW5zZS5QQlNvZG9UYWcSEAoIa2V5d29yZHMYBCADKAkSDAoEZGVzYxgFIAEo" + 
          "CRIQCghpc1RvcFRhZxgGIAEoCBIlCglwYXJlbnRUYWcYByABKAsyEi5oZHNl" + 
          "bnNlLlBCU29kb1RhZxIOCgZjbk5hbWUYFCABKAkSDgoGZW5OYW1lGBUgASgJ" + 
          "Eg8KB3Rjbk5hbWUYFiABKAkipwIKB1BCQWxidW0SDwoHYWxidW1JZBgBIAIo" + 
          "CRINCgVpbWFnZRgCIAEoCRISCgp0aHVtYkltYWdlGAMgASgJEg8KB2RhdGFV" + 
          "cmwYBCABKAkSDAoEZGVzYxgFIAEoCRIpCghzb2RvVHlwZRgGIAEoDjIXLmhk" + 
          "c2Vuc2UuUEJPcHVzU29kb1R5cGUSEgoKY3JlYXRlRGF0ZRgHIAEoBRIQCghk" + 
          "dXJhdGlvbhgIIAEoAhIOCgZ1c2VySWQYCiABKAkSEAoIbmlja05hbWUYCyAB" + 
          "KAkSDgoGYXZhdGFyGAwgASgJEhYKDmlzV2l0aEFwcEltYWdlGA0gASgIEi4K" + 
          "CmNhbWVyYVBhcmEYFCABKAsyGi5oZHNlbnNlLlBCQ2FtZXJhUGFyYW1ldGVy" + 
          "IuMBCgtQQkJ1bGxldGlvbhISCgpidWxsZXRpbklkGAEgAigJEgwKBHR5cGUY" + 
          "AiACKAUSDgoGZ2FtZUlkGAMgAigJEhAKCGZ1bmN0aW9uGAQgAigJEhAKCHNo" + 
          "b3dUeXBlGAUgAigFEhIKCmNyZWF0ZURhdGUYCiABKAUSDwoHZW5kRGF0ZRgL" + 
          "IAEoBRIPCgdtZXNzYWdlGAwgASgJEgsKA3VybBgNIAEoCRIRCglwYXJhbWV0" + 
          "ZXIYDiABKAkSEwoLaW1hZ2VBcHBVcmwYDyABKAkSEwoLaW1hZ2VXZWJVcmwY" + 
          "ECABKAkqUgoOUEJPcGVuSW5mb1R5cGUSEgoOT1BFTl9UT19GUklFTkQQABIL" + 
          "CgdPUEVOX05PEAESDAoIT1BFTl9BTEwQAhIRCg1PUEVOX1RPX0dST1VQEAMq" + 
          "dwoPUEJPVXNlclJvbGVUeXBlEg4KCkdVRVNTX1VTRVIQABIPCgtOT1JNQUxf" + 
          "VVNFUhABEg4KCk1PREVMX1VTRVIQAhIQCgxURUFDSEVSX1VTRVIQAxIPCgtQ" + 
          "QVJFTlRfVVNFUhAEEhAKDE1BTkFHRVJfVVNFUhAFKm4KFVBCTWVzc2FnZVN0" + 
          "YXRSb2xlVHlwZRIQCgxVU0VSX1NFU1NJT04QARISCg5TWVNURU1fU0VTU0lP" + 
          "ThACEhcKE0dST1VQX0FMRVJUX1NFU1NJT04QAxIWChJPUFVTX0FMRVJUX1NF" + 
          "U1NJT04QBColCg5QQkdhbWVDdXJyZW5jeRIICgRDb2luEAASCQoFSW5nb3QQ" + 
          "ASo+Cg5QQkRyYXdJdGVtVHlwZRINCglEcmF3Tm9tYWwQABIMCghEcmF3VG9v" + 
          "bBABEg8KCkRyYXdUYW9CYW8Qj04qVAoVUEJHYW1lSXRlbUNvbnN1bWVUeXBl" + 
          "EhEKDU5vbkNvbnN1bWFibGUQARIUChBBbW91bnRDb25zdW1hYmxlEAISEgoO" + 
          "VGltZUNvbnN1bWFibGUQAyo4Cg5QQkdhbWVUaW1lVW5pdBIICgRIb3VyEAES" + 
          "BwoDRGF5EAISCQoFTW9udGgQAxIICgRZZWFyEAQqLQoQUEJJQVBQcm9kdWN0" + 
          "VHlwZRILCgdJQVBDb2luEAESDAoISUFQSW5nb3QQAiqrAQoMUEJUYXNrU3Rh" + 
          "dHVzEhgKFFRBU0tfU1RBVFVTX0NBTl9UQUtFEAASFAoQVEFTS19TVEFUVVNf" + 
          "RE9ORRABEhUKEVRBU0tfU1RBVFVTX0FXQVJEEAISFwoTVEFTS19TVEFUVVNf" + 
          "RVhQSVJFRBADEh4KGlRBU0tfU1RBVFVTX1dBSVRfRk9SX1NUQVJUEAQSGwoX" + 
          "VEFTS19TVEFUVVNfQUxXQVlTX09QRU4QBSr4AgoMUEJUYXNrSWRUeXBlEg0K" + 
          "CVRBU0tfTk9ORRAAEhEKDVRBU0tfQ0hFQ0tfSU4QARISCg5UQVNLX0JJTkRf" + 
          "U0lOQRACEhAKDFRBU0tfQklORF9RURADEhMKD1RBU0tfU0hBUkVfU0lOQRAE" + 
          "Eh4KGlRBU0tfU0hBUkVfV0VJWElOX1RJTUVMSU5FEAUSFwoTVEFTS19TSEFS" + 
          "RV9RUV9TUEFDRRAGEhMKD1RBU0tfQVBQX1JFVklFVxAHEhQKEFRBU0tfQ1JF" + 
          "QVRFX09QVVMQCBITCg9UQVNLX0dVRVNTX09QVVMQCRITCg9UQVNLX1NIQVJF" + 
          "X09QVVMQChIXChNUQVNLX1NIQVJFX1FRX1dFSUJPEAsSFAoQVEFTS19BUFBf" + 
          "VVBHUkFERRAMEgwKCFRBU0tfVklQEA0SFQoRVEFTS19BUFBfVklFV19XRUIQ" + 
          "DhIRCg1UQVNLX0FQUF9XQUxMEGQSFgoRVEFTS19BUFBfRE9XTkxPQUQQyAFC" + 
          "OgonY29tLmhkc2Vuc2UubmV0d29yay5nYW1lLnByb3RvY29sLm1vZGVsQg9H" + 
          "YW1lQmFzaWNQcm90b3M=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBKeyValue__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBKeyValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBKeyValue, global::hdsense.PBKeyValue.Builder>(internal__static_hdsense_PBKeyValue__Descriptor,
                new string[] { "Name", "Value", });
        internal__static_hdsense_PBIntKeyValue__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBIntKeyValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIntKeyValue, global::hdsense.PBIntKeyValue.Builder>(internal__static_hdsense_PBIntKeyValue__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_hdsense_PBIntKeyIntValue__Descriptor = Descriptor.MessageTypes[2];
        internal__static_hdsense_PBIntKeyIntValue__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIntKeyIntValue, global::hdsense.PBIntKeyIntValue.Builder>(internal__static_hdsense_PBIntKeyIntValue__Descriptor,
                new string[] { "Key", "Value", });
        internal__static_hdsense_PBSNSUser__Descriptor = Descriptor.MessageTypes[3];
        internal__static_hdsense_PBSNSUser__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSNSUser, global::hdsense.PBSNSUser.Builder>(internal__static_hdsense_PBSNSUser__Descriptor,
                new string[] { "Type", "UserId", "NickName", "AccessToken", "AccessTokenSecret", "RefreshToken", "ExpireTime", "QqOpenId", "Credential", });
        internal__static_hdsense_PBSNSUserCredential__Descriptor = Descriptor.MessageTypes[4];
        internal__static_hdsense_PBSNSUserCredential__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSNSUserCredential, global::hdsense.PBSNSUserCredential.Builder>(internal__static_hdsense_PBSNSUserCredential__Descriptor,
                new string[] { "Type", "Credential", });
        internal__static_hdsense_PBUserLevel__Descriptor = Descriptor.MessageTypes[5];
        internal__static_hdsense_PBUserLevel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserLevel, global::hdsense.PBUserLevel.Builder>(internal__static_hdsense_PBUserLevel__Descriptor,
                new string[] { "GameId", "Level", "Exp", });
        internal__static_hdsense_PBGameUser__Descriptor = Descriptor.MessageTypes[6];
        internal__static_hdsense_PBGameUser__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGameUser, global::hdsense.PBGameUser.Builder>(internal__static_hdsense_PBGameUser__Descriptor,
                new string[] { "UserId", "NickName", "Avatar", "Gender", "SnsUsers", "Location", "UserLevel", "CameraMode", "SeatId", "XiaojiNumber", "SnsCredentials", "RecommendStatus", "RecommendStartDate", "Recommends", "RealName", "IdentityCardNumber", "RealAddress", "ShotTitleName", "QrUrl", "Attributes", "Phonenumber", "Email", "Password", "Birthday", "Zodiac", "BackgroundURL", "DeviceToken", "CountryCode", "Language", "Level", "Experience", "Status", "CanCreateActivity", "CanCreateContest", "CoinBalance", "IngotBalance", "Items", "DeviceModel", "DeviceOS", "DeviceId", "DeviceType", "BlockDeviceIds", "BloodGroup", "FanCount", "FollowCount", "Longitude", "Latitude", "IsJailBroken", "OpenInfoType", "OpusCoverflowType", "UserRoleType", "Signature", "FeatureOpus", "FriendMemo", "EmailVerifyStatus", "CanShakeNumber", "ShakeNumberTimes", "TakeCoins", "Vip", "VipExpireDate", "VipLastPayDate", "QqId", "SinaId", "WeixinId", "RegDate", "RegFrom", "VisitDate", "UpdateDate", "EmailVStatus", "EmailVCode", "MobileVStatus", "GroupInfo", "OffGroupIds", "Permissions", "SingRecordLimit", });
        internal__static_hdsense_PBSimpleGroup__Descriptor = Descriptor.MessageTypes[7];
        internal__static_hdsense_PBSimpleGroup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSimpleGroup, global::hdsense.PBSimpleGroup.Builder>(internal__static_hdsense_PBSimpleGroup__Descriptor,
                new string[] { "GroupId", "GroupName", "GroupMedal", });
        internal__static_hdsense_PBDrawBg__Descriptor = Descriptor.MessageTypes[8];
        internal__static_hdsense_PBDrawBg__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawBg, global::hdsense.PBDrawBg.Builder>(internal__static_hdsense_PBDrawBg__Descriptor,
                new string[] { "BgId", "LocalUrl", "RemoteUrl", "ShowStyle", });
        internal__static_hdsense_PBGradient__Descriptor = Descriptor.MessageTypes[9];
        internal__static_hdsense_PBGradient__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGradient, global::hdsense.PBGradient.Builder>(internal__static_hdsense_PBGradient__Descriptor,
                new string[] { "Division", "Color", "Point", });
        internal__static_hdsense_PBDrawAction__Descriptor = Descriptor.MessageTypes[10];
        internal__static_hdsense_PBDrawAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawAction, global::hdsense.PBDrawAction.Builder>(internal__static_hdsense_PBDrawAction__Descriptor,
                new string[] { "Type", "Points", "Width", "Color", "PenType", "ShapeType", "RectComponent", "ShapeStroke", "PointsX", "PointsY", "BetterColor", "DrawBg", "ShadowOffsetX", "ShadowOffsetY", "ShadowColor", "ShadowBlur", "ClipTag", "ClipType", "LayerTag", "LayerAlpha", "Gradient", });
        internal__static_hdsense_PBMessage__Descriptor = Descriptor.MessageTypes[11];
        internal__static_hdsense_PBMessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBMessage, global::hdsense.PBMessage.Builder>(internal__static_hdsense_PBMessage__Descriptor,
                new string[] { "MessageId", "From", "To", "Status", "Type", "IsGroup", "FromUser", "ToUser", "Text", "DrawData", "CreateDate", "DrawDataVersion", "CanvasSize", "StartDate", "EndDate", "Location", "Longitude", "Latitude", "ReqMessageId", "ReplyResult", "ImageURL", "ThumbImageURL", "DataUrl", "Duration", });
        internal__static_hdsense_PBMessageStat__Descriptor = Descriptor.MessageTypes[12];
        internal__static_hdsense_PBMessageStat__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBMessageStat, global::hdsense.PBMessageStat.Builder>(internal__static_hdsense_PBMessageStat__Descriptor,
                new string[] { "UserId", "FriendUserId", "FriendNickName", "FriendAvatar", "FriendGender", "IsGroup", "IsVip", "StatRoleType", "MessageId", "From", "To", "Text", "DrawData", "CreateDate", "Type", "ModifiedDate", "TotalMessageCount", "NewMessageCount", "NewGroupMessageCount", });
        internal__static_hdsense_PBUserBasicInfo__Descriptor = Descriptor.MessageTypes[13];
        internal__static_hdsense_PBUserBasicInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserBasicInfo, global::hdsense.PBUserBasicInfo.Builder>(internal__static_hdsense_PBUserBasicInfo__Descriptor,
                new string[] { "UserId", "NickName", "Avatar", "Gender", });
        internal__static_hdsense_PBItemPriceInfo__Descriptor = Descriptor.MessageTypes[14];
        internal__static_hdsense_PBItemPriceInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBItemPriceInfo, global::hdsense.PBItemPriceInfo.Builder>(internal__static_hdsense_PBItemPriceInfo__Descriptor,
                new string[] { "Price", "Currency", });
        internal__static_hdsense_PBPromotionInfo__Descriptor = Descriptor.MessageTypes[15];
        internal__static_hdsense_PBPromotionInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBPromotionInfo, global::hdsense.PBPromotionInfo.Builder>(internal__static_hdsense_PBPromotionInfo__Descriptor,
                new string[] { "Price", "StartDate", "ExpireDate", });
        internal__static_hdsense_PBGameItem__Descriptor = Descriptor.MessageTypes[16];
        internal__static_hdsense_PBGameItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGameItem, global::hdsense.PBGameItem.Builder>(internal__static_hdsense_PBGameItem__Descriptor,
                new string[] { "ItemId", "Name", "Desc", "Url", "ConsumeType", "Image", "DemoImage", "Type", "AppleProductId", "PriceInfo", "PromotionInfo", "DefaultSaleCount", "UsageLifeUnit", "UsageLife", });
        internal__static_hdsense_PBGameItemList__Descriptor = Descriptor.MessageTypes[17];
        internal__static_hdsense_PBGameItemList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGameItemList, global::hdsense.PBGameItemList.Builder>(internal__static_hdsense_PBGameItemList__Descriptor,
                new string[] { "Items", });
        internal__static_hdsense_PBIAPProduct__Descriptor = Descriptor.MessageTypes[18];
        internal__static_hdsense_PBIAPProduct__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIAPProduct, global::hdsense.PBIAPProduct.Builder>(internal__static_hdsense_PBIAPProduct__Descriptor,
                new string[] { "Type", "AppleProductId", "AlipayProductId", "Name", "Desc", "Count", "TotalPrice", "Currency", "Country", "Saving", "TaobaoUrl", "Prices", });
        internal__static_hdsense_PBIAPProductPrice__Descriptor = Descriptor.MessageTypes[19];
        internal__static_hdsense_PBIAPProductPrice__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIAPProductPrice, global::hdsense.PBIAPProductPrice.Builder>(internal__static_hdsense_PBIAPProductPrice__Descriptor,
                new string[] { "Price", "Currency", "Country", "Saving", });
        internal__static_hdsense_PBIAPProductList__Descriptor = Descriptor.MessageTypes[20];
        internal__static_hdsense_PBIAPProductList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBIAPProductList, global::hdsense.PBIAPProductList.Builder>(internal__static_hdsense_PBIAPProductList__Descriptor,
                new string[] { "Products", });
        internal__static_hdsense_PBUserItem__Descriptor = Descriptor.MessageTypes[21];
        internal__static_hdsense_PBUserItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserItem, global::hdsense.PBUserItem.Builder>(internal__static_hdsense_PBUserItem__Descriptor,
                new string[] { "ItemId", "Count", "CreateDate", "ModifyDate", "ExpireDate", });
        internal__static_hdsense_PBUserItemList__Descriptor = Descriptor.MessageTypes[22];
        internal__static_hdsense_PBUserItemList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserItemList, global::hdsense.PBUserItemList.Builder>(internal__static_hdsense_PBUserItemList__Descriptor,
                new string[] { "UserItems", });
        internal__static_hdsense_PBLocalizeString__Descriptor = Descriptor.MessageTypes[23];
        internal__static_hdsense_PBLocalizeString__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBLocalizeString, global::hdsense.PBLocalizeString.Builder>(internal__static_hdsense_PBLocalizeString__Descriptor,
                new string[] { "LanguageCode", "Text", "LocalizedText", });
        internal__static_hdsense_PBSize__Descriptor = Descriptor.MessageTypes[24];
        internal__static_hdsense_PBSize__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSize, global::hdsense.PBSize.Builder>(internal__static_hdsense_PBSize__Descriptor,
                new string[] { "Width", "Height", });
        internal__static_hdsense_PBOpusRank__Descriptor = Descriptor.MessageTypes[25];
        internal__static_hdsense_PBOpusRank__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpusRank, global::hdsense.PBOpusRank.Builder>(internal__static_hdsense_PBOpusRank__Descriptor,
                new string[] { "Type", "Value", "UserId", });
        internal__static_hdsense_PBUserAward__Descriptor = Descriptor.MessageTypes[26];
        internal__static_hdsense_PBUserAward__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBUserAward, global::hdsense.PBUserAward.Builder>(internal__static_hdsense_PBUserAward__Descriptor,
                new string[] { "AwardType", "User", "Rank", "Score", "Coins", "OpusId", "CreateDate", "ContestId", });
        internal__static_hdsense_PBTask__Descriptor = Descriptor.MessageTypes[27];
        internal__static_hdsense_PBTask__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBTask, global::hdsense.PBTask.Builder>(internal__static_hdsense_PBTask__Descriptor,
                new string[] { "TaskId", "Name", "Desc", "Status", "Badge", "Award", });
        internal__static_hdsense_PBSodoTag__Descriptor = Descriptor.MessageTypes[28];
        internal__static_hdsense_PBSodoTag__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBSodoTag, global::hdsense.PBSodoTag.Builder>(internal__static_hdsense_PBSodoTag__Descriptor,
                new string[] { "ClassId", "SubTags", "Keywords", "Desc", "IsTopTag", "ParentTag", "CnName", "EnName", "TcnName", });
        internal__static_hdsense_PBAlbum__Descriptor = Descriptor.MessageTypes[29];
        internal__static_hdsense_PBAlbum__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAlbum, global::hdsense.PBAlbum.Builder>(internal__static_hdsense_PBAlbum__Descriptor,
                new string[] { "AlbumId", "Image", "ThumbImage", "DataUrl", "Desc", "SodoType", "CreateDate", "Duration", "UserId", "NickName", "Avatar", "IsWithAppImage", "CameraPara", });
        internal__static_hdsense_PBBulletion__Descriptor = Descriptor.MessageTypes[30];
        internal__static_hdsense_PBBulletion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBulletion, global::hdsense.PBBulletion.Builder>(internal__static_hdsense_PBBulletion__Descriptor,
                new string[] { "BulletinId", "Type", "GameId", "Function", "ShowType", "CreateDate", "EndDate", "Message", "Url", "Parameter", "ImageAppUrl", "ImageWebUrl", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::hdsense.GameConstants.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PBOpenInfoType {
    OPEN_TO_FRIEND = 0,
    OPEN_NO = 1,
    OPEN_ALL = 2,
    OPEN_TO_GROUP = 3,
  }
  
  public enum PBOUserRoleType {
    GUESS_USER = 0,
    NORMAL_USER = 1,
    MODEL_USER = 2,
    TEACHER_USER = 3,
    PARENT_USER = 4,
    MANAGER_USER = 5,
  }
  
  public enum PBMessageStatRoleType {
    USER_SESSION = 1,
    SYSTEM_SESSION = 2,
    GROUP_ALERT_SESSION = 3,
    OPUS_ALERT_SESSION = 4,
  }
  
  public enum PBGameCurrency {
    Coin = 0,
    Ingot = 1,
  }
  
  public enum PBDrawItemType {
    DrawNomal = 0,
    DrawTool = 1,
    DrawTaoBao = 9999,
  }
  
  public enum PBGameItemConsumeType {
    NonConsumable = 1,
    AmountConsumable = 2,
    TimeConsumable = 3,
  }
  
  public enum PBGameTimeUnit {
    Hour = 1,
    Day = 2,
    Month = 3,
    Year = 4,
  }
  
  public enum PBIAPProductType {
    IAPCoin = 1,
    IAPIngot = 2,
  }
  
  public enum PBTaskStatus {
    TASK_STATUS_CAN_TAKE = 0,
    TASK_STATUS_DONE = 1,
    TASK_STATUS_AWARD = 2,
    TASK_STATUS_EXPIRED = 3,
    TASK_STATUS_WAIT_FOR_START = 4,
    TASK_STATUS_ALWAYS_OPEN = 5,
  }
  
  public enum PBTaskIdType {
    TASK_NONE = 0,
    TASK_CHECK_IN = 1,
    TASK_BIND_SINA = 2,
    TASK_BIND_QQ = 3,
    TASK_SHARE_SINA = 4,
    TASK_SHARE_WEIXIN_TIMELINE = 5,
    TASK_SHARE_QQ_SPACE = 6,
    TASK_APP_REVIEW = 7,
    TASK_CREATE_OPUS = 8,
    TASK_GUESS_OPUS = 9,
    TASK_SHARE_OPUS = 10,
    TASK_SHARE_QQ_WEIBO = 11,
    TASK_APP_UPGRADE = 12,
    TASK_VIP = 13,
    TASK_APP_VIEW_WEB = 14,
    TASK_APP_WALL = 100,
    TASK_APP_DOWNLOAD = 200,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBKeyValue : pb::GeneratedMessage<PBKeyValue, PBKeyValue.Builder> {
    private PBKeyValue() { }
    private static readonly PBKeyValue defaultInstance = new PBKeyValue().MakeReadOnly();
    private static readonly string[] _pBKeyValueFieldNames = new string[] { "name", "value" };
    private static readonly uint[] _pBKeyValueFieldTags = new uint[] { 10, 18 };
    public static PBKeyValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBKeyValue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBKeyValue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBKeyValue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBKeyValue, PBKeyValue.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBKeyValue__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBKeyValueFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBKeyValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBKeyValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBKeyValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBKeyValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBKeyValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBKeyValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBKeyValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBKeyValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBKeyValue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBKeyValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBKeyValue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBKeyValue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBKeyValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBKeyValue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBKeyValue result;
      
      private PBKeyValue PrepareBuilder() {
        if (resultIsReadOnly) {
          PBKeyValue original = result;
          result = new PBKeyValue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBKeyValue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBKeyValue.Descriptor; }
      }
      
      public override PBKeyValue DefaultInstanceForType {
        get { return global::hdsense.PBKeyValue.DefaultInstance; }
      }
      
      public override PBKeyValue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBKeyValue) {
          return MergeFrom((PBKeyValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBKeyValue other) {
        if (other == global::hdsense.PBKeyValue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBKeyValueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBKeyValueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static PBKeyValue() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBIntKeyValue : pb::GeneratedMessage<PBIntKeyValue, PBIntKeyValue.Builder> {
    private PBIntKeyValue() { }
    private static readonly PBIntKeyValue defaultInstance = new PBIntKeyValue().MakeReadOnly();
    private static readonly string[] _pBIntKeyValueFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _pBIntKeyValueFieldTags = new uint[] { 8, 18 };
    public static PBIntKeyValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBIntKeyValue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBIntKeyValue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIntKeyValue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBIntKeyValue, PBIntKeyValue.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIntKeyValue__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private int key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public int Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private string value_ = "";
    public bool HasValue {
      get { return hasValue; }
    }
    public string Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBIntKeyValueFieldNames;
      if (hasKey) {
        output.WriteInt32(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteString(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBIntKeyValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIntKeyValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIntKeyValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIntKeyValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIntKeyValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIntKeyValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBIntKeyValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBIntKeyValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBIntKeyValue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIntKeyValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBIntKeyValue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBIntKeyValue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBIntKeyValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBIntKeyValue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBIntKeyValue result;
      
      private PBIntKeyValue PrepareBuilder() {
        if (resultIsReadOnly) {
          PBIntKeyValue original = result;
          result = new PBIntKeyValue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBIntKeyValue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBIntKeyValue.Descriptor; }
      }
      
      public override PBIntKeyValue DefaultInstanceForType {
        get { return global::hdsense.PBIntKeyValue.DefaultInstance; }
      }
      
      public override PBIntKeyValue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBIntKeyValue) {
          return MergeFrom((PBIntKeyValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBIntKeyValue other) {
        if (other == global::hdsense.PBIntKeyValue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBIntKeyValueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBIntKeyValueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKey = input.ReadInt32(ref result.key_);
              break;
            }
            case 18: {
              result.hasValue = input.ReadString(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public int Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(int value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public string Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = "";
        return this;
      }
    }
    static PBIntKeyValue() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBIntKeyIntValue : pb::GeneratedMessage<PBIntKeyIntValue, PBIntKeyIntValue.Builder> {
    private PBIntKeyIntValue() { }
    private static readonly PBIntKeyIntValue defaultInstance = new PBIntKeyIntValue().MakeReadOnly();
    private static readonly string[] _pBIntKeyIntValueFieldNames = new string[] { "key", "value" };
    private static readonly uint[] _pBIntKeyIntValueFieldTags = new uint[] { 8, 16 };
    public static PBIntKeyIntValue DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBIntKeyIntValue DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBIntKeyIntValue ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIntKeyIntValue__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBIntKeyIntValue, PBIntKeyIntValue.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIntKeyIntValue__FieldAccessorTable; }
    }
    
    public const int KeyFieldNumber = 1;
    private bool hasKey;
    private int key_;
    public bool HasKey {
      get { return hasKey; }
    }
    public int Key {
      get { return key_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBIntKeyIntValueFieldNames;
      if (hasKey) {
        output.WriteInt32(1, field_names[0], Key);
      }
      if (hasValue) {
        output.WriteInt32(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBIntKeyIntValue ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIntKeyIntValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIntKeyIntValue ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIntKeyIntValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIntKeyIntValue ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIntKeyIntValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBIntKeyIntValue ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBIntKeyIntValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBIntKeyIntValue ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIntKeyIntValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBIntKeyIntValue MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBIntKeyIntValue prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBIntKeyIntValue, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBIntKeyIntValue cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBIntKeyIntValue result;
      
      private PBIntKeyIntValue PrepareBuilder() {
        if (resultIsReadOnly) {
          PBIntKeyIntValue original = result;
          result = new PBIntKeyIntValue();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBIntKeyIntValue MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBIntKeyIntValue.Descriptor; }
      }
      
      public override PBIntKeyIntValue DefaultInstanceForType {
        get { return global::hdsense.PBIntKeyIntValue.DefaultInstance; }
      }
      
      public override PBIntKeyIntValue BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBIntKeyIntValue) {
          return MergeFrom((PBIntKeyIntValue) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBIntKeyIntValue other) {
        if (other == global::hdsense.PBIntKeyIntValue.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBIntKeyIntValueFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBIntKeyIntValueFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasKey = input.ReadInt32(ref result.key_);
              break;
            }
            case 16: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public int Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(int value) {
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static PBIntKeyIntValue() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSNSUser : pb::GeneratedMessage<PBSNSUser, PBSNSUser.Builder> {
    private PBSNSUser() { }
    private static readonly PBSNSUser defaultInstance = new PBSNSUser().MakeReadOnly();
    private static readonly string[] _pBSNSUserFieldNames = new string[] { "accessToken", "accessTokenSecret", "credential", "expireTime", "nickName", "qqOpenId", "refreshToken", "type", "userId" };
    private static readonly uint[] _pBSNSUserFieldTags = new uint[] { 34, 42, 162, 56, 26, 66, 50, 8, 18 };
    public static PBSNSUser DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSNSUser DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSNSUser ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSNSUser__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSNSUser, PBSNSUser.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSNSUser__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int UserIdFieldNumber = 2;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int NickNameFieldNumber = 3;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int AccessTokenFieldNumber = 4;
    private bool hasAccessToken;
    private string accessToken_ = "";
    public bool HasAccessToken {
      get { return hasAccessToken; }
    }
    public string AccessToken {
      get { return accessToken_; }
    }
    
    public const int AccessTokenSecretFieldNumber = 5;
    private bool hasAccessTokenSecret;
    private string accessTokenSecret_ = "";
    public bool HasAccessTokenSecret {
      get { return hasAccessTokenSecret; }
    }
    public string AccessTokenSecret {
      get { return accessTokenSecret_; }
    }
    
    public const int RefreshTokenFieldNumber = 6;
    private bool hasRefreshToken;
    private string refreshToken_ = "";
    public bool HasRefreshToken {
      get { return hasRefreshToken; }
    }
    public string RefreshToken {
      get { return refreshToken_; }
    }
    
    public const int ExpireTimeFieldNumber = 7;
    private bool hasExpireTime;
    private int expireTime_;
    public bool HasExpireTime {
      get { return hasExpireTime; }
    }
    public int ExpireTime {
      get { return expireTime_; }
    }
    
    public const int QqOpenIdFieldNumber = 8;
    private bool hasQqOpenId;
    private string qqOpenId_ = "";
    public bool HasQqOpenId {
      get { return hasQqOpenId; }
    }
    public string QqOpenId {
      get { return qqOpenId_; }
    }
    
    public const int CredentialFieldNumber = 20;
    private bool hasCredential;
    private string credential_ = "";
    public bool HasCredential {
      get { return hasCredential; }
    }
    public string Credential {
      get { return credential_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasUserId) return false;
        if (!hasNickName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSNSUserFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[7], Type);
      }
      if (hasUserId) {
        output.WriteString(2, field_names[8], UserId);
      }
      if (hasNickName) {
        output.WriteString(3, field_names[4], NickName);
      }
      if (hasAccessToken) {
        output.WriteString(4, field_names[0], AccessToken);
      }
      if (hasAccessTokenSecret) {
        output.WriteString(5, field_names[1], AccessTokenSecret);
      }
      if (hasRefreshToken) {
        output.WriteString(6, field_names[6], RefreshToken);
      }
      if (hasExpireTime) {
        output.WriteInt32(7, field_names[3], ExpireTime);
      }
      if (hasQqOpenId) {
        output.WriteString(8, field_names[5], QqOpenId);
      }
      if (hasCredential) {
        output.WriteString(20, field_names[2], Credential);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserId);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, NickName);
        }
        if (hasAccessToken) {
          size += pb::CodedOutputStream.ComputeStringSize(4, AccessToken);
        }
        if (hasAccessTokenSecret) {
          size += pb::CodedOutputStream.ComputeStringSize(5, AccessTokenSecret);
        }
        if (hasRefreshToken) {
          size += pb::CodedOutputStream.ComputeStringSize(6, RefreshToken);
        }
        if (hasExpireTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, ExpireTime);
        }
        if (hasQqOpenId) {
          size += pb::CodedOutputStream.ComputeStringSize(8, QqOpenId);
        }
        if (hasCredential) {
          size += pb::CodedOutputStream.ComputeStringSize(20, Credential);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSNSUser ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSNSUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSNSUser ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSNSUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSNSUser ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSNSUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSNSUser ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSNSUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSNSUser ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSNSUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSNSUser MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSNSUser prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSNSUser, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSNSUser cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSNSUser result;
      
      private PBSNSUser PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSNSUser original = result;
          result = new PBSNSUser();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSNSUser MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSNSUser.Descriptor; }
      }
      
      public override PBSNSUser DefaultInstanceForType {
        get { return global::hdsense.PBSNSUser.DefaultInstance; }
      }
      
      public override PBSNSUser BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSNSUser) {
          return MergeFrom((PBSNSUser) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSNSUser other) {
        if (other == global::hdsense.PBSNSUser.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasAccessToken) {
          AccessToken = other.AccessToken;
        }
        if (other.HasAccessTokenSecret) {
          AccessTokenSecret = other.AccessTokenSecret;
        }
        if (other.HasRefreshToken) {
          RefreshToken = other.RefreshToken;
        }
        if (other.HasExpireTime) {
          ExpireTime = other.ExpireTime;
        }
        if (other.HasQqOpenId) {
          QqOpenId = other.QqOpenId;
        }
        if (other.HasCredential) {
          Credential = other.Credential;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSNSUserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSNSUserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 26: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 34: {
              result.hasAccessToken = input.ReadString(ref result.accessToken_);
              break;
            }
            case 42: {
              result.hasAccessTokenSecret = input.ReadString(ref result.accessTokenSecret_);
              break;
            }
            case 50: {
              result.hasRefreshToken = input.ReadString(ref result.refreshToken_);
              break;
            }
            case 56: {
              result.hasExpireTime = input.ReadInt32(ref result.expireTime_);
              break;
            }
            case 66: {
              result.hasQqOpenId = input.ReadString(ref result.qqOpenId_);
              break;
            }
            case 162: {
              result.hasCredential = input.ReadString(ref result.credential_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasAccessToken {
        get { return result.hasAccessToken; }
      }
      public string AccessToken {
        get { return result.AccessToken; }
        set { SetAccessToken(value); }
      }
      public Builder SetAccessToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccessToken = true;
        result.accessToken_ = value;
        return this;
      }
      public Builder ClearAccessToken() {
        PrepareBuilder();
        result.hasAccessToken = false;
        result.accessToken_ = "";
        return this;
      }
      
      public bool HasAccessTokenSecret {
        get { return result.hasAccessTokenSecret; }
      }
      public string AccessTokenSecret {
        get { return result.AccessTokenSecret; }
        set { SetAccessTokenSecret(value); }
      }
      public Builder SetAccessTokenSecret(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccessTokenSecret = true;
        result.accessTokenSecret_ = value;
        return this;
      }
      public Builder ClearAccessTokenSecret() {
        PrepareBuilder();
        result.hasAccessTokenSecret = false;
        result.accessTokenSecret_ = "";
        return this;
      }
      
      public bool HasRefreshToken {
        get { return result.hasRefreshToken; }
      }
      public string RefreshToken {
        get { return result.RefreshToken; }
        set { SetRefreshToken(value); }
      }
      public Builder SetRefreshToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRefreshToken = true;
        result.refreshToken_ = value;
        return this;
      }
      public Builder ClearRefreshToken() {
        PrepareBuilder();
        result.hasRefreshToken = false;
        result.refreshToken_ = "";
        return this;
      }
      
      public bool HasExpireTime {
        get { return result.hasExpireTime; }
      }
      public int ExpireTime {
        get { return result.ExpireTime; }
        set { SetExpireTime(value); }
      }
      public Builder SetExpireTime(int value) {
        PrepareBuilder();
        result.hasExpireTime = true;
        result.expireTime_ = value;
        return this;
      }
      public Builder ClearExpireTime() {
        PrepareBuilder();
        result.hasExpireTime = false;
        result.expireTime_ = 0;
        return this;
      }
      
      public bool HasQqOpenId {
        get { return result.hasQqOpenId; }
      }
      public string QqOpenId {
        get { return result.QqOpenId; }
        set { SetQqOpenId(value); }
      }
      public Builder SetQqOpenId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQqOpenId = true;
        result.qqOpenId_ = value;
        return this;
      }
      public Builder ClearQqOpenId() {
        PrepareBuilder();
        result.hasQqOpenId = false;
        result.qqOpenId_ = "";
        return this;
      }
      
      public bool HasCredential {
        get { return result.hasCredential; }
      }
      public string Credential {
        get { return result.Credential; }
        set { SetCredential(value); }
      }
      public Builder SetCredential(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCredential = true;
        result.credential_ = value;
        return this;
      }
      public Builder ClearCredential() {
        PrepareBuilder();
        result.hasCredential = false;
        result.credential_ = "";
        return this;
      }
    }
    static PBSNSUser() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSNSUserCredential : pb::GeneratedMessage<PBSNSUserCredential, PBSNSUserCredential.Builder> {
    private PBSNSUserCredential() { }
    private static readonly PBSNSUserCredential defaultInstance = new PBSNSUserCredential().MakeReadOnly();
    private static readonly string[] _pBSNSUserCredentialFieldNames = new string[] { "credential", "type" };
    private static readonly uint[] _pBSNSUserCredentialFieldTags = new uint[] { 162, 8 };
    public static PBSNSUserCredential DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSNSUserCredential DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSNSUserCredential ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSNSUserCredential__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSNSUserCredential, PBSNSUserCredential.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSNSUserCredential__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int CredentialFieldNumber = 20;
    private bool hasCredential;
    private string credential_ = "";
    public bool HasCredential {
      get { return hasCredential; }
    }
    public string Credential {
      get { return credential_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSNSUserCredentialFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[1], Type);
      }
      if (hasCredential) {
        output.WriteString(20, field_names[0], Credential);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasCredential) {
          size += pb::CodedOutputStream.ComputeStringSize(20, Credential);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSNSUserCredential ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSNSUserCredential ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSNSUserCredential ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSNSUserCredential ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSNSUserCredential ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSNSUserCredential ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSNSUserCredential ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSNSUserCredential ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSNSUserCredential ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSNSUserCredential ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSNSUserCredential MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSNSUserCredential prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSNSUserCredential, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSNSUserCredential cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSNSUserCredential result;
      
      private PBSNSUserCredential PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSNSUserCredential original = result;
          result = new PBSNSUserCredential();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSNSUserCredential MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSNSUserCredential.Descriptor; }
      }
      
      public override PBSNSUserCredential DefaultInstanceForType {
        get { return global::hdsense.PBSNSUserCredential.DefaultInstance; }
      }
      
      public override PBSNSUserCredential BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSNSUserCredential) {
          return MergeFrom((PBSNSUserCredential) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSNSUserCredential other) {
        if (other == global::hdsense.PBSNSUserCredential.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasCredential) {
          Credential = other.Credential;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSNSUserCredentialFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSNSUserCredentialFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 162: {
              result.hasCredential = input.ReadString(ref result.credential_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasCredential {
        get { return result.hasCredential; }
      }
      public string Credential {
        get { return result.Credential; }
        set { SetCredential(value); }
      }
      public Builder SetCredential(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCredential = true;
        result.credential_ = value;
        return this;
      }
      public Builder ClearCredential() {
        PrepareBuilder();
        result.hasCredential = false;
        result.credential_ = "";
        return this;
      }
    }
    static PBSNSUserCredential() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserLevel : pb::GeneratedMessage<PBUserLevel, PBUserLevel.Builder> {
    private PBUserLevel() { }
    private static readonly PBUserLevel defaultInstance = new PBUserLevel().MakeReadOnly();
    private static readonly string[] _pBUserLevelFieldNames = new string[] { "exp", "gameId", "level" };
    private static readonly uint[] _pBUserLevelFieldTags = new uint[] { 24, 10, 16 };
    public static PBUserLevel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserLevel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserLevel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserLevel, PBUserLevel.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserLevel__FieldAccessorTable; }
    }
    
    public const int GameIdFieldNumber = 1;
    private bool hasGameId;
    private string gameId_ = "";
    public bool HasGameId {
      get { return hasGameId; }
    }
    public string GameId {
      get { return gameId_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_ = 1;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int ExpFieldNumber = 3;
    private bool hasExp;
    private long exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public long Exp {
      get { return exp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGameId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserLevelFieldNames;
      if (hasGameId) {
        output.WriteString(1, field_names[1], GameId);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[2], Level);
      }
      if (hasExp) {
        output.WriteInt64(3, field_names[0], Exp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGameId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GameId);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
        }
        if (hasExp) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, Exp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserLevel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserLevel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserLevel result;
      
      private PBUserLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserLevel original = result;
          result = new PBUserLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBUserLevel.Descriptor; }
      }
      
      public override PBUserLevel DefaultInstanceForType {
        get { return global::hdsense.PBUserLevel.DefaultInstance; }
      }
      
      public override PBUserLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserLevel) {
          return MergeFrom((PBUserLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserLevel other) {
        if (other == global::hdsense.PBUserLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGameId) {
          GameId = other.GameId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGameId = input.ReadString(ref result.gameId_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasExp = input.ReadInt64(ref result.exp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGameId {
        get { return result.hasGameId; }
      }
      public string GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder ClearGameId() {
        PrepareBuilder();
        result.hasGameId = false;
        result.gameId_ = "";
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 1;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public long Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(long value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0L;
        return this;
      }
    }
    static PBUserLevel() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGameUser : pb::GeneratedMessage<PBGameUser, PBGameUser.Builder> {
    private PBGameUser() { }
    private static readonly PBGameUser defaultInstance = new PBGameUser().MakeReadOnly();
    private static readonly string[] _pBGameUserFieldNames = new string[] { "attributes", "avatar", "backgroundURL", "birthday", "blockDeviceIds", "bloodGroup", "cameraMode", "canCreateActivity", "canCreateContest", "canShakeNumber", "coinBalance", "countryCode", "deviceId", "deviceModel", "deviceOS", "deviceToken", "deviceType", "email", "emailVCode", "emailVStatus", "emailVerifyStatus", "experience", "fanCount", "featureOpus", "followCount", "friendMemo", "gender", "groupInfo", "identityCardNumber", "ingotBalance", "isJailBroken", "items", "language", "latitude", "level", "location", "longitude", "mobileVStatus", "nickName", "offGroupIds", "openInfoType", "opusCoverflowType", "password", "permissions", "phonenumber", "qqId", "qrUrl", "realAddress", "realName", "recommendStartDate", "recommendStatus", "recommends", "regDate", "regFrom", "seatId", "shakeNumberTimes", "shotTitleName", "signature", "sinaId", "singRecordLimit", "snsCredentials", "snsUsers", "status", "takeCoins", "updateDate", "userId", "userLevel", "userRoleType", "vip", "vipExpireDate", "vipLastPayDate", "visitDate", "weixinId", "xiaojiNumber", "zodiac" };
    private static readonly uint[] _pBGameUserFieldTags = new uint[] { 178, 26, 290, 266, 602, 650, 66, 352, 360, 832, 408, 306, 586, 570, 578, 298, 594, 250, 1026, 1016, 824, 336, 656, 808, 664, 818, 32, 1202, 130, 416, 688, 490, 314, 681, 328, 50, 673, 1032, 18, 1210, 728, 736, 258, 1218, 242, 962, 162, 138, 122, 104, 96, 114, 984, 992, 72, 840, 146, 802, 970, 1600, 90, 42, 344, 848, 1008, 10, 56, 744, 880, 888, 896, 1000, 978, 82, 272 };
    public static PBGameUser DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGameUser DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGameUser ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGameUser__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGameUser, PBGameUser.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGameUser__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int NickNameFieldNumber = 2;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int AvatarFieldNumber = 3;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int GenderFieldNumber = 4;
    private bool hasGender;
    private bool gender_;
    public bool HasGender {
      get { return hasGender; }
    }
    public bool Gender {
      get { return gender_; }
    }
    
    public const int SnsUsersFieldNumber = 5;
    private pbc::PopsicleList<global::hdsense.PBSNSUser> snsUsers_ = new pbc::PopsicleList<global::hdsense.PBSNSUser>();
    public scg::IList<global::hdsense.PBSNSUser> SnsUsersList {
      get { return snsUsers_; }
    }
    public int SnsUsersCount {
      get { return snsUsers_.Count; }
    }
    public global::hdsense.PBSNSUser GetSnsUsers(int index) {
      return snsUsers_[index];
    }
    
    public const int LocationFieldNumber = 6;
    private bool hasLocation;
    private string location_ = "";
    public bool HasLocation {
      get { return hasLocation; }
    }
    public string Location {
      get { return location_; }
    }
    
    public const int UserLevelFieldNumber = 7;
    private bool hasUserLevel;
    private int userLevel_;
    public bool HasUserLevel {
      get { return hasUserLevel; }
    }
    public int UserLevel {
      get { return userLevel_; }
    }
    
    public const int CameraModeFieldNumber = 8;
    private bool hasCameraMode;
    private string cameraMode_ = "";
    public bool HasCameraMode {
      get { return hasCameraMode; }
    }
    public string CameraMode {
      get { return cameraMode_; }
    }
    
    public const int SeatIdFieldNumber = 9;
    private bool hasSeatId;
    private int seatId_;
    public bool HasSeatId {
      get { return hasSeatId; }
    }
    public int SeatId {
      get { return seatId_; }
    }
    
    public const int XiaojiNumberFieldNumber = 10;
    private bool hasXiaojiNumber;
    private string xiaojiNumber_ = "";
    public bool HasXiaojiNumber {
      get { return hasXiaojiNumber; }
    }
    public string XiaojiNumber {
      get { return xiaojiNumber_; }
    }
    
    public const int SnsCredentialsFieldNumber = 11;
    private pbc::PopsicleList<global::hdsense.PBSNSUserCredential> snsCredentials_ = new pbc::PopsicleList<global::hdsense.PBSNSUserCredential>();
    public scg::IList<global::hdsense.PBSNSUserCredential> SnsCredentialsList {
      get { return snsCredentials_; }
    }
    public int SnsCredentialsCount {
      get { return snsCredentials_.Count; }
    }
    public global::hdsense.PBSNSUserCredential GetSnsCredentials(int index) {
      return snsCredentials_[index];
    }
    
    public const int RecommendStatusFieldNumber = 12;
    private bool hasRecommendStatus;
    private int recommendStatus_;
    public bool HasRecommendStatus {
      get { return hasRecommendStatus; }
    }
    public int RecommendStatus {
      get { return recommendStatus_; }
    }
    
    public const int RecommendStartDateFieldNumber = 13;
    private bool hasRecommendStartDate;
    private int recommendStartDate_;
    public bool HasRecommendStartDate {
      get { return hasRecommendStartDate; }
    }
    public int RecommendStartDate {
      get { return recommendStartDate_; }
    }
    
    public const int RecommendsFieldNumber = 14;
    private bool hasRecommends;
    private string recommends_ = "";
    public bool HasRecommends {
      get { return hasRecommends; }
    }
    public string Recommends {
      get { return recommends_; }
    }
    
    public const int RealNameFieldNumber = 15;
    private bool hasRealName;
    private string realName_ = "";
    public bool HasRealName {
      get { return hasRealName; }
    }
    public string RealName {
      get { return realName_; }
    }
    
    public const int IdentityCardNumberFieldNumber = 16;
    private bool hasIdentityCardNumber;
    private string identityCardNumber_ = "";
    public bool HasIdentityCardNumber {
      get { return hasIdentityCardNumber; }
    }
    public string IdentityCardNumber {
      get { return identityCardNumber_; }
    }
    
    public const int RealAddressFieldNumber = 17;
    private bool hasRealAddress;
    private string realAddress_ = "";
    public bool HasRealAddress {
      get { return hasRealAddress; }
    }
    public string RealAddress {
      get { return realAddress_; }
    }
    
    public const int ShotTitleNameFieldNumber = 18;
    private bool hasShotTitleName;
    private string shotTitleName_ = "";
    public bool HasShotTitleName {
      get { return hasShotTitleName; }
    }
    public string ShotTitleName {
      get { return shotTitleName_; }
    }
    
    public const int QrUrlFieldNumber = 20;
    private bool hasQrUrl;
    private string qrUrl_ = "";
    public bool HasQrUrl {
      get { return hasQrUrl; }
    }
    public string QrUrl {
      get { return qrUrl_; }
    }
    
    public const int AttributesFieldNumber = 22;
    private pbc::PopsicleList<global::hdsense.PBKeyValue> attributes_ = new pbc::PopsicleList<global::hdsense.PBKeyValue>();
    public scg::IList<global::hdsense.PBKeyValue> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::hdsense.PBKeyValue GetAttributes(int index) {
      return attributes_[index];
    }
    
    public const int PhonenumberFieldNumber = 30;
    private bool hasPhonenumber;
    private string phonenumber_ = "";
    public bool HasPhonenumber {
      get { return hasPhonenumber; }
    }
    public string Phonenumber {
      get { return phonenumber_; }
    }
    
    public const int EmailFieldNumber = 31;
    private bool hasEmail;
    private string email_ = "";
    public bool HasEmail {
      get { return hasEmail; }
    }
    public string Email {
      get { return email_; }
    }
    
    public const int PasswordFieldNumber = 32;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int BirthdayFieldNumber = 33;
    private bool hasBirthday;
    private string birthday_ = "";
    public bool HasBirthday {
      get { return hasBirthday; }
    }
    public string Birthday {
      get { return birthday_; }
    }
    
    public const int ZodiacFieldNumber = 34;
    private bool hasZodiac;
    private int zodiac_;
    public bool HasZodiac {
      get { return hasZodiac; }
    }
    public int Zodiac {
      get { return zodiac_; }
    }
    
    public const int BackgroundURLFieldNumber = 36;
    private bool hasBackgroundURL;
    private string backgroundURL_ = "";
    public bool HasBackgroundURL {
      get { return hasBackgroundURL; }
    }
    public string BackgroundURL {
      get { return backgroundURL_; }
    }
    
    public const int DeviceTokenFieldNumber = 37;
    private bool hasDeviceToken;
    private string deviceToken_ = "";
    public bool HasDeviceToken {
      get { return hasDeviceToken; }
    }
    public string DeviceToken {
      get { return deviceToken_; }
    }
    
    public const int CountryCodeFieldNumber = 38;
    private bool hasCountryCode;
    private string countryCode_ = "";
    public bool HasCountryCode {
      get { return hasCountryCode; }
    }
    public string CountryCode {
      get { return countryCode_; }
    }
    
    public const int LanguageFieldNumber = 39;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public const int LevelFieldNumber = 41;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int ExperienceFieldNumber = 42;
    private bool hasExperience;
    private long experience_;
    public bool HasExperience {
      get { return hasExperience; }
    }
    public long Experience {
      get { return experience_; }
    }
    
    public const int StatusFieldNumber = 43;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int CanCreateActivityFieldNumber = 44;
    private bool hasCanCreateActivity;
    private bool canCreateActivity_;
    public bool HasCanCreateActivity {
      get { return hasCanCreateActivity; }
    }
    public bool CanCreateActivity {
      get { return canCreateActivity_; }
    }
    
    public const int CanCreateContestFieldNumber = 45;
    private bool hasCanCreateContest;
    private bool canCreateContest_;
    public bool HasCanCreateContest {
      get { return hasCanCreateContest; }
    }
    public bool CanCreateContest {
      get { return canCreateContest_; }
    }
    
    public const int CoinBalanceFieldNumber = 51;
    private bool hasCoinBalance;
    private int coinBalance_;
    public bool HasCoinBalance {
      get { return hasCoinBalance; }
    }
    public int CoinBalance {
      get { return coinBalance_; }
    }
    
    public const int IngotBalanceFieldNumber = 52;
    private bool hasIngotBalance;
    private int ingotBalance_;
    public bool HasIngotBalance {
      get { return hasIngotBalance; }
    }
    public int IngotBalance {
      get { return ingotBalance_; }
    }
    
    public const int ItemsFieldNumber = 61;
    private pbc::PopsicleList<global::hdsense.PBUserItem> items_ = new pbc::PopsicleList<global::hdsense.PBUserItem>();
    public scg::IList<global::hdsense.PBUserItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::hdsense.PBUserItem GetItems(int index) {
      return items_[index];
    }
    
    public const int DeviceModelFieldNumber = 71;
    private bool hasDeviceModel;
    private string deviceModel_ = "";
    public bool HasDeviceModel {
      get { return hasDeviceModel; }
    }
    public string DeviceModel {
      get { return deviceModel_; }
    }
    
    public const int DeviceOSFieldNumber = 72;
    private bool hasDeviceOS;
    private string deviceOS_ = "";
    public bool HasDeviceOS {
      get { return hasDeviceOS; }
    }
    public string DeviceOS {
      get { return deviceOS_; }
    }
    
    public const int DeviceIdFieldNumber = 73;
    private bool hasDeviceId;
    private string deviceId_ = "";
    public bool HasDeviceId {
      get { return hasDeviceId; }
    }
    public string DeviceId {
      get { return deviceId_; }
    }
    
    public const int DeviceTypeFieldNumber = 74;
    private bool hasDeviceType;
    private string deviceType_ = "";
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public string DeviceType {
      get { return deviceType_; }
    }
    
    public const int BlockDeviceIdsFieldNumber = 75;
    private pbc::PopsicleList<string> blockDeviceIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> BlockDeviceIdsList {
      get { return pbc::Lists.AsReadOnly(blockDeviceIds_); }
    }
    public int BlockDeviceIdsCount {
      get { return blockDeviceIds_.Count; }
    }
    public string GetBlockDeviceIds(int index) {
      return blockDeviceIds_[index];
    }
    
    public const int BloodGroupFieldNumber = 81;
    private bool hasBloodGroup;
    private string bloodGroup_ = "";
    public bool HasBloodGroup {
      get { return hasBloodGroup; }
    }
    public string BloodGroup {
      get { return bloodGroup_; }
    }
    
    public const int FanCountFieldNumber = 82;
    private bool hasFanCount;
    private int fanCount_;
    public bool HasFanCount {
      get { return hasFanCount; }
    }
    public int FanCount {
      get { return fanCount_; }
    }
    
    public const int FollowCountFieldNumber = 83;
    private bool hasFollowCount;
    private int followCount_;
    public bool HasFollowCount {
      get { return hasFollowCount; }
    }
    public int FollowCount {
      get { return followCount_; }
    }
    
    public const int LongitudeFieldNumber = 84;
    private bool hasLongitude;
    private double longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public double Longitude {
      get { return longitude_; }
    }
    
    public const int LatitudeFieldNumber = 85;
    private bool hasLatitude;
    private double latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public double Latitude {
      get { return latitude_; }
    }
    
    public const int IsJailBrokenFieldNumber = 86;
    private bool hasIsJailBroken;
    private bool isJailBroken_;
    public bool HasIsJailBroken {
      get { return hasIsJailBroken; }
    }
    public bool IsJailBroken {
      get { return isJailBroken_; }
    }
    
    public const int OpenInfoTypeFieldNumber = 91;
    private bool hasOpenInfoType;
    private global::hdsense.PBOpenInfoType openInfoType_ = global::hdsense.PBOpenInfoType.OPEN_TO_FRIEND;
    public bool HasOpenInfoType {
      get { return hasOpenInfoType; }
    }
    public global::hdsense.PBOpenInfoType OpenInfoType {
      get { return openInfoType_; }
    }
    
    public const int OpusCoverflowTypeFieldNumber = 92;
    private bool hasOpusCoverflowType;
    private int opusCoverflowType_;
    public bool HasOpusCoverflowType {
      get { return hasOpusCoverflowType; }
    }
    public int OpusCoverflowType {
      get { return opusCoverflowType_; }
    }
    
    public const int UserRoleTypeFieldNumber = 93;
    private bool hasUserRoleType;
    private global::hdsense.PBOUserRoleType userRoleType_ = global::hdsense.PBOUserRoleType.GUESS_USER;
    public bool HasUserRoleType {
      get { return hasUserRoleType; }
    }
    public global::hdsense.PBOUserRoleType UserRoleType {
      get { return userRoleType_; }
    }
    
    public const int SignatureFieldNumber = 100;
    private bool hasSignature;
    private string signature_ = "";
    public bool HasSignature {
      get { return hasSignature; }
    }
    public string Signature {
      get { return signature_; }
    }
    
    public const int FeatureOpusFieldNumber = 101;
    private bool hasFeatureOpus;
    private int featureOpus_;
    public bool HasFeatureOpus {
      get { return hasFeatureOpus; }
    }
    public int FeatureOpus {
      get { return featureOpus_; }
    }
    
    public const int FriendMemoFieldNumber = 102;
    private bool hasFriendMemo;
    private string friendMemo_ = "";
    public bool HasFriendMemo {
      get { return hasFriendMemo; }
    }
    public string FriendMemo {
      get { return friendMemo_; }
    }
    
    public const int EmailVerifyStatusFieldNumber = 103;
    private bool hasEmailVerifyStatus;
    private int emailVerifyStatus_;
    public bool HasEmailVerifyStatus {
      get { return hasEmailVerifyStatus; }
    }
    public int EmailVerifyStatus {
      get { return emailVerifyStatus_; }
    }
    
    public const int CanShakeNumberFieldNumber = 104;
    private bool hasCanShakeNumber;
    private bool canShakeNumber_;
    public bool HasCanShakeNumber {
      get { return hasCanShakeNumber; }
    }
    public bool CanShakeNumber {
      get { return canShakeNumber_; }
    }
    
    public const int ShakeNumberTimesFieldNumber = 105;
    private bool hasShakeNumberTimes;
    private int shakeNumberTimes_;
    public bool HasShakeNumberTimes {
      get { return hasShakeNumberTimes; }
    }
    public int ShakeNumberTimes {
      get { return shakeNumberTimes_; }
    }
    
    public const int TakeCoinsFieldNumber = 106;
    private bool hasTakeCoins;
    private int takeCoins_;
    public bool HasTakeCoins {
      get { return hasTakeCoins; }
    }
    public int TakeCoins {
      get { return takeCoins_; }
    }
    
    public const int VipFieldNumber = 110;
    private bool hasVip;
    private int vip_;
    public bool HasVip {
      get { return hasVip; }
    }
    public int Vip {
      get { return vip_; }
    }
    
    public const int VipExpireDateFieldNumber = 111;
    private bool hasVipExpireDate;
    private int vipExpireDate_;
    public bool HasVipExpireDate {
      get { return hasVipExpireDate; }
    }
    public int VipExpireDate {
      get { return vipExpireDate_; }
    }
    
    public const int VipLastPayDateFieldNumber = 112;
    private bool hasVipLastPayDate;
    private int vipLastPayDate_;
    public bool HasVipLastPayDate {
      get { return hasVipLastPayDate; }
    }
    public int VipLastPayDate {
      get { return vipLastPayDate_; }
    }
    
    public const int QqIdFieldNumber = 120;
    private bool hasQqId;
    private string qqId_ = "";
    public bool HasQqId {
      get { return hasQqId; }
    }
    public string QqId {
      get { return qqId_; }
    }
    
    public const int SinaIdFieldNumber = 121;
    private bool hasSinaId;
    private string sinaId_ = "";
    public bool HasSinaId {
      get { return hasSinaId; }
    }
    public string SinaId {
      get { return sinaId_; }
    }
    
    public const int WeixinIdFieldNumber = 122;
    private bool hasWeixinId;
    private string weixinId_ = "";
    public bool HasWeixinId {
      get { return hasWeixinId; }
    }
    public string WeixinId {
      get { return weixinId_; }
    }
    
    public const int RegDateFieldNumber = 123;
    private bool hasRegDate;
    private int regDate_;
    public bool HasRegDate {
      get { return hasRegDate; }
    }
    public int RegDate {
      get { return regDate_; }
    }
    
    public const int RegFromFieldNumber = 124;
    private bool hasRegFrom;
    private int regFrom_;
    public bool HasRegFrom {
      get { return hasRegFrom; }
    }
    public int RegFrom {
      get { return regFrom_; }
    }
    
    public const int VisitDateFieldNumber = 125;
    private bool hasVisitDate;
    private int visitDate_;
    public bool HasVisitDate {
      get { return hasVisitDate; }
    }
    public int VisitDate {
      get { return visitDate_; }
    }
    
    public const int UpdateDateFieldNumber = 126;
    private bool hasUpdateDate;
    private int updateDate_;
    public bool HasUpdateDate {
      get { return hasUpdateDate; }
    }
    public int UpdateDate {
      get { return updateDate_; }
    }
    
    public const int EmailVStatusFieldNumber = 127;
    private bool hasEmailVStatus;
    private int emailVStatus_;
    public bool HasEmailVStatus {
      get { return hasEmailVStatus; }
    }
    public int EmailVStatus {
      get { return emailVStatus_; }
    }
    
    public const int EmailVCodeFieldNumber = 128;
    private bool hasEmailVCode;
    private string emailVCode_ = "";
    public bool HasEmailVCode {
      get { return hasEmailVCode; }
    }
    public string EmailVCode {
      get { return emailVCode_; }
    }
    
    public const int MobileVStatusFieldNumber = 129;
    private bool hasMobileVStatus;
    private int mobileVStatus_;
    public bool HasMobileVStatus {
      get { return hasMobileVStatus; }
    }
    public int MobileVStatus {
      get { return mobileVStatus_; }
    }
    
    public const int GroupInfoFieldNumber = 150;
    private bool hasGroupInfo;
    private global::hdsense.PBSimpleGroup groupInfo_;
    public bool HasGroupInfo {
      get { return hasGroupInfo; }
    }
    public global::hdsense.PBSimpleGroup GroupInfo {
      get { return groupInfo_ ?? global::hdsense.PBSimpleGroup.DefaultInstance; }
    }
    
    public const int OffGroupIdsFieldNumber = 151;
    private pbc::PopsicleList<string> offGroupIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> OffGroupIdsList {
      get { return pbc::Lists.AsReadOnly(offGroupIds_); }
    }
    public int OffGroupIdsCount {
      get { return offGroupIds_.Count; }
    }
    public string GetOffGroupIds(int index) {
      return offGroupIds_[index];
    }
    
    public const int PermissionsFieldNumber = 152;
    private pbc::PopsicleList<string> permissions_ = new pbc::PopsicleList<string>();
    public scg::IList<string> PermissionsList {
      get { return pbc::Lists.AsReadOnly(permissions_); }
    }
    public int PermissionsCount {
      get { return permissions_.Count; }
    }
    public string GetPermissions(int index) {
      return permissions_[index];
    }
    
    public const int SingRecordLimitFieldNumber = 200;
    private bool hasSingRecordLimit;
    private int singRecordLimit_ = 60;
    public bool HasSingRecordLimit {
      get { return hasSingRecordLimit; }
    }
    public int SingRecordLimit {
      get { return singRecordLimit_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        if (!hasNickName) return false;
        foreach (global::hdsense.PBSNSUser element in SnsUsersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBSNSUserCredential element in SnsCredentialsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBKeyValue element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::hdsense.PBUserItem element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasGroupInfo) {
          if (!GroupInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGameUserFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[65], UserId);
      }
      if (hasNickName) {
        output.WriteString(2, field_names[38], NickName);
      }
      if (hasAvatar) {
        output.WriteString(3, field_names[1], Avatar);
      }
      if (hasGender) {
        output.WriteBool(4, field_names[26], Gender);
      }
      if (snsUsers_.Count > 0) {
        output.WriteMessageArray(5, field_names[61], snsUsers_);
      }
      if (hasLocation) {
        output.WriteString(6, field_names[35], Location);
      }
      if (hasUserLevel) {
        output.WriteInt32(7, field_names[66], UserLevel);
      }
      if (hasCameraMode) {
        output.WriteString(8, field_names[6], CameraMode);
      }
      if (hasSeatId) {
        output.WriteInt32(9, field_names[54], SeatId);
      }
      if (hasXiaojiNumber) {
        output.WriteString(10, field_names[73], XiaojiNumber);
      }
      if (snsCredentials_.Count > 0) {
        output.WriteMessageArray(11, field_names[60], snsCredentials_);
      }
      if (hasRecommendStatus) {
        output.WriteInt32(12, field_names[50], RecommendStatus);
      }
      if (hasRecommendStartDate) {
        output.WriteInt32(13, field_names[49], RecommendStartDate);
      }
      if (hasRecommends) {
        output.WriteString(14, field_names[51], Recommends);
      }
      if (hasRealName) {
        output.WriteString(15, field_names[48], RealName);
      }
      if (hasIdentityCardNumber) {
        output.WriteString(16, field_names[28], IdentityCardNumber);
      }
      if (hasRealAddress) {
        output.WriteString(17, field_names[47], RealAddress);
      }
      if (hasShotTitleName) {
        output.WriteString(18, field_names[56], ShotTitleName);
      }
      if (hasQrUrl) {
        output.WriteString(20, field_names[46], QrUrl);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(22, field_names[0], attributes_);
      }
      if (hasPhonenumber) {
        output.WriteString(30, field_names[44], Phonenumber);
      }
      if (hasEmail) {
        output.WriteString(31, field_names[17], Email);
      }
      if (hasPassword) {
        output.WriteString(32, field_names[42], Password);
      }
      if (hasBirthday) {
        output.WriteString(33, field_names[3], Birthday);
      }
      if (hasZodiac) {
        output.WriteInt32(34, field_names[74], Zodiac);
      }
      if (hasBackgroundURL) {
        output.WriteString(36, field_names[2], BackgroundURL);
      }
      if (hasDeviceToken) {
        output.WriteString(37, field_names[15], DeviceToken);
      }
      if (hasCountryCode) {
        output.WriteString(38, field_names[11], CountryCode);
      }
      if (hasLanguage) {
        output.WriteString(39, field_names[32], Language);
      }
      if (hasLevel) {
        output.WriteInt32(41, field_names[34], Level);
      }
      if (hasExperience) {
        output.WriteInt64(42, field_names[21], Experience);
      }
      if (hasStatus) {
        output.WriteInt32(43, field_names[62], Status);
      }
      if (hasCanCreateActivity) {
        output.WriteBool(44, field_names[7], CanCreateActivity);
      }
      if (hasCanCreateContest) {
        output.WriteBool(45, field_names[8], CanCreateContest);
      }
      if (hasCoinBalance) {
        output.WriteInt32(51, field_names[10], CoinBalance);
      }
      if (hasIngotBalance) {
        output.WriteInt32(52, field_names[29], IngotBalance);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(61, field_names[31], items_);
      }
      if (hasDeviceModel) {
        output.WriteString(71, field_names[13], DeviceModel);
      }
      if (hasDeviceOS) {
        output.WriteString(72, field_names[14], DeviceOS);
      }
      if (hasDeviceId) {
        output.WriteString(73, field_names[12], DeviceId);
      }
      if (hasDeviceType) {
        output.WriteString(74, field_names[16], DeviceType);
      }
      if (blockDeviceIds_.Count > 0) {
        output.WriteStringArray(75, field_names[4], blockDeviceIds_);
      }
      if (hasBloodGroup) {
        output.WriteString(81, field_names[5], BloodGroup);
      }
      if (hasFanCount) {
        output.WriteInt32(82, field_names[22], FanCount);
      }
      if (hasFollowCount) {
        output.WriteInt32(83, field_names[24], FollowCount);
      }
      if (hasLongitude) {
        output.WriteDouble(84, field_names[36], Longitude);
      }
      if (hasLatitude) {
        output.WriteDouble(85, field_names[33], Latitude);
      }
      if (hasIsJailBroken) {
        output.WriteBool(86, field_names[30], IsJailBroken);
      }
      if (hasOpenInfoType) {
        output.WriteEnum(91, field_names[40], (int) OpenInfoType, OpenInfoType);
      }
      if (hasOpusCoverflowType) {
        output.WriteInt32(92, field_names[41], OpusCoverflowType);
      }
      if (hasUserRoleType) {
        output.WriteEnum(93, field_names[67], (int) UserRoleType, UserRoleType);
      }
      if (hasSignature) {
        output.WriteString(100, field_names[57], Signature);
      }
      if (hasFeatureOpus) {
        output.WriteInt32(101, field_names[23], FeatureOpus);
      }
      if (hasFriendMemo) {
        output.WriteString(102, field_names[25], FriendMemo);
      }
      if (hasEmailVerifyStatus) {
        output.WriteInt32(103, field_names[20], EmailVerifyStatus);
      }
      if (hasCanShakeNumber) {
        output.WriteBool(104, field_names[9], CanShakeNumber);
      }
      if (hasShakeNumberTimes) {
        output.WriteInt32(105, field_names[55], ShakeNumberTimes);
      }
      if (hasTakeCoins) {
        output.WriteInt32(106, field_names[63], TakeCoins);
      }
      if (hasVip) {
        output.WriteInt32(110, field_names[68], Vip);
      }
      if (hasVipExpireDate) {
        output.WriteInt32(111, field_names[69], VipExpireDate);
      }
      if (hasVipLastPayDate) {
        output.WriteInt32(112, field_names[70], VipLastPayDate);
      }
      if (hasQqId) {
        output.WriteString(120, field_names[45], QqId);
      }
      if (hasSinaId) {
        output.WriteString(121, field_names[58], SinaId);
      }
      if (hasWeixinId) {
        output.WriteString(122, field_names[72], WeixinId);
      }
      if (hasRegDate) {
        output.WriteInt32(123, field_names[52], RegDate);
      }
      if (hasRegFrom) {
        output.WriteInt32(124, field_names[53], RegFrom);
      }
      if (hasVisitDate) {
        output.WriteInt32(125, field_names[71], VisitDate);
      }
      if (hasUpdateDate) {
        output.WriteInt32(126, field_names[64], UpdateDate);
      }
      if (hasEmailVStatus) {
        output.WriteInt32(127, field_names[19], EmailVStatus);
      }
      if (hasEmailVCode) {
        output.WriteString(128, field_names[18], EmailVCode);
      }
      if (hasMobileVStatus) {
        output.WriteInt32(129, field_names[37], MobileVStatus);
      }
      if (hasGroupInfo) {
        output.WriteMessage(150, field_names[27], GroupInfo);
      }
      if (offGroupIds_.Count > 0) {
        output.WriteStringArray(151, field_names[39], offGroupIds_);
      }
      if (permissions_.Count > 0) {
        output.WriteStringArray(152, field_names[43], permissions_);
      }
      if (hasSingRecordLimit) {
        output.WriteInt32(200, field_names[59], SingRecordLimit);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NickName);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Avatar);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Gender);
        }
        foreach (global::hdsense.PBSNSUser element in SnsUsersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        if (hasLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Location);
        }
        if (hasUserLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, UserLevel);
        }
        if (hasCameraMode) {
          size += pb::CodedOutputStream.ComputeStringSize(8, CameraMode);
        }
        if (hasSeatId) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, SeatId);
        }
        if (hasXiaojiNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(10, XiaojiNumber);
        }
        foreach (global::hdsense.PBSNSUserCredential element in SnsCredentialsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        if (hasRecommendStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, RecommendStatus);
        }
        if (hasRecommendStartDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, RecommendStartDate);
        }
        if (hasRecommends) {
          size += pb::CodedOutputStream.ComputeStringSize(14, Recommends);
        }
        if (hasRealName) {
          size += pb::CodedOutputStream.ComputeStringSize(15, RealName);
        }
        if (hasIdentityCardNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(16, IdentityCardNumber);
        }
        if (hasRealAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(17, RealAddress);
        }
        if (hasShotTitleName) {
          size += pb::CodedOutputStream.ComputeStringSize(18, ShotTitleName);
        }
        if (hasQrUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(20, QrUrl);
        }
        foreach (global::hdsense.PBKeyValue element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, element);
        }
        if (hasPhonenumber) {
          size += pb::CodedOutputStream.ComputeStringSize(30, Phonenumber);
        }
        if (hasEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(31, Email);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(32, Password);
        }
        if (hasBirthday) {
          size += pb::CodedOutputStream.ComputeStringSize(33, Birthday);
        }
        if (hasZodiac) {
          size += pb::CodedOutputStream.ComputeInt32Size(34, Zodiac);
        }
        if (hasBackgroundURL) {
          size += pb::CodedOutputStream.ComputeStringSize(36, BackgroundURL);
        }
        if (hasDeviceToken) {
          size += pb::CodedOutputStream.ComputeStringSize(37, DeviceToken);
        }
        if (hasCountryCode) {
          size += pb::CodedOutputStream.ComputeStringSize(38, CountryCode);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeStringSize(39, Language);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(41, Level);
        }
        if (hasExperience) {
          size += pb::CodedOutputStream.ComputeInt64Size(42, Experience);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(43, Status);
        }
        if (hasCanCreateActivity) {
          size += pb::CodedOutputStream.ComputeBoolSize(44, CanCreateActivity);
        }
        if (hasCanCreateContest) {
          size += pb::CodedOutputStream.ComputeBoolSize(45, CanCreateContest);
        }
        if (hasCoinBalance) {
          size += pb::CodedOutputStream.ComputeInt32Size(51, CoinBalance);
        }
        if (hasIngotBalance) {
          size += pb::CodedOutputStream.ComputeInt32Size(52, IngotBalance);
        }
        foreach (global::hdsense.PBUserItem element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(61, element);
        }
        if (hasDeviceModel) {
          size += pb::CodedOutputStream.ComputeStringSize(71, DeviceModel);
        }
        if (hasDeviceOS) {
          size += pb::CodedOutputStream.ComputeStringSize(72, DeviceOS);
        }
        if (hasDeviceId) {
          size += pb::CodedOutputStream.ComputeStringSize(73, DeviceId);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(74, DeviceType);
        }
        {
          int dataSize = 0;
          foreach (string element in BlockDeviceIdsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * blockDeviceIds_.Count;
        }
        if (hasBloodGroup) {
          size += pb::CodedOutputStream.ComputeStringSize(81, BloodGroup);
        }
        if (hasFanCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(82, FanCount);
        }
        if (hasFollowCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(83, FollowCount);
        }
        if (hasLongitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(84, Longitude);
        }
        if (hasLatitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(85, Latitude);
        }
        if (hasIsJailBroken) {
          size += pb::CodedOutputStream.ComputeBoolSize(86, IsJailBroken);
        }
        if (hasOpenInfoType) {
          size += pb::CodedOutputStream.ComputeEnumSize(91, (int) OpenInfoType);
        }
        if (hasOpusCoverflowType) {
          size += pb::CodedOutputStream.ComputeInt32Size(92, OpusCoverflowType);
        }
        if (hasUserRoleType) {
          size += pb::CodedOutputStream.ComputeEnumSize(93, (int) UserRoleType);
        }
        if (hasSignature) {
          size += pb::CodedOutputStream.ComputeStringSize(100, Signature);
        }
        if (hasFeatureOpus) {
          size += pb::CodedOutputStream.ComputeInt32Size(101, FeatureOpus);
        }
        if (hasFriendMemo) {
          size += pb::CodedOutputStream.ComputeStringSize(102, FriendMemo);
        }
        if (hasEmailVerifyStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(103, EmailVerifyStatus);
        }
        if (hasCanShakeNumber) {
          size += pb::CodedOutputStream.ComputeBoolSize(104, CanShakeNumber);
        }
        if (hasShakeNumberTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(105, ShakeNumberTimes);
        }
        if (hasTakeCoins) {
          size += pb::CodedOutputStream.ComputeInt32Size(106, TakeCoins);
        }
        if (hasVip) {
          size += pb::CodedOutputStream.ComputeInt32Size(110, Vip);
        }
        if (hasVipExpireDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(111, VipExpireDate);
        }
        if (hasVipLastPayDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(112, VipLastPayDate);
        }
        if (hasQqId) {
          size += pb::CodedOutputStream.ComputeStringSize(120, QqId);
        }
        if (hasSinaId) {
          size += pb::CodedOutputStream.ComputeStringSize(121, SinaId);
        }
        if (hasWeixinId) {
          size += pb::CodedOutputStream.ComputeStringSize(122, WeixinId);
        }
        if (hasRegDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(123, RegDate);
        }
        if (hasRegFrom) {
          size += pb::CodedOutputStream.ComputeInt32Size(124, RegFrom);
        }
        if (hasVisitDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(125, VisitDate);
        }
        if (hasUpdateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(126, UpdateDate);
        }
        if (hasEmailVStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(127, EmailVStatus);
        }
        if (hasEmailVCode) {
          size += pb::CodedOutputStream.ComputeStringSize(128, EmailVCode);
        }
        if (hasMobileVStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(129, MobileVStatus);
        }
        if (hasGroupInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(150, GroupInfo);
        }
        {
          int dataSize = 0;
          foreach (string element in OffGroupIdsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * offGroupIds_.Count;
        }
        {
          int dataSize = 0;
          foreach (string element in PermissionsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * permissions_.Count;
        }
        if (hasSingRecordLimit) {
          size += pb::CodedOutputStream.ComputeInt32Size(200, SingRecordLimit);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGameUser ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGameUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGameUser ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGameUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGameUser ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGameUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGameUser ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGameUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGameUser ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGameUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGameUser MakeReadOnly() {
      snsUsers_.MakeReadOnly();
      snsCredentials_.MakeReadOnly();
      attributes_.MakeReadOnly();
      items_.MakeReadOnly();
      blockDeviceIds_.MakeReadOnly();
      offGroupIds_.MakeReadOnly();
      permissions_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGameUser prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGameUser, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGameUser cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGameUser result;
      
      private PBGameUser PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGameUser original = result;
          result = new PBGameUser();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGameUser MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGameUser.Descriptor; }
      }
      
      public override PBGameUser DefaultInstanceForType {
        get { return global::hdsense.PBGameUser.DefaultInstance; }
      }
      
      public override PBGameUser BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGameUser) {
          return MergeFrom((PBGameUser) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGameUser other) {
        if (other == global::hdsense.PBGameUser.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        if (other.snsUsers_.Count != 0) {
          result.snsUsers_.Add(other.snsUsers_);
        }
        if (other.HasLocation) {
          Location = other.Location;
        }
        if (other.HasUserLevel) {
          UserLevel = other.UserLevel;
        }
        if (other.HasCameraMode) {
          CameraMode = other.CameraMode;
        }
        if (other.HasSeatId) {
          SeatId = other.SeatId;
        }
        if (other.HasXiaojiNumber) {
          XiaojiNumber = other.XiaojiNumber;
        }
        if (other.snsCredentials_.Count != 0) {
          result.snsCredentials_.Add(other.snsCredentials_);
        }
        if (other.HasRecommendStatus) {
          RecommendStatus = other.RecommendStatus;
        }
        if (other.HasRecommendStartDate) {
          RecommendStartDate = other.RecommendStartDate;
        }
        if (other.HasRecommends) {
          Recommends = other.Recommends;
        }
        if (other.HasRealName) {
          RealName = other.RealName;
        }
        if (other.HasIdentityCardNumber) {
          IdentityCardNumber = other.IdentityCardNumber;
        }
        if (other.HasRealAddress) {
          RealAddress = other.RealAddress;
        }
        if (other.HasShotTitleName) {
          ShotTitleName = other.ShotTitleName;
        }
        if (other.HasQrUrl) {
          QrUrl = other.QrUrl;
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        if (other.HasPhonenumber) {
          Phonenumber = other.Phonenumber;
        }
        if (other.HasEmail) {
          Email = other.Email;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasBirthday) {
          Birthday = other.Birthday;
        }
        if (other.HasZodiac) {
          Zodiac = other.Zodiac;
        }
        if (other.HasBackgroundURL) {
          BackgroundURL = other.BackgroundURL;
        }
        if (other.HasDeviceToken) {
          DeviceToken = other.DeviceToken;
        }
        if (other.HasCountryCode) {
          CountryCode = other.CountryCode;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasExperience) {
          Experience = other.Experience;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasCanCreateActivity) {
          CanCreateActivity = other.CanCreateActivity;
        }
        if (other.HasCanCreateContest) {
          CanCreateContest = other.CanCreateContest;
        }
        if (other.HasCoinBalance) {
          CoinBalance = other.CoinBalance;
        }
        if (other.HasIngotBalance) {
          IngotBalance = other.IngotBalance;
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasDeviceModel) {
          DeviceModel = other.DeviceModel;
        }
        if (other.HasDeviceOS) {
          DeviceOS = other.DeviceOS;
        }
        if (other.HasDeviceId) {
          DeviceId = other.DeviceId;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.blockDeviceIds_.Count != 0) {
          result.blockDeviceIds_.Add(other.blockDeviceIds_);
        }
        if (other.HasBloodGroup) {
          BloodGroup = other.BloodGroup;
        }
        if (other.HasFanCount) {
          FanCount = other.FanCount;
        }
        if (other.HasFollowCount) {
          FollowCount = other.FollowCount;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasIsJailBroken) {
          IsJailBroken = other.IsJailBroken;
        }
        if (other.HasOpenInfoType) {
          OpenInfoType = other.OpenInfoType;
        }
        if (other.HasOpusCoverflowType) {
          OpusCoverflowType = other.OpusCoverflowType;
        }
        if (other.HasUserRoleType) {
          UserRoleType = other.UserRoleType;
        }
        if (other.HasSignature) {
          Signature = other.Signature;
        }
        if (other.HasFeatureOpus) {
          FeatureOpus = other.FeatureOpus;
        }
        if (other.HasFriendMemo) {
          FriendMemo = other.FriendMemo;
        }
        if (other.HasEmailVerifyStatus) {
          EmailVerifyStatus = other.EmailVerifyStatus;
        }
        if (other.HasCanShakeNumber) {
          CanShakeNumber = other.CanShakeNumber;
        }
        if (other.HasShakeNumberTimes) {
          ShakeNumberTimes = other.ShakeNumberTimes;
        }
        if (other.HasTakeCoins) {
          TakeCoins = other.TakeCoins;
        }
        if (other.HasVip) {
          Vip = other.Vip;
        }
        if (other.HasVipExpireDate) {
          VipExpireDate = other.VipExpireDate;
        }
        if (other.HasVipLastPayDate) {
          VipLastPayDate = other.VipLastPayDate;
        }
        if (other.HasQqId) {
          QqId = other.QqId;
        }
        if (other.HasSinaId) {
          SinaId = other.SinaId;
        }
        if (other.HasWeixinId) {
          WeixinId = other.WeixinId;
        }
        if (other.HasRegDate) {
          RegDate = other.RegDate;
        }
        if (other.HasRegFrom) {
          RegFrom = other.RegFrom;
        }
        if (other.HasVisitDate) {
          VisitDate = other.VisitDate;
        }
        if (other.HasUpdateDate) {
          UpdateDate = other.UpdateDate;
        }
        if (other.HasEmailVStatus) {
          EmailVStatus = other.EmailVStatus;
        }
        if (other.HasEmailVCode) {
          EmailVCode = other.EmailVCode;
        }
        if (other.HasMobileVStatus) {
          MobileVStatus = other.MobileVStatus;
        }
        if (other.HasGroupInfo) {
          MergeGroupInfo(other.GroupInfo);
        }
        if (other.offGroupIds_.Count != 0) {
          result.offGroupIds_.Add(other.offGroupIds_);
        }
        if (other.permissions_.Count != 0) {
          result.permissions_.Add(other.permissions_);
        }
        if (other.HasSingRecordLimit) {
          SingRecordLimit = other.SingRecordLimit;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGameUserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGameUserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 26: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 32: {
              result.hasGender = input.ReadBool(ref result.gender_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.snsUsers_, global::hdsense.PBSNSUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              result.hasLocation = input.ReadString(ref result.location_);
              break;
            }
            case 56: {
              result.hasUserLevel = input.ReadInt32(ref result.userLevel_);
              break;
            }
            case 66: {
              result.hasCameraMode = input.ReadString(ref result.cameraMode_);
              break;
            }
            case 72: {
              result.hasSeatId = input.ReadInt32(ref result.seatId_);
              break;
            }
            case 82: {
              result.hasXiaojiNumber = input.ReadString(ref result.xiaojiNumber_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.snsCredentials_, global::hdsense.PBSNSUserCredential.DefaultInstance, extensionRegistry);
              break;
            }
            case 96: {
              result.hasRecommendStatus = input.ReadInt32(ref result.recommendStatus_);
              break;
            }
            case 104: {
              result.hasRecommendStartDate = input.ReadInt32(ref result.recommendStartDate_);
              break;
            }
            case 114: {
              result.hasRecommends = input.ReadString(ref result.recommends_);
              break;
            }
            case 122: {
              result.hasRealName = input.ReadString(ref result.realName_);
              break;
            }
            case 130: {
              result.hasIdentityCardNumber = input.ReadString(ref result.identityCardNumber_);
              break;
            }
            case 138: {
              result.hasRealAddress = input.ReadString(ref result.realAddress_);
              break;
            }
            case 146: {
              result.hasShotTitleName = input.ReadString(ref result.shotTitleName_);
              break;
            }
            case 162: {
              result.hasQrUrl = input.ReadString(ref result.qrUrl_);
              break;
            }
            case 178: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::hdsense.PBKeyValue.DefaultInstance, extensionRegistry);
              break;
            }
            case 242: {
              result.hasPhonenumber = input.ReadString(ref result.phonenumber_);
              break;
            }
            case 250: {
              result.hasEmail = input.ReadString(ref result.email_);
              break;
            }
            case 258: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 266: {
              result.hasBirthday = input.ReadString(ref result.birthday_);
              break;
            }
            case 272: {
              result.hasZodiac = input.ReadInt32(ref result.zodiac_);
              break;
            }
            case 290: {
              result.hasBackgroundURL = input.ReadString(ref result.backgroundURL_);
              break;
            }
            case 298: {
              result.hasDeviceToken = input.ReadString(ref result.deviceToken_);
              break;
            }
            case 306: {
              result.hasCountryCode = input.ReadString(ref result.countryCode_);
              break;
            }
            case 314: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
            case 328: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 336: {
              result.hasExperience = input.ReadInt64(ref result.experience_);
              break;
            }
            case 344: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 352: {
              result.hasCanCreateActivity = input.ReadBool(ref result.canCreateActivity_);
              break;
            }
            case 360: {
              result.hasCanCreateContest = input.ReadBool(ref result.canCreateContest_);
              break;
            }
            case 408: {
              result.hasCoinBalance = input.ReadInt32(ref result.coinBalance_);
              break;
            }
            case 416: {
              result.hasIngotBalance = input.ReadInt32(ref result.ingotBalance_);
              break;
            }
            case 490: {
              input.ReadMessageArray(tag, field_name, result.items_, global::hdsense.PBUserItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 570: {
              result.hasDeviceModel = input.ReadString(ref result.deviceModel_);
              break;
            }
            case 578: {
              result.hasDeviceOS = input.ReadString(ref result.deviceOS_);
              break;
            }
            case 586: {
              result.hasDeviceId = input.ReadString(ref result.deviceId_);
              break;
            }
            case 594: {
              result.hasDeviceType = input.ReadString(ref result.deviceType_);
              break;
            }
            case 602: {
              input.ReadStringArray(tag, field_name, result.blockDeviceIds_);
              break;
            }
            case 650: {
              result.hasBloodGroup = input.ReadString(ref result.bloodGroup_);
              break;
            }
            case 656: {
              result.hasFanCount = input.ReadInt32(ref result.fanCount_);
              break;
            }
            case 664: {
              result.hasFollowCount = input.ReadInt32(ref result.followCount_);
              break;
            }
            case 673: {
              result.hasLongitude = input.ReadDouble(ref result.longitude_);
              break;
            }
            case 681: {
              result.hasLatitude = input.ReadDouble(ref result.latitude_);
              break;
            }
            case 688: {
              result.hasIsJailBroken = input.ReadBool(ref result.isJailBroken_);
              break;
            }
            case 728: {
              object unknown;
              if(input.ReadEnum(ref result.openInfoType_, out unknown)) {
                result.hasOpenInfoType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(91, (ulong)(int)unknown);
              }
              break;
            }
            case 736: {
              result.hasOpusCoverflowType = input.ReadInt32(ref result.opusCoverflowType_);
              break;
            }
            case 744: {
              object unknown;
              if(input.ReadEnum(ref result.userRoleType_, out unknown)) {
                result.hasUserRoleType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(93, (ulong)(int)unknown);
              }
              break;
            }
            case 802: {
              result.hasSignature = input.ReadString(ref result.signature_);
              break;
            }
            case 808: {
              result.hasFeatureOpus = input.ReadInt32(ref result.featureOpus_);
              break;
            }
            case 818: {
              result.hasFriendMemo = input.ReadString(ref result.friendMemo_);
              break;
            }
            case 824: {
              result.hasEmailVerifyStatus = input.ReadInt32(ref result.emailVerifyStatus_);
              break;
            }
            case 832: {
              result.hasCanShakeNumber = input.ReadBool(ref result.canShakeNumber_);
              break;
            }
            case 840: {
              result.hasShakeNumberTimes = input.ReadInt32(ref result.shakeNumberTimes_);
              break;
            }
            case 848: {
              result.hasTakeCoins = input.ReadInt32(ref result.takeCoins_);
              break;
            }
            case 880: {
              result.hasVip = input.ReadInt32(ref result.vip_);
              break;
            }
            case 888: {
              result.hasVipExpireDate = input.ReadInt32(ref result.vipExpireDate_);
              break;
            }
            case 896: {
              result.hasVipLastPayDate = input.ReadInt32(ref result.vipLastPayDate_);
              break;
            }
            case 962: {
              result.hasQqId = input.ReadString(ref result.qqId_);
              break;
            }
            case 970: {
              result.hasSinaId = input.ReadString(ref result.sinaId_);
              break;
            }
            case 978: {
              result.hasWeixinId = input.ReadString(ref result.weixinId_);
              break;
            }
            case 984: {
              result.hasRegDate = input.ReadInt32(ref result.regDate_);
              break;
            }
            case 992: {
              result.hasRegFrom = input.ReadInt32(ref result.regFrom_);
              break;
            }
            case 1000: {
              result.hasVisitDate = input.ReadInt32(ref result.visitDate_);
              break;
            }
            case 1008: {
              result.hasUpdateDate = input.ReadInt32(ref result.updateDate_);
              break;
            }
            case 1016: {
              result.hasEmailVStatus = input.ReadInt32(ref result.emailVStatus_);
              break;
            }
            case 1026: {
              result.hasEmailVCode = input.ReadString(ref result.emailVCode_);
              break;
            }
            case 1032: {
              result.hasMobileVStatus = input.ReadInt32(ref result.mobileVStatus_);
              break;
            }
            case 1202: {
              global::hdsense.PBSimpleGroup.Builder subBuilder = global::hdsense.PBSimpleGroup.CreateBuilder();
              if (result.hasGroupInfo) {
                subBuilder.MergeFrom(GroupInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GroupInfo = subBuilder.BuildPartial();
              break;
            }
            case 1210: {
              input.ReadStringArray(tag, field_name, result.offGroupIds_);
              break;
            }
            case 1218: {
              input.ReadStringArray(tag, field_name, result.permissions_);
              break;
            }
            case 1600: {
              result.hasSingRecordLimit = input.ReadInt32(ref result.singRecordLimit_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public bool Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(bool value) {
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBSNSUser> SnsUsersList {
        get { return PrepareBuilder().snsUsers_; }
      }
      public int SnsUsersCount {
        get { return result.SnsUsersCount; }
      }
      public global::hdsense.PBSNSUser GetSnsUsers(int index) {
        return result.GetSnsUsers(index);
      }
      public Builder SetSnsUsers(int index, global::hdsense.PBSNSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snsUsers_[index] = value;
        return this;
      }
      public Builder SetSnsUsers(int index, global::hdsense.PBSNSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snsUsers_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSnsUsers(global::hdsense.PBSNSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snsUsers_.Add(value);
        return this;
      }
      public Builder AddSnsUsers(global::hdsense.PBSNSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snsUsers_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSnsUsers(scg::IEnumerable<global::hdsense.PBSNSUser> values) {
        PrepareBuilder();
        result.snsUsers_.Add(values);
        return this;
      }
      public Builder ClearSnsUsers() {
        PrepareBuilder();
        result.snsUsers_.Clear();
        return this;
      }
      
      public bool HasLocation {
        get { return result.hasLocation; }
      }
      public string Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = "";
        return this;
      }
      
      public bool HasUserLevel {
        get { return result.hasUserLevel; }
      }
      public int UserLevel {
        get { return result.UserLevel; }
        set { SetUserLevel(value); }
      }
      public Builder SetUserLevel(int value) {
        PrepareBuilder();
        result.hasUserLevel = true;
        result.userLevel_ = value;
        return this;
      }
      public Builder ClearUserLevel() {
        PrepareBuilder();
        result.hasUserLevel = false;
        result.userLevel_ = 0;
        return this;
      }
      
      public bool HasCameraMode {
        get { return result.hasCameraMode; }
      }
      public string CameraMode {
        get { return result.CameraMode; }
        set { SetCameraMode(value); }
      }
      public Builder SetCameraMode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraMode = true;
        result.cameraMode_ = value;
        return this;
      }
      public Builder ClearCameraMode() {
        PrepareBuilder();
        result.hasCameraMode = false;
        result.cameraMode_ = "";
        return this;
      }
      
      public bool HasSeatId {
        get { return result.hasSeatId; }
      }
      public int SeatId {
        get { return result.SeatId; }
        set { SetSeatId(value); }
      }
      public Builder SetSeatId(int value) {
        PrepareBuilder();
        result.hasSeatId = true;
        result.seatId_ = value;
        return this;
      }
      public Builder ClearSeatId() {
        PrepareBuilder();
        result.hasSeatId = false;
        result.seatId_ = 0;
        return this;
      }
      
      public bool HasXiaojiNumber {
        get { return result.hasXiaojiNumber; }
      }
      public string XiaojiNumber {
        get { return result.XiaojiNumber; }
        set { SetXiaojiNumber(value); }
      }
      public Builder SetXiaojiNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasXiaojiNumber = true;
        result.xiaojiNumber_ = value;
        return this;
      }
      public Builder ClearXiaojiNumber() {
        PrepareBuilder();
        result.hasXiaojiNumber = false;
        result.xiaojiNumber_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBSNSUserCredential> SnsCredentialsList {
        get { return PrepareBuilder().snsCredentials_; }
      }
      public int SnsCredentialsCount {
        get { return result.SnsCredentialsCount; }
      }
      public global::hdsense.PBSNSUserCredential GetSnsCredentials(int index) {
        return result.GetSnsCredentials(index);
      }
      public Builder SetSnsCredentials(int index, global::hdsense.PBSNSUserCredential value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snsCredentials_[index] = value;
        return this;
      }
      public Builder SetSnsCredentials(int index, global::hdsense.PBSNSUserCredential.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snsCredentials_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSnsCredentials(global::hdsense.PBSNSUserCredential value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.snsCredentials_.Add(value);
        return this;
      }
      public Builder AddSnsCredentials(global::hdsense.PBSNSUserCredential.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.snsCredentials_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSnsCredentials(scg::IEnumerable<global::hdsense.PBSNSUserCredential> values) {
        PrepareBuilder();
        result.snsCredentials_.Add(values);
        return this;
      }
      public Builder ClearSnsCredentials() {
        PrepareBuilder();
        result.snsCredentials_.Clear();
        return this;
      }
      
      public bool HasRecommendStatus {
        get { return result.hasRecommendStatus; }
      }
      public int RecommendStatus {
        get { return result.RecommendStatus; }
        set { SetRecommendStatus(value); }
      }
      public Builder SetRecommendStatus(int value) {
        PrepareBuilder();
        result.hasRecommendStatus = true;
        result.recommendStatus_ = value;
        return this;
      }
      public Builder ClearRecommendStatus() {
        PrepareBuilder();
        result.hasRecommendStatus = false;
        result.recommendStatus_ = 0;
        return this;
      }
      
      public bool HasRecommendStartDate {
        get { return result.hasRecommendStartDate; }
      }
      public int RecommendStartDate {
        get { return result.RecommendStartDate; }
        set { SetRecommendStartDate(value); }
      }
      public Builder SetRecommendStartDate(int value) {
        PrepareBuilder();
        result.hasRecommendStartDate = true;
        result.recommendStartDate_ = value;
        return this;
      }
      public Builder ClearRecommendStartDate() {
        PrepareBuilder();
        result.hasRecommendStartDate = false;
        result.recommendStartDate_ = 0;
        return this;
      }
      
      public bool HasRecommends {
        get { return result.hasRecommends; }
      }
      public string Recommends {
        get { return result.Recommends; }
        set { SetRecommends(value); }
      }
      public Builder SetRecommends(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRecommends = true;
        result.recommends_ = value;
        return this;
      }
      public Builder ClearRecommends() {
        PrepareBuilder();
        result.hasRecommends = false;
        result.recommends_ = "";
        return this;
      }
      
      public bool HasRealName {
        get { return result.hasRealName; }
      }
      public string RealName {
        get { return result.RealName; }
        set { SetRealName(value); }
      }
      public Builder SetRealName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRealName = true;
        result.realName_ = value;
        return this;
      }
      public Builder ClearRealName() {
        PrepareBuilder();
        result.hasRealName = false;
        result.realName_ = "";
        return this;
      }
      
      public bool HasIdentityCardNumber {
        get { return result.hasIdentityCardNumber; }
      }
      public string IdentityCardNumber {
        get { return result.IdentityCardNumber; }
        set { SetIdentityCardNumber(value); }
      }
      public Builder SetIdentityCardNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIdentityCardNumber = true;
        result.identityCardNumber_ = value;
        return this;
      }
      public Builder ClearIdentityCardNumber() {
        PrepareBuilder();
        result.hasIdentityCardNumber = false;
        result.identityCardNumber_ = "";
        return this;
      }
      
      public bool HasRealAddress {
        get { return result.hasRealAddress; }
      }
      public string RealAddress {
        get { return result.RealAddress; }
        set { SetRealAddress(value); }
      }
      public Builder SetRealAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRealAddress = true;
        result.realAddress_ = value;
        return this;
      }
      public Builder ClearRealAddress() {
        PrepareBuilder();
        result.hasRealAddress = false;
        result.realAddress_ = "";
        return this;
      }
      
      public bool HasShotTitleName {
        get { return result.hasShotTitleName; }
      }
      public string ShotTitleName {
        get { return result.ShotTitleName; }
        set { SetShotTitleName(value); }
      }
      public Builder SetShotTitleName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShotTitleName = true;
        result.shotTitleName_ = value;
        return this;
      }
      public Builder ClearShotTitleName() {
        PrepareBuilder();
        result.hasShotTitleName = false;
        result.shotTitleName_ = "";
        return this;
      }
      
      public bool HasQrUrl {
        get { return result.hasQrUrl; }
      }
      public string QrUrl {
        get { return result.QrUrl; }
        set { SetQrUrl(value); }
      }
      public Builder SetQrUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQrUrl = true;
        result.qrUrl_ = value;
        return this;
      }
      public Builder ClearQrUrl() {
        PrepareBuilder();
        result.hasQrUrl = false;
        result.qrUrl_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBKeyValue> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::hdsense.PBKeyValue GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::hdsense.PBKeyValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::hdsense.PBKeyValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::hdsense.PBKeyValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::hdsense.PBKeyValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::hdsense.PBKeyValue> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
      
      public bool HasPhonenumber {
        get { return result.hasPhonenumber; }
      }
      public string Phonenumber {
        get { return result.Phonenumber; }
        set { SetPhonenumber(value); }
      }
      public Builder SetPhonenumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPhonenumber = true;
        result.phonenumber_ = value;
        return this;
      }
      public Builder ClearPhonenumber() {
        PrepareBuilder();
        result.hasPhonenumber = false;
        result.phonenumber_ = "";
        return this;
      }
      
      public bool HasEmail {
        get { return result.hasEmail; }
      }
      public string Email {
        get { return result.Email; }
        set { SetEmail(value); }
      }
      public Builder SetEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmail = true;
        result.email_ = value;
        return this;
      }
      public Builder ClearEmail() {
        PrepareBuilder();
        result.hasEmail = false;
        result.email_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasBirthday {
        get { return result.hasBirthday; }
      }
      public string Birthday {
        get { return result.Birthday; }
        set { SetBirthday(value); }
      }
      public Builder SetBirthday(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBirthday = true;
        result.birthday_ = value;
        return this;
      }
      public Builder ClearBirthday() {
        PrepareBuilder();
        result.hasBirthday = false;
        result.birthday_ = "";
        return this;
      }
      
      public bool HasZodiac {
        get { return result.hasZodiac; }
      }
      public int Zodiac {
        get { return result.Zodiac; }
        set { SetZodiac(value); }
      }
      public Builder SetZodiac(int value) {
        PrepareBuilder();
        result.hasZodiac = true;
        result.zodiac_ = value;
        return this;
      }
      public Builder ClearZodiac() {
        PrepareBuilder();
        result.hasZodiac = false;
        result.zodiac_ = 0;
        return this;
      }
      
      public bool HasBackgroundURL {
        get { return result.hasBackgroundURL; }
      }
      public string BackgroundURL {
        get { return result.BackgroundURL; }
        set { SetBackgroundURL(value); }
      }
      public Builder SetBackgroundURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBackgroundURL = true;
        result.backgroundURL_ = value;
        return this;
      }
      public Builder ClearBackgroundURL() {
        PrepareBuilder();
        result.hasBackgroundURL = false;
        result.backgroundURL_ = "";
        return this;
      }
      
      public bool HasDeviceToken {
        get { return result.hasDeviceToken; }
      }
      public string DeviceToken {
        get { return result.DeviceToken; }
        set { SetDeviceToken(value); }
      }
      public Builder SetDeviceToken(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceToken = true;
        result.deviceToken_ = value;
        return this;
      }
      public Builder ClearDeviceToken() {
        PrepareBuilder();
        result.hasDeviceToken = false;
        result.deviceToken_ = "";
        return this;
      }
      
      public bool HasCountryCode {
        get { return result.hasCountryCode; }
      }
      public string CountryCode {
        get { return result.CountryCode; }
        set { SetCountryCode(value); }
      }
      public Builder SetCountryCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountryCode = true;
        result.countryCode_ = value;
        return this;
      }
      public Builder ClearCountryCode() {
        PrepareBuilder();
        result.hasCountryCode = false;
        result.countryCode_ = "";
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasExperience {
        get { return result.hasExperience; }
      }
      public long Experience {
        get { return result.Experience; }
        set { SetExperience(value); }
      }
      public Builder SetExperience(long value) {
        PrepareBuilder();
        result.hasExperience = true;
        result.experience_ = value;
        return this;
      }
      public Builder ClearExperience() {
        PrepareBuilder();
        result.hasExperience = false;
        result.experience_ = 0L;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasCanCreateActivity {
        get { return result.hasCanCreateActivity; }
      }
      public bool CanCreateActivity {
        get { return result.CanCreateActivity; }
        set { SetCanCreateActivity(value); }
      }
      public Builder SetCanCreateActivity(bool value) {
        PrepareBuilder();
        result.hasCanCreateActivity = true;
        result.canCreateActivity_ = value;
        return this;
      }
      public Builder ClearCanCreateActivity() {
        PrepareBuilder();
        result.hasCanCreateActivity = false;
        result.canCreateActivity_ = false;
        return this;
      }
      
      public bool HasCanCreateContest {
        get { return result.hasCanCreateContest; }
      }
      public bool CanCreateContest {
        get { return result.CanCreateContest; }
        set { SetCanCreateContest(value); }
      }
      public Builder SetCanCreateContest(bool value) {
        PrepareBuilder();
        result.hasCanCreateContest = true;
        result.canCreateContest_ = value;
        return this;
      }
      public Builder ClearCanCreateContest() {
        PrepareBuilder();
        result.hasCanCreateContest = false;
        result.canCreateContest_ = false;
        return this;
      }
      
      public bool HasCoinBalance {
        get { return result.hasCoinBalance; }
      }
      public int CoinBalance {
        get { return result.CoinBalance; }
        set { SetCoinBalance(value); }
      }
      public Builder SetCoinBalance(int value) {
        PrepareBuilder();
        result.hasCoinBalance = true;
        result.coinBalance_ = value;
        return this;
      }
      public Builder ClearCoinBalance() {
        PrepareBuilder();
        result.hasCoinBalance = false;
        result.coinBalance_ = 0;
        return this;
      }
      
      public bool HasIngotBalance {
        get { return result.hasIngotBalance; }
      }
      public int IngotBalance {
        get { return result.IngotBalance; }
        set { SetIngotBalance(value); }
      }
      public Builder SetIngotBalance(int value) {
        PrepareBuilder();
        result.hasIngotBalance = true;
        result.ingotBalance_ = value;
        return this;
      }
      public Builder ClearIngotBalance() {
        PrepareBuilder();
        result.hasIngotBalance = false;
        result.ingotBalance_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBUserItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::hdsense.PBUserItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::hdsense.PBUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::hdsense.PBUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::hdsense.PBUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::hdsense.PBUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::hdsense.PBUserItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasDeviceModel {
        get { return result.hasDeviceModel; }
      }
      public string DeviceModel {
        get { return result.DeviceModel; }
        set { SetDeviceModel(value); }
      }
      public Builder SetDeviceModel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceModel = true;
        result.deviceModel_ = value;
        return this;
      }
      public Builder ClearDeviceModel() {
        PrepareBuilder();
        result.hasDeviceModel = false;
        result.deviceModel_ = "";
        return this;
      }
      
      public bool HasDeviceOS {
        get { return result.hasDeviceOS; }
      }
      public string DeviceOS {
        get { return result.DeviceOS; }
        set { SetDeviceOS(value); }
      }
      public Builder SetDeviceOS(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceOS = true;
        result.deviceOS_ = value;
        return this;
      }
      public Builder ClearDeviceOS() {
        PrepareBuilder();
        result.hasDeviceOS = false;
        result.deviceOS_ = "";
        return this;
      }
      
      public bool HasDeviceId {
        get { return result.hasDeviceId; }
      }
      public string DeviceId {
        get { return result.DeviceId; }
        set { SetDeviceId(value); }
      }
      public Builder SetDeviceId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceId = true;
        result.deviceId_ = value;
        return this;
      }
      public Builder ClearDeviceId() {
        PrepareBuilder();
        result.hasDeviceId = false;
        result.deviceId_ = "";
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public string DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> BlockDeviceIdsList {
        get { return PrepareBuilder().blockDeviceIds_; }
      }
      public int BlockDeviceIdsCount {
        get { return result.BlockDeviceIdsCount; }
      }
      public string GetBlockDeviceIds(int index) {
        return result.GetBlockDeviceIds(index);
      }
      public Builder SetBlockDeviceIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blockDeviceIds_[index] = value;
        return this;
      }
      public Builder AddBlockDeviceIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blockDeviceIds_.Add(value);
        return this;
      }
      public Builder AddRangeBlockDeviceIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.blockDeviceIds_.Add(values);
        return this;
      }
      public Builder ClearBlockDeviceIds() {
        PrepareBuilder();
        result.blockDeviceIds_.Clear();
        return this;
      }
      
      public bool HasBloodGroup {
        get { return result.hasBloodGroup; }
      }
      public string BloodGroup {
        get { return result.BloodGroup; }
        set { SetBloodGroup(value); }
      }
      public Builder SetBloodGroup(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBloodGroup = true;
        result.bloodGroup_ = value;
        return this;
      }
      public Builder ClearBloodGroup() {
        PrepareBuilder();
        result.hasBloodGroup = false;
        result.bloodGroup_ = "";
        return this;
      }
      
      public bool HasFanCount {
        get { return result.hasFanCount; }
      }
      public int FanCount {
        get { return result.FanCount; }
        set { SetFanCount(value); }
      }
      public Builder SetFanCount(int value) {
        PrepareBuilder();
        result.hasFanCount = true;
        result.fanCount_ = value;
        return this;
      }
      public Builder ClearFanCount() {
        PrepareBuilder();
        result.hasFanCount = false;
        result.fanCount_ = 0;
        return this;
      }
      
      public bool HasFollowCount {
        get { return result.hasFollowCount; }
      }
      public int FollowCount {
        get { return result.FollowCount; }
        set { SetFollowCount(value); }
      }
      public Builder SetFollowCount(int value) {
        PrepareBuilder();
        result.hasFollowCount = true;
        result.followCount_ = value;
        return this;
      }
      public Builder ClearFollowCount() {
        PrepareBuilder();
        result.hasFollowCount = false;
        result.followCount_ = 0;
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public double Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(double value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public double Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(double value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      public bool HasIsJailBroken {
        get { return result.hasIsJailBroken; }
      }
      public bool IsJailBroken {
        get { return result.IsJailBroken; }
        set { SetIsJailBroken(value); }
      }
      public Builder SetIsJailBroken(bool value) {
        PrepareBuilder();
        result.hasIsJailBroken = true;
        result.isJailBroken_ = value;
        return this;
      }
      public Builder ClearIsJailBroken() {
        PrepareBuilder();
        result.hasIsJailBroken = false;
        result.isJailBroken_ = false;
        return this;
      }
      
      public bool HasOpenInfoType {
       get { return result.hasOpenInfoType; }
      }
      public global::hdsense.PBOpenInfoType OpenInfoType {
        get { return result.OpenInfoType; }
        set { SetOpenInfoType(value); }
      }
      public Builder SetOpenInfoType(global::hdsense.PBOpenInfoType value) {
        PrepareBuilder();
        result.hasOpenInfoType = true;
        result.openInfoType_ = value;
        return this;
      }
      public Builder ClearOpenInfoType() {
        PrepareBuilder();
        result.hasOpenInfoType = false;
        result.openInfoType_ = global::hdsense.PBOpenInfoType.OPEN_TO_FRIEND;
        return this;
      }
      
      public bool HasOpusCoverflowType {
        get { return result.hasOpusCoverflowType; }
      }
      public int OpusCoverflowType {
        get { return result.OpusCoverflowType; }
        set { SetOpusCoverflowType(value); }
      }
      public Builder SetOpusCoverflowType(int value) {
        PrepareBuilder();
        result.hasOpusCoverflowType = true;
        result.opusCoverflowType_ = value;
        return this;
      }
      public Builder ClearOpusCoverflowType() {
        PrepareBuilder();
        result.hasOpusCoverflowType = false;
        result.opusCoverflowType_ = 0;
        return this;
      }
      
      public bool HasUserRoleType {
       get { return result.hasUserRoleType; }
      }
      public global::hdsense.PBOUserRoleType UserRoleType {
        get { return result.UserRoleType; }
        set { SetUserRoleType(value); }
      }
      public Builder SetUserRoleType(global::hdsense.PBOUserRoleType value) {
        PrepareBuilder();
        result.hasUserRoleType = true;
        result.userRoleType_ = value;
        return this;
      }
      public Builder ClearUserRoleType() {
        PrepareBuilder();
        result.hasUserRoleType = false;
        result.userRoleType_ = global::hdsense.PBOUserRoleType.GUESS_USER;
        return this;
      }
      
      public bool HasSignature {
        get { return result.hasSignature; }
      }
      public string Signature {
        get { return result.Signature; }
        set { SetSignature(value); }
      }
      public Builder SetSignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignature = true;
        result.signature_ = value;
        return this;
      }
      public Builder ClearSignature() {
        PrepareBuilder();
        result.hasSignature = false;
        result.signature_ = "";
        return this;
      }
      
      public bool HasFeatureOpus {
        get { return result.hasFeatureOpus; }
      }
      public int FeatureOpus {
        get { return result.FeatureOpus; }
        set { SetFeatureOpus(value); }
      }
      public Builder SetFeatureOpus(int value) {
        PrepareBuilder();
        result.hasFeatureOpus = true;
        result.featureOpus_ = value;
        return this;
      }
      public Builder ClearFeatureOpus() {
        PrepareBuilder();
        result.hasFeatureOpus = false;
        result.featureOpus_ = 0;
        return this;
      }
      
      public bool HasFriendMemo {
        get { return result.hasFriendMemo; }
      }
      public string FriendMemo {
        get { return result.FriendMemo; }
        set { SetFriendMemo(value); }
      }
      public Builder SetFriendMemo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendMemo = true;
        result.friendMemo_ = value;
        return this;
      }
      public Builder ClearFriendMemo() {
        PrepareBuilder();
        result.hasFriendMemo = false;
        result.friendMemo_ = "";
        return this;
      }
      
      public bool HasEmailVerifyStatus {
        get { return result.hasEmailVerifyStatus; }
      }
      public int EmailVerifyStatus {
        get { return result.EmailVerifyStatus; }
        set { SetEmailVerifyStatus(value); }
      }
      public Builder SetEmailVerifyStatus(int value) {
        PrepareBuilder();
        result.hasEmailVerifyStatus = true;
        result.emailVerifyStatus_ = value;
        return this;
      }
      public Builder ClearEmailVerifyStatus() {
        PrepareBuilder();
        result.hasEmailVerifyStatus = false;
        result.emailVerifyStatus_ = 0;
        return this;
      }
      
      public bool HasCanShakeNumber {
        get { return result.hasCanShakeNumber; }
      }
      public bool CanShakeNumber {
        get { return result.CanShakeNumber; }
        set { SetCanShakeNumber(value); }
      }
      public Builder SetCanShakeNumber(bool value) {
        PrepareBuilder();
        result.hasCanShakeNumber = true;
        result.canShakeNumber_ = value;
        return this;
      }
      public Builder ClearCanShakeNumber() {
        PrepareBuilder();
        result.hasCanShakeNumber = false;
        result.canShakeNumber_ = false;
        return this;
      }
      
      public bool HasShakeNumberTimes {
        get { return result.hasShakeNumberTimes; }
      }
      public int ShakeNumberTimes {
        get { return result.ShakeNumberTimes; }
        set { SetShakeNumberTimes(value); }
      }
      public Builder SetShakeNumberTimes(int value) {
        PrepareBuilder();
        result.hasShakeNumberTimes = true;
        result.shakeNumberTimes_ = value;
        return this;
      }
      public Builder ClearShakeNumberTimes() {
        PrepareBuilder();
        result.hasShakeNumberTimes = false;
        result.shakeNumberTimes_ = 0;
        return this;
      }
      
      public bool HasTakeCoins {
        get { return result.hasTakeCoins; }
      }
      public int TakeCoins {
        get { return result.TakeCoins; }
        set { SetTakeCoins(value); }
      }
      public Builder SetTakeCoins(int value) {
        PrepareBuilder();
        result.hasTakeCoins = true;
        result.takeCoins_ = value;
        return this;
      }
      public Builder ClearTakeCoins() {
        PrepareBuilder();
        result.hasTakeCoins = false;
        result.takeCoins_ = 0;
        return this;
      }
      
      public bool HasVip {
        get { return result.hasVip; }
      }
      public int Vip {
        get { return result.Vip; }
        set { SetVip(value); }
      }
      public Builder SetVip(int value) {
        PrepareBuilder();
        result.hasVip = true;
        result.vip_ = value;
        return this;
      }
      public Builder ClearVip() {
        PrepareBuilder();
        result.hasVip = false;
        result.vip_ = 0;
        return this;
      }
      
      public bool HasVipExpireDate {
        get { return result.hasVipExpireDate; }
      }
      public int VipExpireDate {
        get { return result.VipExpireDate; }
        set { SetVipExpireDate(value); }
      }
      public Builder SetVipExpireDate(int value) {
        PrepareBuilder();
        result.hasVipExpireDate = true;
        result.vipExpireDate_ = value;
        return this;
      }
      public Builder ClearVipExpireDate() {
        PrepareBuilder();
        result.hasVipExpireDate = false;
        result.vipExpireDate_ = 0;
        return this;
      }
      
      public bool HasVipLastPayDate {
        get { return result.hasVipLastPayDate; }
      }
      public int VipLastPayDate {
        get { return result.VipLastPayDate; }
        set { SetVipLastPayDate(value); }
      }
      public Builder SetVipLastPayDate(int value) {
        PrepareBuilder();
        result.hasVipLastPayDate = true;
        result.vipLastPayDate_ = value;
        return this;
      }
      public Builder ClearVipLastPayDate() {
        PrepareBuilder();
        result.hasVipLastPayDate = false;
        result.vipLastPayDate_ = 0;
        return this;
      }
      
      public bool HasQqId {
        get { return result.hasQqId; }
      }
      public string QqId {
        get { return result.QqId; }
        set { SetQqId(value); }
      }
      public Builder SetQqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQqId = true;
        result.qqId_ = value;
        return this;
      }
      public Builder ClearQqId() {
        PrepareBuilder();
        result.hasQqId = false;
        result.qqId_ = "";
        return this;
      }
      
      public bool HasSinaId {
        get { return result.hasSinaId; }
      }
      public string SinaId {
        get { return result.SinaId; }
        set { SetSinaId(value); }
      }
      public Builder SetSinaId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSinaId = true;
        result.sinaId_ = value;
        return this;
      }
      public Builder ClearSinaId() {
        PrepareBuilder();
        result.hasSinaId = false;
        result.sinaId_ = "";
        return this;
      }
      
      public bool HasWeixinId {
        get { return result.hasWeixinId; }
      }
      public string WeixinId {
        get { return result.WeixinId; }
        set { SetWeixinId(value); }
      }
      public Builder SetWeixinId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWeixinId = true;
        result.weixinId_ = value;
        return this;
      }
      public Builder ClearWeixinId() {
        PrepareBuilder();
        result.hasWeixinId = false;
        result.weixinId_ = "";
        return this;
      }
      
      public bool HasRegDate {
        get { return result.hasRegDate; }
      }
      public int RegDate {
        get { return result.RegDate; }
        set { SetRegDate(value); }
      }
      public Builder SetRegDate(int value) {
        PrepareBuilder();
        result.hasRegDate = true;
        result.regDate_ = value;
        return this;
      }
      public Builder ClearRegDate() {
        PrepareBuilder();
        result.hasRegDate = false;
        result.regDate_ = 0;
        return this;
      }
      
      public bool HasRegFrom {
        get { return result.hasRegFrom; }
      }
      public int RegFrom {
        get { return result.RegFrom; }
        set { SetRegFrom(value); }
      }
      public Builder SetRegFrom(int value) {
        PrepareBuilder();
        result.hasRegFrom = true;
        result.regFrom_ = value;
        return this;
      }
      public Builder ClearRegFrom() {
        PrepareBuilder();
        result.hasRegFrom = false;
        result.regFrom_ = 0;
        return this;
      }
      
      public bool HasVisitDate {
        get { return result.hasVisitDate; }
      }
      public int VisitDate {
        get { return result.VisitDate; }
        set { SetVisitDate(value); }
      }
      public Builder SetVisitDate(int value) {
        PrepareBuilder();
        result.hasVisitDate = true;
        result.visitDate_ = value;
        return this;
      }
      public Builder ClearVisitDate() {
        PrepareBuilder();
        result.hasVisitDate = false;
        result.visitDate_ = 0;
        return this;
      }
      
      public bool HasUpdateDate {
        get { return result.hasUpdateDate; }
      }
      public int UpdateDate {
        get { return result.UpdateDate; }
        set { SetUpdateDate(value); }
      }
      public Builder SetUpdateDate(int value) {
        PrepareBuilder();
        result.hasUpdateDate = true;
        result.updateDate_ = value;
        return this;
      }
      public Builder ClearUpdateDate() {
        PrepareBuilder();
        result.hasUpdateDate = false;
        result.updateDate_ = 0;
        return this;
      }
      
      public bool HasEmailVStatus {
        get { return result.hasEmailVStatus; }
      }
      public int EmailVStatus {
        get { return result.EmailVStatus; }
        set { SetEmailVStatus(value); }
      }
      public Builder SetEmailVStatus(int value) {
        PrepareBuilder();
        result.hasEmailVStatus = true;
        result.emailVStatus_ = value;
        return this;
      }
      public Builder ClearEmailVStatus() {
        PrepareBuilder();
        result.hasEmailVStatus = false;
        result.emailVStatus_ = 0;
        return this;
      }
      
      public bool HasEmailVCode {
        get { return result.hasEmailVCode; }
      }
      public string EmailVCode {
        get { return result.EmailVCode; }
        set { SetEmailVCode(value); }
      }
      public Builder SetEmailVCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmailVCode = true;
        result.emailVCode_ = value;
        return this;
      }
      public Builder ClearEmailVCode() {
        PrepareBuilder();
        result.hasEmailVCode = false;
        result.emailVCode_ = "";
        return this;
      }
      
      public bool HasMobileVStatus {
        get { return result.hasMobileVStatus; }
      }
      public int MobileVStatus {
        get { return result.MobileVStatus; }
        set { SetMobileVStatus(value); }
      }
      public Builder SetMobileVStatus(int value) {
        PrepareBuilder();
        result.hasMobileVStatus = true;
        result.mobileVStatus_ = value;
        return this;
      }
      public Builder ClearMobileVStatus() {
        PrepareBuilder();
        result.hasMobileVStatus = false;
        result.mobileVStatus_ = 0;
        return this;
      }
      
      public bool HasGroupInfo {
       get { return result.hasGroupInfo; }
      }
      public global::hdsense.PBSimpleGroup GroupInfo {
        get { return result.GroupInfo; }
        set { SetGroupInfo(value); }
      }
      public Builder SetGroupInfo(global::hdsense.PBSimpleGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupInfo = true;
        result.groupInfo_ = value;
        return this;
      }
      public Builder SetGroupInfo(global::hdsense.PBSimpleGroup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGroupInfo = true;
        result.groupInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGroupInfo(global::hdsense.PBSimpleGroup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGroupInfo &&
            result.groupInfo_ != global::hdsense.PBSimpleGroup.DefaultInstance) {
            result.groupInfo_ = global::hdsense.PBSimpleGroup.CreateBuilder(result.groupInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.groupInfo_ = value;
        }
        result.hasGroupInfo = true;
        return this;
      }
      public Builder ClearGroupInfo() {
        PrepareBuilder();
        result.hasGroupInfo = false;
        result.groupInfo_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<string> OffGroupIdsList {
        get { return PrepareBuilder().offGroupIds_; }
      }
      public int OffGroupIdsCount {
        get { return result.OffGroupIdsCount; }
      }
      public string GetOffGroupIds(int index) {
        return result.GetOffGroupIds(index);
      }
      public Builder SetOffGroupIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.offGroupIds_[index] = value;
        return this;
      }
      public Builder AddOffGroupIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.offGroupIds_.Add(value);
        return this;
      }
      public Builder AddRangeOffGroupIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.offGroupIds_.Add(values);
        return this;
      }
      public Builder ClearOffGroupIds() {
        PrepareBuilder();
        result.offGroupIds_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> PermissionsList {
        get { return PrepareBuilder().permissions_; }
      }
      public int PermissionsCount {
        get { return result.PermissionsCount; }
      }
      public string GetPermissions(int index) {
        return result.GetPermissions(index);
      }
      public Builder SetPermissions(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.permissions_[index] = value;
        return this;
      }
      public Builder AddPermissions(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.permissions_.Add(value);
        return this;
      }
      public Builder AddRangePermissions(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.permissions_.Add(values);
        return this;
      }
      public Builder ClearPermissions() {
        PrepareBuilder();
        result.permissions_.Clear();
        return this;
      }
      
      public bool HasSingRecordLimit {
        get { return result.hasSingRecordLimit; }
      }
      public int SingRecordLimit {
        get { return result.SingRecordLimit; }
        set { SetSingRecordLimit(value); }
      }
      public Builder SetSingRecordLimit(int value) {
        PrepareBuilder();
        result.hasSingRecordLimit = true;
        result.singRecordLimit_ = value;
        return this;
      }
      public Builder ClearSingRecordLimit() {
        PrepareBuilder();
        result.hasSingRecordLimit = false;
        result.singRecordLimit_ = 60;
        return this;
      }
    }
    static PBGameUser() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSimpleGroup : pb::GeneratedMessage<PBSimpleGroup, PBSimpleGroup.Builder> {
    private PBSimpleGroup() { }
    private static readonly PBSimpleGroup defaultInstance = new PBSimpleGroup().MakeReadOnly();
    private static readonly string[] _pBSimpleGroupFieldNames = new string[] { "groupId", "groupMedal", "groupName" };
    private static readonly uint[] _pBSimpleGroupFieldTags = new uint[] { 10, 26, 18 };
    public static PBSimpleGroup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSimpleGroup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSimpleGroup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSimpleGroup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSimpleGroup, PBSimpleGroup.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSimpleGroup__FieldAccessorTable; }
    }
    
    public const int GroupIdFieldNumber = 1;
    private bool hasGroupId;
    private string groupId_ = "";
    public bool HasGroupId {
      get { return hasGroupId; }
    }
    public string GroupId {
      get { return groupId_; }
    }
    
    public const int GroupNameFieldNumber = 2;
    private bool hasGroupName;
    private string groupName_ = "";
    public bool HasGroupName {
      get { return hasGroupName; }
    }
    public string GroupName {
      get { return groupName_; }
    }
    
    public const int GroupMedalFieldNumber = 3;
    private bool hasGroupMedal;
    private string groupMedal_ = "";
    public bool HasGroupMedal {
      get { return hasGroupMedal; }
    }
    public string GroupMedal {
      get { return groupMedal_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGroupId) return false;
        if (!hasGroupName) return false;
        if (!hasGroupMedal) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSimpleGroupFieldNames;
      if (hasGroupId) {
        output.WriteString(1, field_names[0], GroupId);
      }
      if (hasGroupName) {
        output.WriteString(2, field_names[2], GroupName);
      }
      if (hasGroupMedal) {
        output.WriteString(3, field_names[1], GroupMedal);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGroupId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, GroupId);
        }
        if (hasGroupName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, GroupName);
        }
        if (hasGroupMedal) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GroupMedal);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSimpleGroup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSimpleGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSimpleGroup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSimpleGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSimpleGroup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSimpleGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSimpleGroup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSimpleGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSimpleGroup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSimpleGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSimpleGroup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSimpleGroup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSimpleGroup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSimpleGroup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSimpleGroup result;
      
      private PBSimpleGroup PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSimpleGroup original = result;
          result = new PBSimpleGroup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSimpleGroup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSimpleGroup.Descriptor; }
      }
      
      public override PBSimpleGroup DefaultInstanceForType {
        get { return global::hdsense.PBSimpleGroup.DefaultInstance; }
      }
      
      public override PBSimpleGroup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSimpleGroup) {
          return MergeFrom((PBSimpleGroup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSimpleGroup other) {
        if (other == global::hdsense.PBSimpleGroup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupId) {
          GroupId = other.GroupId;
        }
        if (other.HasGroupName) {
          GroupName = other.GroupName;
        }
        if (other.HasGroupMedal) {
          GroupMedal = other.GroupMedal;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSimpleGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSimpleGroupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasGroupId = input.ReadString(ref result.groupId_);
              break;
            }
            case 18: {
              result.hasGroupName = input.ReadString(ref result.groupName_);
              break;
            }
            case 26: {
              result.hasGroupMedal = input.ReadString(ref result.groupMedal_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGroupId {
        get { return result.hasGroupId; }
      }
      public string GroupId {
        get { return result.GroupId; }
        set { SetGroupId(value); }
      }
      public Builder SetGroupId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupId = true;
        result.groupId_ = value;
        return this;
      }
      public Builder ClearGroupId() {
        PrepareBuilder();
        result.hasGroupId = false;
        result.groupId_ = "";
        return this;
      }
      
      public bool HasGroupName {
        get { return result.hasGroupName; }
      }
      public string GroupName {
        get { return result.GroupName; }
        set { SetGroupName(value); }
      }
      public Builder SetGroupName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupName = true;
        result.groupName_ = value;
        return this;
      }
      public Builder ClearGroupName() {
        PrepareBuilder();
        result.hasGroupName = false;
        result.groupName_ = "";
        return this;
      }
      
      public bool HasGroupMedal {
        get { return result.hasGroupMedal; }
      }
      public string GroupMedal {
        get { return result.GroupMedal; }
        set { SetGroupMedal(value); }
      }
      public Builder SetGroupMedal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGroupMedal = true;
        result.groupMedal_ = value;
        return this;
      }
      public Builder ClearGroupMedal() {
        PrepareBuilder();
        result.hasGroupMedal = false;
        result.groupMedal_ = "";
        return this;
      }
    }
    static PBSimpleGroup() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBDrawBg : pb::GeneratedMessage<PBDrawBg, PBDrawBg.Builder> {
    private PBDrawBg() { }
    private static readonly PBDrawBg defaultInstance = new PBDrawBg().MakeReadOnly();
    private static readonly string[] _pBDrawBgFieldNames = new string[] { "bgId", "localUrl", "remoteUrl", "showStyle" };
    private static readonly uint[] _pBDrawBgFieldTags = new uint[] { 10, 18, 26, 32 };
    public static PBDrawBg DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBDrawBg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBDrawBg ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBDrawBg__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBDrawBg, PBDrawBg.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBDrawBg__FieldAccessorTable; }
    }
    
    public const int BgIdFieldNumber = 1;
    private bool hasBgId;
    private string bgId_ = "";
    public bool HasBgId {
      get { return hasBgId; }
    }
    public string BgId {
      get { return bgId_; }
    }
    
    public const int LocalUrlFieldNumber = 2;
    private bool hasLocalUrl;
    private string localUrl_ = "";
    public bool HasLocalUrl {
      get { return hasLocalUrl; }
    }
    public string LocalUrl {
      get { return localUrl_; }
    }
    
    public const int RemoteUrlFieldNumber = 3;
    private bool hasRemoteUrl;
    private string remoteUrl_ = "";
    public bool HasRemoteUrl {
      get { return hasRemoteUrl; }
    }
    public string RemoteUrl {
      get { return remoteUrl_; }
    }
    
    public const int ShowStyleFieldNumber = 4;
    private bool hasShowStyle;
    private int showStyle_;
    public bool HasShowStyle {
      get { return hasShowStyle; }
    }
    public int ShowStyle {
      get { return showStyle_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBgId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBDrawBgFieldNames;
      if (hasBgId) {
        output.WriteString(1, field_names[0], BgId);
      }
      if (hasLocalUrl) {
        output.WriteString(2, field_names[1], LocalUrl);
      }
      if (hasRemoteUrl) {
        output.WriteString(3, field_names[2], RemoteUrl);
      }
      if (hasShowStyle) {
        output.WriteInt32(4, field_names[3], ShowStyle);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBgId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BgId);
        }
        if (hasLocalUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(2, LocalUrl);
        }
        if (hasRemoteUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(3, RemoteUrl);
        }
        if (hasShowStyle) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ShowStyle);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBDrawBg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawBg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawBg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawBg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBDrawBg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBDrawBg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBDrawBg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawBg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBDrawBg MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBDrawBg prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBDrawBg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBDrawBg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBDrawBg result;
      
      private PBDrawBg PrepareBuilder() {
        if (resultIsReadOnly) {
          PBDrawBg original = result;
          result = new PBDrawBg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBDrawBg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBDrawBg.Descriptor; }
      }
      
      public override PBDrawBg DefaultInstanceForType {
        get { return global::hdsense.PBDrawBg.DefaultInstance; }
      }
      
      public override PBDrawBg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBDrawBg) {
          return MergeFrom((PBDrawBg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBDrawBg other) {
        if (other == global::hdsense.PBDrawBg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBgId) {
          BgId = other.BgId;
        }
        if (other.HasLocalUrl) {
          LocalUrl = other.LocalUrl;
        }
        if (other.HasRemoteUrl) {
          RemoteUrl = other.RemoteUrl;
        }
        if (other.HasShowStyle) {
          ShowStyle = other.ShowStyle;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBDrawBgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBDrawBgFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBgId = input.ReadString(ref result.bgId_);
              break;
            }
            case 18: {
              result.hasLocalUrl = input.ReadString(ref result.localUrl_);
              break;
            }
            case 26: {
              result.hasRemoteUrl = input.ReadString(ref result.remoteUrl_);
              break;
            }
            case 32: {
              result.hasShowStyle = input.ReadInt32(ref result.showStyle_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBgId {
        get { return result.hasBgId; }
      }
      public string BgId {
        get { return result.BgId; }
        set { SetBgId(value); }
      }
      public Builder SetBgId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBgId = true;
        result.bgId_ = value;
        return this;
      }
      public Builder ClearBgId() {
        PrepareBuilder();
        result.hasBgId = false;
        result.bgId_ = "";
        return this;
      }
      
      public bool HasLocalUrl {
        get { return result.hasLocalUrl; }
      }
      public string LocalUrl {
        get { return result.LocalUrl; }
        set { SetLocalUrl(value); }
      }
      public Builder SetLocalUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalUrl = true;
        result.localUrl_ = value;
        return this;
      }
      public Builder ClearLocalUrl() {
        PrepareBuilder();
        result.hasLocalUrl = false;
        result.localUrl_ = "";
        return this;
      }
      
      public bool HasRemoteUrl {
        get { return result.hasRemoteUrl; }
      }
      public string RemoteUrl {
        get { return result.RemoteUrl; }
        set { SetRemoteUrl(value); }
      }
      public Builder SetRemoteUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRemoteUrl = true;
        result.remoteUrl_ = value;
        return this;
      }
      public Builder ClearRemoteUrl() {
        PrepareBuilder();
        result.hasRemoteUrl = false;
        result.remoteUrl_ = "";
        return this;
      }
      
      public bool HasShowStyle {
        get { return result.hasShowStyle; }
      }
      public int ShowStyle {
        get { return result.ShowStyle; }
        set { SetShowStyle(value); }
      }
      public Builder SetShowStyle(int value) {
        PrepareBuilder();
        result.hasShowStyle = true;
        result.showStyle_ = value;
        return this;
      }
      public Builder ClearShowStyle() {
        PrepareBuilder();
        result.hasShowStyle = false;
        result.showStyle_ = 0;
        return this;
      }
    }
    static PBDrawBg() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGradient : pb::GeneratedMessage<PBGradient, PBGradient.Builder> {
    private PBGradient() { }
    private static readonly PBGradient defaultInstance = new PBGradient().MakeReadOnly();
    private static readonly string[] _pBGradientFieldNames = new string[] { "color", "division", "point" };
    private static readonly uint[] _pBGradientFieldTags = new uint[] { 18, 13, 29 };
    public static PBGradient DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGradient DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGradient ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGradient__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGradient, PBGradient.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGradient__FieldAccessorTable; }
    }
    
    public const int DivisionFieldNumber = 1;
    private bool hasDivision;
    private float division_;
    public bool HasDivision {
      get { return hasDivision; }
    }
    public float Division {
      get { return division_; }
    }
    
    public const int ColorFieldNumber = 2;
    private int colorMemoizedSerializedSize;
    private pbc::PopsicleList<int> color_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ColorList {
      get { return pbc::Lists.AsReadOnly(color_); }
    }
    public int ColorCount {
      get { return color_.Count; }
    }
    public int GetColor(int index) {
      return color_[index];
    }
    
    public const int PointFieldNumber = 3;
    private pbc::PopsicleList<float> point_ = new pbc::PopsicleList<float>();
    public scg::IList<float> PointList {
      get { return pbc::Lists.AsReadOnly(point_); }
    }
    public int PointCount {
      get { return point_.Count; }
    }
    public float GetPoint(int index) {
      return point_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDivision) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGradientFieldNames;
      if (hasDivision) {
        output.WriteFloat(1, field_names[1], Division);
      }
      if (color_.Count > 0) {
        output.WritePackedInt32Array(2, field_names[0], colorMemoizedSerializedSize, color_);
      }
      if (point_.Count > 0) {
        output.WriteFloatArray(3, field_names[2], point_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDivision) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Division);
        }
        {
          int dataSize = 0;
          foreach (int element in ColorList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (color_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          colorMemoizedSerializedSize = dataSize;
        }
        {
          int dataSize = 0;
          dataSize = 4 * point_.Count;
          size += dataSize;
          size += 1 * point_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGradient ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGradient ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGradient ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGradient ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGradient ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGradient ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGradient ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGradient ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGradient ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGradient ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGradient MakeReadOnly() {
      color_.MakeReadOnly();
      point_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGradient prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGradient, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGradient cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGradient result;
      
      private PBGradient PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGradient original = result;
          result = new PBGradient();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGradient MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGradient.Descriptor; }
      }
      
      public override PBGradient DefaultInstanceForType {
        get { return global::hdsense.PBGradient.DefaultInstance; }
      }
      
      public override PBGradient BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGradient) {
          return MergeFrom((PBGradient) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGradient other) {
        if (other == global::hdsense.PBGradient.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDivision) {
          Division = other.Division;
        }
        if (other.color_.Count != 0) {
          result.color_.Add(other.color_);
        }
        if (other.point_.Count != 0) {
          result.point_.Add(other.point_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGradientFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGradientFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasDivision = input.ReadFloat(ref result.division_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.color_);
              break;
            }
            case 26:
            case 29: {
              input.ReadFloatArray(tag, field_name, result.point_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDivision {
        get { return result.hasDivision; }
      }
      public float Division {
        get { return result.Division; }
        set { SetDivision(value); }
      }
      public Builder SetDivision(float value) {
        PrepareBuilder();
        result.hasDivision = true;
        result.division_ = value;
        return this;
      }
      public Builder ClearDivision() {
        PrepareBuilder();
        result.hasDivision = false;
        result.division_ = 0F;
        return this;
      }
      
      public pbc::IPopsicleList<int> ColorList {
        get { return PrepareBuilder().color_; }
      }
      public int ColorCount {
        get { return result.ColorCount; }
      }
      public int GetColor(int index) {
        return result.GetColor(index);
      }
      public Builder SetColor(int index, int value) {
        PrepareBuilder();
        result.color_[index] = value;
        return this;
      }
      public Builder AddColor(int value) {
        PrepareBuilder();
        result.color_.Add(value);
        return this;
      }
      public Builder AddRangeColor(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.color_.Add(values);
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.color_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> PointList {
        get { return PrepareBuilder().point_; }
      }
      public int PointCount {
        get { return result.PointCount; }
      }
      public float GetPoint(int index) {
        return result.GetPoint(index);
      }
      public Builder SetPoint(int index, float value) {
        PrepareBuilder();
        result.point_[index] = value;
        return this;
      }
      public Builder AddPoint(float value) {
        PrepareBuilder();
        result.point_.Add(value);
        return this;
      }
      public Builder AddRangePoint(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.point_.Add(values);
        return this;
      }
      public Builder ClearPoint() {
        PrepareBuilder();
        result.point_.Clear();
        return this;
      }
    }
    static PBGradient() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBDrawAction : pb::GeneratedMessage<PBDrawAction, PBDrawAction.Builder> {
    private PBDrawAction() { }
    private static readonly PBDrawAction defaultInstance = new PBDrawAction().MakeReadOnly();
    private static readonly string[] _pBDrawActionFieldNames = new string[] { "betterColor", "clipTag", "clipType", "color", "drawBg", "gradient", "layerAlpha", "layerTag", "penType", "points", "pointsX", "pointsY", "rectComponent", "shadowBlur", "shadowColor", "shadowOffsetX", "shadowOffsetY", "shapeStroke", "shapeType", "type", "width" };
    private static readonly uint[] _pBDrawActionFieldTags = new uint[] { 104, 160, 168, 32, 114, 242, 197, 184, 40, 18, 93, 101, 61, 149, 136, 125, 133, 64, 48, 8, 29 };
    public static PBDrawAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBDrawAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBDrawAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBDrawAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBDrawAction, PBDrawAction.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBDrawAction__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int PointsFieldNumber = 2;
    private int pointsMemoizedSerializedSize;
    private pbc::PopsicleList<int> points_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PointsList {
      get { return pbc::Lists.AsReadOnly(points_); }
    }
    public int PointsCount {
      get { return points_.Count; }
    }
    public int GetPoints(int index) {
      return points_[index];
    }
    
    public const int WidthFieldNumber = 3;
    private bool hasWidth;
    private float width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public float Width {
      get { return width_; }
    }
    
    public const int ColorFieldNumber = 4;
    private bool hasColor;
    private int color_;
    public bool HasColor {
      get { return hasColor; }
    }
    public int Color {
      get { return color_; }
    }
    
    public const int PenTypeFieldNumber = 5;
    private bool hasPenType;
    private int penType_;
    public bool HasPenType {
      get { return hasPenType; }
    }
    public int PenType {
      get { return penType_; }
    }
    
    public const int ShapeTypeFieldNumber = 6;
    private bool hasShapeType;
    private int shapeType_;
    public bool HasShapeType {
      get { return hasShapeType; }
    }
    public int ShapeType {
      get { return shapeType_; }
    }
    
    public const int RectComponentFieldNumber = 7;
    private pbc::PopsicleList<float> rectComponent_ = new pbc::PopsicleList<float>();
    public scg::IList<float> RectComponentList {
      get { return pbc::Lists.AsReadOnly(rectComponent_); }
    }
    public int RectComponentCount {
      get { return rectComponent_.Count; }
    }
    public float GetRectComponent(int index) {
      return rectComponent_[index];
    }
    
    public const int ShapeStrokeFieldNumber = 8;
    private bool hasShapeStroke;
    private bool shapeStroke_;
    public bool HasShapeStroke {
      get { return hasShapeStroke; }
    }
    public bool ShapeStroke {
      get { return shapeStroke_; }
    }
    
    public const int PointsXFieldNumber = 11;
    private pbc::PopsicleList<float> pointsX_ = new pbc::PopsicleList<float>();
    public scg::IList<float> PointsXList {
      get { return pbc::Lists.AsReadOnly(pointsX_); }
    }
    public int PointsXCount {
      get { return pointsX_.Count; }
    }
    public float GetPointsX(int index) {
      return pointsX_[index];
    }
    
    public const int PointsYFieldNumber = 12;
    private pbc::PopsicleList<float> pointsY_ = new pbc::PopsicleList<float>();
    public scg::IList<float> PointsYList {
      get { return pbc::Lists.AsReadOnly(pointsY_); }
    }
    public int PointsYCount {
      get { return pointsY_.Count; }
    }
    public float GetPointsY(int index) {
      return pointsY_[index];
    }
    
    public const int BetterColorFieldNumber = 13;
    private bool hasBetterColor;
    private int betterColor_;
    public bool HasBetterColor {
      get { return hasBetterColor; }
    }
    public int BetterColor {
      get { return betterColor_; }
    }
    
    public const int DrawBgFieldNumber = 14;
    private bool hasDrawBg;
    private global::hdsense.PBDrawBg drawBg_;
    public bool HasDrawBg {
      get { return hasDrawBg; }
    }
    public global::hdsense.PBDrawBg DrawBg {
      get { return drawBg_ ?? global::hdsense.PBDrawBg.DefaultInstance; }
    }
    
    public const int ShadowOffsetXFieldNumber = 15;
    private bool hasShadowOffsetX;
    private float shadowOffsetX_;
    public bool HasShadowOffsetX {
      get { return hasShadowOffsetX; }
    }
    public float ShadowOffsetX {
      get { return shadowOffsetX_; }
    }
    
    public const int ShadowOffsetYFieldNumber = 16;
    private bool hasShadowOffsetY;
    private float shadowOffsetY_;
    public bool HasShadowOffsetY {
      get { return hasShadowOffsetY; }
    }
    public float ShadowOffsetY {
      get { return shadowOffsetY_; }
    }
    
    public const int ShadowColorFieldNumber = 17;
    private bool hasShadowColor;
    private int shadowColor_;
    public bool HasShadowColor {
      get { return hasShadowColor; }
    }
    public int ShadowColor {
      get { return shadowColor_; }
    }
    
    public const int ShadowBlurFieldNumber = 18;
    private bool hasShadowBlur;
    private float shadowBlur_;
    public bool HasShadowBlur {
      get { return hasShadowBlur; }
    }
    public float ShadowBlur {
      get { return shadowBlur_; }
    }
    
    public const int ClipTagFieldNumber = 20;
    private bool hasClipTag;
    private int clipTag_;
    public bool HasClipTag {
      get { return hasClipTag; }
    }
    public int ClipTag {
      get { return clipTag_; }
    }
    
    public const int ClipTypeFieldNumber = 21;
    private bool hasClipType;
    private int clipType_;
    public bool HasClipType {
      get { return hasClipType; }
    }
    public int ClipType {
      get { return clipType_; }
    }
    
    public const int LayerTagFieldNumber = 23;
    private bool hasLayerTag;
    private int layerTag_;
    public bool HasLayerTag {
      get { return hasLayerTag; }
    }
    public int LayerTag {
      get { return layerTag_; }
    }
    
    public const int LayerAlphaFieldNumber = 24;
    private bool hasLayerAlpha;
    private float layerAlpha_ = 1F;
    public bool HasLayerAlpha {
      get { return hasLayerAlpha; }
    }
    public float LayerAlpha {
      get { return layerAlpha_; }
    }
    
    public const int GradientFieldNumber = 30;
    private bool hasGradient;
    private global::hdsense.PBGradient gradient_;
    public bool HasGradient {
      get { return hasGradient; }
    }
    public global::hdsense.PBGradient Gradient {
      get { return gradient_ ?? global::hdsense.PBGradient.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (HasDrawBg) {
          if (!DrawBg.IsInitialized) return false;
        }
        if (HasGradient) {
          if (!Gradient.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBDrawActionFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[19], Type);
      }
      if (points_.Count > 0) {
        output.WritePackedInt32Array(2, field_names[9], pointsMemoizedSerializedSize, points_);
      }
      if (hasWidth) {
        output.WriteFloat(3, field_names[20], Width);
      }
      if (hasColor) {
        output.WriteInt32(4, field_names[3], Color);
      }
      if (hasPenType) {
        output.WriteInt32(5, field_names[8], PenType);
      }
      if (hasShapeType) {
        output.WriteInt32(6, field_names[18], ShapeType);
      }
      if (rectComponent_.Count > 0) {
        output.WriteFloatArray(7, field_names[12], rectComponent_);
      }
      if (hasShapeStroke) {
        output.WriteBool(8, field_names[17], ShapeStroke);
      }
      if (pointsX_.Count > 0) {
        output.WriteFloatArray(11, field_names[10], pointsX_);
      }
      if (pointsY_.Count > 0) {
        output.WriteFloatArray(12, field_names[11], pointsY_);
      }
      if (hasBetterColor) {
        output.WriteInt32(13, field_names[0], BetterColor);
      }
      if (hasDrawBg) {
        output.WriteMessage(14, field_names[4], DrawBg);
      }
      if (hasShadowOffsetX) {
        output.WriteFloat(15, field_names[15], ShadowOffsetX);
      }
      if (hasShadowOffsetY) {
        output.WriteFloat(16, field_names[16], ShadowOffsetY);
      }
      if (hasShadowColor) {
        output.WriteInt32(17, field_names[14], ShadowColor);
      }
      if (hasShadowBlur) {
        output.WriteFloat(18, field_names[13], ShadowBlur);
      }
      if (hasClipTag) {
        output.WriteInt32(20, field_names[1], ClipTag);
      }
      if (hasClipType) {
        output.WriteInt32(21, field_names[2], ClipType);
      }
      if (hasLayerTag) {
        output.WriteInt32(23, field_names[7], LayerTag);
      }
      if (hasLayerAlpha) {
        output.WriteFloat(24, field_names[6], LayerAlpha);
      }
      if (hasGradient) {
        output.WriteMessage(30, field_names[5], Gradient);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        {
          int dataSize = 0;
          foreach (int element in PointsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (points_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          pointsMemoizedSerializedSize = dataSize;
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Width);
        }
        if (hasColor) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Color);
        }
        if (hasPenType) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, PenType);
        }
        if (hasShapeType) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, ShapeType);
        }
        {
          int dataSize = 0;
          dataSize = 4 * rectComponent_.Count;
          size += dataSize;
          size += 1 * rectComponent_.Count;
        }
        if (hasShapeStroke) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, ShapeStroke);
        }
        {
          int dataSize = 0;
          dataSize = 4 * pointsX_.Count;
          size += dataSize;
          size += 1 * pointsX_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 4 * pointsY_.Count;
          size += dataSize;
          size += 1 * pointsY_.Count;
        }
        if (hasBetterColor) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, BetterColor);
        }
        if (hasDrawBg) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, DrawBg);
        }
        if (hasShadowOffsetX) {
          size += pb::CodedOutputStream.ComputeFloatSize(15, ShadowOffsetX);
        }
        if (hasShadowOffsetY) {
          size += pb::CodedOutputStream.ComputeFloatSize(16, ShadowOffsetY);
        }
        if (hasShadowColor) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, ShadowColor);
        }
        if (hasShadowBlur) {
          size += pb::CodedOutputStream.ComputeFloatSize(18, ShadowBlur);
        }
        if (hasClipTag) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, ClipTag);
        }
        if (hasClipType) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, ClipType);
        }
        if (hasLayerTag) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, LayerTag);
        }
        if (hasLayerAlpha) {
          size += pb::CodedOutputStream.ComputeFloatSize(24, LayerAlpha);
        }
        if (hasGradient) {
          size += pb::CodedOutputStream.ComputeMessageSize(30, Gradient);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBDrawAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBDrawAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBDrawAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBDrawAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBDrawAction MakeReadOnly() {
      points_.MakeReadOnly();
      rectComponent_.MakeReadOnly();
      pointsX_.MakeReadOnly();
      pointsY_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBDrawAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBDrawAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBDrawAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBDrawAction result;
      
      private PBDrawAction PrepareBuilder() {
        if (resultIsReadOnly) {
          PBDrawAction original = result;
          result = new PBDrawAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBDrawAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBDrawAction.Descriptor; }
      }
      
      public override PBDrawAction DefaultInstanceForType {
        get { return global::hdsense.PBDrawAction.DefaultInstance; }
      }
      
      public override PBDrawAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBDrawAction) {
          return MergeFrom((PBDrawAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBDrawAction other) {
        if (other == global::hdsense.PBDrawAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.points_.Count != 0) {
          result.points_.Add(other.points_);
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasColor) {
          Color = other.Color;
        }
        if (other.HasPenType) {
          PenType = other.PenType;
        }
        if (other.HasShapeType) {
          ShapeType = other.ShapeType;
        }
        if (other.rectComponent_.Count != 0) {
          result.rectComponent_.Add(other.rectComponent_);
        }
        if (other.HasShapeStroke) {
          ShapeStroke = other.ShapeStroke;
        }
        if (other.pointsX_.Count != 0) {
          result.pointsX_.Add(other.pointsX_);
        }
        if (other.pointsY_.Count != 0) {
          result.pointsY_.Add(other.pointsY_);
        }
        if (other.HasBetterColor) {
          BetterColor = other.BetterColor;
        }
        if (other.HasDrawBg) {
          MergeDrawBg(other.DrawBg);
        }
        if (other.HasShadowOffsetX) {
          ShadowOffsetX = other.ShadowOffsetX;
        }
        if (other.HasShadowOffsetY) {
          ShadowOffsetY = other.ShadowOffsetY;
        }
        if (other.HasShadowColor) {
          ShadowColor = other.ShadowColor;
        }
        if (other.HasShadowBlur) {
          ShadowBlur = other.ShadowBlur;
        }
        if (other.HasClipTag) {
          ClipTag = other.ClipTag;
        }
        if (other.HasClipType) {
          ClipType = other.ClipType;
        }
        if (other.HasLayerTag) {
          LayerTag = other.LayerTag;
        }
        if (other.HasLayerAlpha) {
          LayerAlpha = other.LayerAlpha;
        }
        if (other.HasGradient) {
          MergeGradient(other.Gradient);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBDrawActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBDrawActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.points_);
              break;
            }
            case 29: {
              result.hasWidth = input.ReadFloat(ref result.width_);
              break;
            }
            case 32: {
              result.hasColor = input.ReadInt32(ref result.color_);
              break;
            }
            case 40: {
              result.hasPenType = input.ReadInt32(ref result.penType_);
              break;
            }
            case 48: {
              result.hasShapeType = input.ReadInt32(ref result.shapeType_);
              break;
            }
            case 58:
            case 61: {
              input.ReadFloatArray(tag, field_name, result.rectComponent_);
              break;
            }
            case 64: {
              result.hasShapeStroke = input.ReadBool(ref result.shapeStroke_);
              break;
            }
            case 90:
            case 93: {
              input.ReadFloatArray(tag, field_name, result.pointsX_);
              break;
            }
            case 98:
            case 101: {
              input.ReadFloatArray(tag, field_name, result.pointsY_);
              break;
            }
            case 104: {
              result.hasBetterColor = input.ReadInt32(ref result.betterColor_);
              break;
            }
            case 114: {
              global::hdsense.PBDrawBg.Builder subBuilder = global::hdsense.PBDrawBg.CreateBuilder();
              if (result.hasDrawBg) {
                subBuilder.MergeFrom(DrawBg);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DrawBg = subBuilder.BuildPartial();
              break;
            }
            case 125: {
              result.hasShadowOffsetX = input.ReadFloat(ref result.shadowOffsetX_);
              break;
            }
            case 133: {
              result.hasShadowOffsetY = input.ReadFloat(ref result.shadowOffsetY_);
              break;
            }
            case 136: {
              result.hasShadowColor = input.ReadInt32(ref result.shadowColor_);
              break;
            }
            case 149: {
              result.hasShadowBlur = input.ReadFloat(ref result.shadowBlur_);
              break;
            }
            case 160: {
              result.hasClipTag = input.ReadInt32(ref result.clipTag_);
              break;
            }
            case 168: {
              result.hasClipType = input.ReadInt32(ref result.clipType_);
              break;
            }
            case 184: {
              result.hasLayerTag = input.ReadInt32(ref result.layerTag_);
              break;
            }
            case 197: {
              result.hasLayerAlpha = input.ReadFloat(ref result.layerAlpha_);
              break;
            }
            case 242: {
              global::hdsense.PBGradient.Builder subBuilder = global::hdsense.PBGradient.CreateBuilder();
              if (result.hasGradient) {
                subBuilder.MergeFrom(Gradient);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Gradient = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> PointsList {
        get { return PrepareBuilder().points_; }
      }
      public int PointsCount {
        get { return result.PointsCount; }
      }
      public int GetPoints(int index) {
        return result.GetPoints(index);
      }
      public Builder SetPoints(int index, int value) {
        PrepareBuilder();
        result.points_[index] = value;
        return this;
      }
      public Builder AddPoints(int value) {
        PrepareBuilder();
        result.points_.Add(value);
        return this;
      }
      public Builder AddRangePoints(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.points_.Add(values);
        return this;
      }
      public Builder ClearPoints() {
        PrepareBuilder();
        result.points_.Clear();
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public float Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(float value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0F;
        return this;
      }
      
      public bool HasColor {
        get { return result.hasColor; }
      }
      public int Color {
        get { return result.Color; }
        set { SetColor(value); }
      }
      public Builder SetColor(int value) {
        PrepareBuilder();
        result.hasColor = true;
        result.color_ = value;
        return this;
      }
      public Builder ClearColor() {
        PrepareBuilder();
        result.hasColor = false;
        result.color_ = 0;
        return this;
      }
      
      public bool HasPenType {
        get { return result.hasPenType; }
      }
      public int PenType {
        get { return result.PenType; }
        set { SetPenType(value); }
      }
      public Builder SetPenType(int value) {
        PrepareBuilder();
        result.hasPenType = true;
        result.penType_ = value;
        return this;
      }
      public Builder ClearPenType() {
        PrepareBuilder();
        result.hasPenType = false;
        result.penType_ = 0;
        return this;
      }
      
      public bool HasShapeType {
        get { return result.hasShapeType; }
      }
      public int ShapeType {
        get { return result.ShapeType; }
        set { SetShapeType(value); }
      }
      public Builder SetShapeType(int value) {
        PrepareBuilder();
        result.hasShapeType = true;
        result.shapeType_ = value;
        return this;
      }
      public Builder ClearShapeType() {
        PrepareBuilder();
        result.hasShapeType = false;
        result.shapeType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<float> RectComponentList {
        get { return PrepareBuilder().rectComponent_; }
      }
      public int RectComponentCount {
        get { return result.RectComponentCount; }
      }
      public float GetRectComponent(int index) {
        return result.GetRectComponent(index);
      }
      public Builder SetRectComponent(int index, float value) {
        PrepareBuilder();
        result.rectComponent_[index] = value;
        return this;
      }
      public Builder AddRectComponent(float value) {
        PrepareBuilder();
        result.rectComponent_.Add(value);
        return this;
      }
      public Builder AddRangeRectComponent(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.rectComponent_.Add(values);
        return this;
      }
      public Builder ClearRectComponent() {
        PrepareBuilder();
        result.rectComponent_.Clear();
        return this;
      }
      
      public bool HasShapeStroke {
        get { return result.hasShapeStroke; }
      }
      public bool ShapeStroke {
        get { return result.ShapeStroke; }
        set { SetShapeStroke(value); }
      }
      public Builder SetShapeStroke(bool value) {
        PrepareBuilder();
        result.hasShapeStroke = true;
        result.shapeStroke_ = value;
        return this;
      }
      public Builder ClearShapeStroke() {
        PrepareBuilder();
        result.hasShapeStroke = false;
        result.shapeStroke_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<float> PointsXList {
        get { return PrepareBuilder().pointsX_; }
      }
      public int PointsXCount {
        get { return result.PointsXCount; }
      }
      public float GetPointsX(int index) {
        return result.GetPointsX(index);
      }
      public Builder SetPointsX(int index, float value) {
        PrepareBuilder();
        result.pointsX_[index] = value;
        return this;
      }
      public Builder AddPointsX(float value) {
        PrepareBuilder();
        result.pointsX_.Add(value);
        return this;
      }
      public Builder AddRangePointsX(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.pointsX_.Add(values);
        return this;
      }
      public Builder ClearPointsX() {
        PrepareBuilder();
        result.pointsX_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<float> PointsYList {
        get { return PrepareBuilder().pointsY_; }
      }
      public int PointsYCount {
        get { return result.PointsYCount; }
      }
      public float GetPointsY(int index) {
        return result.GetPointsY(index);
      }
      public Builder SetPointsY(int index, float value) {
        PrepareBuilder();
        result.pointsY_[index] = value;
        return this;
      }
      public Builder AddPointsY(float value) {
        PrepareBuilder();
        result.pointsY_.Add(value);
        return this;
      }
      public Builder AddRangePointsY(scg::IEnumerable<float> values) {
        PrepareBuilder();
        result.pointsY_.Add(values);
        return this;
      }
      public Builder ClearPointsY() {
        PrepareBuilder();
        result.pointsY_.Clear();
        return this;
      }
      
      public bool HasBetterColor {
        get { return result.hasBetterColor; }
      }
      public int BetterColor {
        get { return result.BetterColor; }
        set { SetBetterColor(value); }
      }
      public Builder SetBetterColor(int value) {
        PrepareBuilder();
        result.hasBetterColor = true;
        result.betterColor_ = value;
        return this;
      }
      public Builder ClearBetterColor() {
        PrepareBuilder();
        result.hasBetterColor = false;
        result.betterColor_ = 0;
        return this;
      }
      
      public bool HasDrawBg {
       get { return result.hasDrawBg; }
      }
      public global::hdsense.PBDrawBg DrawBg {
        get { return result.DrawBg; }
        set { SetDrawBg(value); }
      }
      public Builder SetDrawBg(global::hdsense.PBDrawBg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrawBg = true;
        result.drawBg_ = value;
        return this;
      }
      public Builder SetDrawBg(global::hdsense.PBDrawBg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDrawBg = true;
        result.drawBg_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDrawBg(global::hdsense.PBDrawBg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDrawBg &&
            result.drawBg_ != global::hdsense.PBDrawBg.DefaultInstance) {
            result.drawBg_ = global::hdsense.PBDrawBg.CreateBuilder(result.drawBg_).MergeFrom(value).BuildPartial();
        } else {
          result.drawBg_ = value;
        }
        result.hasDrawBg = true;
        return this;
      }
      public Builder ClearDrawBg() {
        PrepareBuilder();
        result.hasDrawBg = false;
        result.drawBg_ = null;
        return this;
      }
      
      public bool HasShadowOffsetX {
        get { return result.hasShadowOffsetX; }
      }
      public float ShadowOffsetX {
        get { return result.ShadowOffsetX; }
        set { SetShadowOffsetX(value); }
      }
      public Builder SetShadowOffsetX(float value) {
        PrepareBuilder();
        result.hasShadowOffsetX = true;
        result.shadowOffsetX_ = value;
        return this;
      }
      public Builder ClearShadowOffsetX() {
        PrepareBuilder();
        result.hasShadowOffsetX = false;
        result.shadowOffsetX_ = 0F;
        return this;
      }
      
      public bool HasShadowOffsetY {
        get { return result.hasShadowOffsetY; }
      }
      public float ShadowOffsetY {
        get { return result.ShadowOffsetY; }
        set { SetShadowOffsetY(value); }
      }
      public Builder SetShadowOffsetY(float value) {
        PrepareBuilder();
        result.hasShadowOffsetY = true;
        result.shadowOffsetY_ = value;
        return this;
      }
      public Builder ClearShadowOffsetY() {
        PrepareBuilder();
        result.hasShadowOffsetY = false;
        result.shadowOffsetY_ = 0F;
        return this;
      }
      
      public bool HasShadowColor {
        get { return result.hasShadowColor; }
      }
      public int ShadowColor {
        get { return result.ShadowColor; }
        set { SetShadowColor(value); }
      }
      public Builder SetShadowColor(int value) {
        PrepareBuilder();
        result.hasShadowColor = true;
        result.shadowColor_ = value;
        return this;
      }
      public Builder ClearShadowColor() {
        PrepareBuilder();
        result.hasShadowColor = false;
        result.shadowColor_ = 0;
        return this;
      }
      
      public bool HasShadowBlur {
        get { return result.hasShadowBlur; }
      }
      public float ShadowBlur {
        get { return result.ShadowBlur; }
        set { SetShadowBlur(value); }
      }
      public Builder SetShadowBlur(float value) {
        PrepareBuilder();
        result.hasShadowBlur = true;
        result.shadowBlur_ = value;
        return this;
      }
      public Builder ClearShadowBlur() {
        PrepareBuilder();
        result.hasShadowBlur = false;
        result.shadowBlur_ = 0F;
        return this;
      }
      
      public bool HasClipTag {
        get { return result.hasClipTag; }
      }
      public int ClipTag {
        get { return result.ClipTag; }
        set { SetClipTag(value); }
      }
      public Builder SetClipTag(int value) {
        PrepareBuilder();
        result.hasClipTag = true;
        result.clipTag_ = value;
        return this;
      }
      public Builder ClearClipTag() {
        PrepareBuilder();
        result.hasClipTag = false;
        result.clipTag_ = 0;
        return this;
      }
      
      public bool HasClipType {
        get { return result.hasClipType; }
      }
      public int ClipType {
        get { return result.ClipType; }
        set { SetClipType(value); }
      }
      public Builder SetClipType(int value) {
        PrepareBuilder();
        result.hasClipType = true;
        result.clipType_ = value;
        return this;
      }
      public Builder ClearClipType() {
        PrepareBuilder();
        result.hasClipType = false;
        result.clipType_ = 0;
        return this;
      }
      
      public bool HasLayerTag {
        get { return result.hasLayerTag; }
      }
      public int LayerTag {
        get { return result.LayerTag; }
        set { SetLayerTag(value); }
      }
      public Builder SetLayerTag(int value) {
        PrepareBuilder();
        result.hasLayerTag = true;
        result.layerTag_ = value;
        return this;
      }
      public Builder ClearLayerTag() {
        PrepareBuilder();
        result.hasLayerTag = false;
        result.layerTag_ = 0;
        return this;
      }
      
      public bool HasLayerAlpha {
        get { return result.hasLayerAlpha; }
      }
      public float LayerAlpha {
        get { return result.LayerAlpha; }
        set { SetLayerAlpha(value); }
      }
      public Builder SetLayerAlpha(float value) {
        PrepareBuilder();
        result.hasLayerAlpha = true;
        result.layerAlpha_ = value;
        return this;
      }
      public Builder ClearLayerAlpha() {
        PrepareBuilder();
        result.hasLayerAlpha = false;
        result.layerAlpha_ = 1F;
        return this;
      }
      
      public bool HasGradient {
       get { return result.hasGradient; }
      }
      public global::hdsense.PBGradient Gradient {
        get { return result.Gradient; }
        set { SetGradient(value); }
      }
      public Builder SetGradient(global::hdsense.PBGradient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGradient = true;
        result.gradient_ = value;
        return this;
      }
      public Builder SetGradient(global::hdsense.PBGradient.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGradient = true;
        result.gradient_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGradient(global::hdsense.PBGradient value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGradient &&
            result.gradient_ != global::hdsense.PBGradient.DefaultInstance) {
            result.gradient_ = global::hdsense.PBGradient.CreateBuilder(result.gradient_).MergeFrom(value).BuildPartial();
        } else {
          result.gradient_ = value;
        }
        result.hasGradient = true;
        return this;
      }
      public Builder ClearGradient() {
        PrepareBuilder();
        result.hasGradient = false;
        result.gradient_ = null;
        return this;
      }
    }
    static PBDrawAction() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMessage : pb::GeneratedMessage<PBMessage, PBMessage.Builder> {
    private PBMessage() { }
    private static readonly PBMessage defaultInstance = new PBMessage().MakeReadOnly();
    private static readonly string[] _pBMessageFieldNames = new string[] { "canvasSize", "createDate", "dataUrl", "drawData", "drawDataVersion", "duration", "endDate", "from", "fromUser", "imageURL", "isGroup", "latitude", "location", "longitude", "messageId", "replyResult", "reqMessageId", "startDate", "status", "text", "thumbImageURL", "to", "toUser", "type" };
    private static readonly uint[] _pBMessageFieldTags = new uint[] { 194, 176, 410, 170, 184, 416, 208, 18, 58, 330, 48, 257, 242, 249, 10, 272, 266, 200, 32, 162, 338, 26, 66, 40 };
    public static PBMessage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMessage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMessage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBMessage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMessage, PBMessage.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBMessage__FieldAccessorTable; }
    }
    
    public const int MessageIdFieldNumber = 1;
    private bool hasMessageId;
    private string messageId_ = "";
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public string MessageId {
      get { return messageId_; }
    }
    
    public const int FromFieldNumber = 2;
    private bool hasFrom;
    private string from_ = "";
    public bool HasFrom {
      get { return hasFrom; }
    }
    public string From {
      get { return from_; }
    }
    
    public const int ToFieldNumber = 3;
    private bool hasTo;
    private string to_ = "";
    public bool HasTo {
      get { return hasTo; }
    }
    public string To {
      get { return to_; }
    }
    
    public const int StatusFieldNumber = 4;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int TypeFieldNumber = 5;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int IsGroupFieldNumber = 6;
    private bool hasIsGroup;
    private bool isGroup_;
    public bool HasIsGroup {
      get { return hasIsGroup; }
    }
    public bool IsGroup {
      get { return isGroup_; }
    }
    
    public const int FromUserFieldNumber = 7;
    private bool hasFromUser;
    private global::hdsense.PBGameUser fromUser_;
    public bool HasFromUser {
      get { return hasFromUser; }
    }
    public global::hdsense.PBGameUser FromUser {
      get { return fromUser_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int ToUserFieldNumber = 8;
    private bool hasToUser;
    private global::hdsense.PBGameUser toUser_;
    public bool HasToUser {
      get { return hasToUser; }
    }
    public global::hdsense.PBGameUser ToUser {
      get { return toUser_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int TextFieldNumber = 20;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int DrawDataFieldNumber = 21;
    private pbc::PopsicleList<global::hdsense.PBDrawAction> drawData_ = new pbc::PopsicleList<global::hdsense.PBDrawAction>();
    public scg::IList<global::hdsense.PBDrawAction> DrawDataList {
      get { return drawData_; }
    }
    public int DrawDataCount {
      get { return drawData_.Count; }
    }
    public global::hdsense.PBDrawAction GetDrawData(int index) {
      return drawData_[index];
    }
    
    public const int CreateDateFieldNumber = 22;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int DrawDataVersionFieldNumber = 23;
    private bool hasDrawDataVersion;
    private int drawDataVersion_;
    public bool HasDrawDataVersion {
      get { return hasDrawDataVersion; }
    }
    public int DrawDataVersion {
      get { return drawDataVersion_; }
    }
    
    public const int CanvasSizeFieldNumber = 24;
    private bool hasCanvasSize;
    private global::hdsense.PBSize canvasSize_;
    public bool HasCanvasSize {
      get { return hasCanvasSize; }
    }
    public global::hdsense.PBSize CanvasSize {
      get { return canvasSize_ ?? global::hdsense.PBSize.DefaultInstance; }
    }
    
    public const int StartDateFieldNumber = 25;
    private bool hasStartDate;
    private int startDate_;
    public bool HasStartDate {
      get { return hasStartDate; }
    }
    public int StartDate {
      get { return startDate_; }
    }
    
    public const int EndDateFieldNumber = 26;
    private bool hasEndDate;
    private int endDate_;
    public bool HasEndDate {
      get { return hasEndDate; }
    }
    public int EndDate {
      get { return endDate_; }
    }
    
    public const int LocationFieldNumber = 30;
    private bool hasLocation;
    private string location_ = "";
    public bool HasLocation {
      get { return hasLocation; }
    }
    public string Location {
      get { return location_; }
    }
    
    public const int LongitudeFieldNumber = 31;
    private bool hasLongitude;
    private double longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public double Longitude {
      get { return longitude_; }
    }
    
    public const int LatitudeFieldNumber = 32;
    private bool hasLatitude;
    private double latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public double Latitude {
      get { return latitude_; }
    }
    
    public const int ReqMessageIdFieldNumber = 33;
    private bool hasReqMessageId;
    private string reqMessageId_ = "";
    public bool HasReqMessageId {
      get { return hasReqMessageId; }
    }
    public string ReqMessageId {
      get { return reqMessageId_; }
    }
    
    public const int ReplyResultFieldNumber = 34;
    private bool hasReplyResult;
    private int replyResult_;
    public bool HasReplyResult {
      get { return hasReplyResult; }
    }
    public int ReplyResult {
      get { return replyResult_; }
    }
    
    public const int ImageURLFieldNumber = 41;
    private bool hasImageURL;
    private string imageURL_ = "";
    public bool HasImageURL {
      get { return hasImageURL; }
    }
    public string ImageURL {
      get { return imageURL_; }
    }
    
    public const int ThumbImageURLFieldNumber = 42;
    private bool hasThumbImageURL;
    private string thumbImageURL_ = "";
    public bool HasThumbImageURL {
      get { return hasThumbImageURL; }
    }
    public string ThumbImageURL {
      get { return thumbImageURL_; }
    }
    
    public const int DataUrlFieldNumber = 51;
    private bool hasDataUrl;
    private string dataUrl_ = "";
    public bool HasDataUrl {
      get { return hasDataUrl; }
    }
    public string DataUrl {
      get { return dataUrl_; }
    }
    
    public const int DurationFieldNumber = 52;
    private bool hasDuration;
    private int duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public int Duration {
      get { return duration_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMessageId) return false;
        if (!hasFrom) return false;
        if (!hasTo) return false;
        if (HasFromUser) {
          if (!FromUser.IsInitialized) return false;
        }
        if (HasToUser) {
          if (!ToUser.IsInitialized) return false;
        }
        foreach (global::hdsense.PBDrawAction element in DrawDataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMessageFieldNames;
      if (hasMessageId) {
        output.WriteString(1, field_names[14], MessageId);
      }
      if (hasFrom) {
        output.WriteString(2, field_names[7], From);
      }
      if (hasTo) {
        output.WriteString(3, field_names[21], To);
      }
      if (hasStatus) {
        output.WriteInt32(4, field_names[18], Status);
      }
      if (hasType) {
        output.WriteInt32(5, field_names[23], Type);
      }
      if (hasIsGroup) {
        output.WriteBool(6, field_names[10], IsGroup);
      }
      if (hasFromUser) {
        output.WriteMessage(7, field_names[8], FromUser);
      }
      if (hasToUser) {
        output.WriteMessage(8, field_names[22], ToUser);
      }
      if (hasText) {
        output.WriteString(20, field_names[19], Text);
      }
      if (drawData_.Count > 0) {
        output.WriteMessageArray(21, field_names[3], drawData_);
      }
      if (hasCreateDate) {
        output.WriteInt32(22, field_names[1], CreateDate);
      }
      if (hasDrawDataVersion) {
        output.WriteInt32(23, field_names[4], DrawDataVersion);
      }
      if (hasCanvasSize) {
        output.WriteMessage(24, field_names[0], CanvasSize);
      }
      if (hasStartDate) {
        output.WriteInt32(25, field_names[17], StartDate);
      }
      if (hasEndDate) {
        output.WriteInt32(26, field_names[6], EndDate);
      }
      if (hasLocation) {
        output.WriteString(30, field_names[12], Location);
      }
      if (hasLongitude) {
        output.WriteDouble(31, field_names[13], Longitude);
      }
      if (hasLatitude) {
        output.WriteDouble(32, field_names[11], Latitude);
      }
      if (hasReqMessageId) {
        output.WriteString(33, field_names[16], ReqMessageId);
      }
      if (hasReplyResult) {
        output.WriteInt32(34, field_names[15], ReplyResult);
      }
      if (hasImageURL) {
        output.WriteString(41, field_names[9], ImageURL);
      }
      if (hasThumbImageURL) {
        output.WriteString(42, field_names[20], ThumbImageURL);
      }
      if (hasDataUrl) {
        output.WriteString(51, field_names[2], DataUrl);
      }
      if (hasDuration) {
        output.WriteInt32(52, field_names[5], Duration);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, MessageId);
        }
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeStringSize(2, From);
        }
        if (hasTo) {
          size += pb::CodedOutputStream.ComputeStringSize(3, To);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Status);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Type);
        }
        if (hasIsGroup) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsGroup);
        }
        if (hasFromUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, FromUser);
        }
        if (hasToUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, ToUser);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(20, Text);
        }
        foreach (global::hdsense.PBDrawAction element in DrawDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, element);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, CreateDate);
        }
        if (hasDrawDataVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, DrawDataVersion);
        }
        if (hasCanvasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, CanvasSize);
        }
        if (hasStartDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, StartDate);
        }
        if (hasEndDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, EndDate);
        }
        if (hasLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(30, Location);
        }
        if (hasLongitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, Longitude);
        }
        if (hasLatitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(32, Latitude);
        }
        if (hasReqMessageId) {
          size += pb::CodedOutputStream.ComputeStringSize(33, ReqMessageId);
        }
        if (hasReplyResult) {
          size += pb::CodedOutputStream.ComputeInt32Size(34, ReplyResult);
        }
        if (hasImageURL) {
          size += pb::CodedOutputStream.ComputeStringSize(41, ImageURL);
        }
        if (hasThumbImageURL) {
          size += pb::CodedOutputStream.ComputeStringSize(42, ThumbImageURL);
        }
        if (hasDataUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(51, DataUrl);
        }
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeInt32Size(52, Duration);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMessage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMessage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMessage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMessage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMessage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMessage MakeReadOnly() {
      drawData_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMessage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMessage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMessage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMessage result;
      
      private PBMessage PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMessage original = result;
          result = new PBMessage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMessage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBMessage.Descriptor; }
      }
      
      public override PBMessage DefaultInstanceForType {
        get { return global::hdsense.PBMessage.DefaultInstance; }
      }
      
      public override PBMessage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMessage) {
          return MergeFrom((PBMessage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMessage other) {
        if (other == global::hdsense.PBMessage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasFrom) {
          From = other.From;
        }
        if (other.HasTo) {
          To = other.To;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasIsGroup) {
          IsGroup = other.IsGroup;
        }
        if (other.HasFromUser) {
          MergeFromUser(other.FromUser);
        }
        if (other.HasToUser) {
          MergeToUser(other.ToUser);
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.drawData_.Count != 0) {
          result.drawData_.Add(other.drawData_);
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasDrawDataVersion) {
          DrawDataVersion = other.DrawDataVersion;
        }
        if (other.HasCanvasSize) {
          MergeCanvasSize(other.CanvasSize);
        }
        if (other.HasStartDate) {
          StartDate = other.StartDate;
        }
        if (other.HasEndDate) {
          EndDate = other.EndDate;
        }
        if (other.HasLocation) {
          Location = other.Location;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasReqMessageId) {
          ReqMessageId = other.ReqMessageId;
        }
        if (other.HasReplyResult) {
          ReplyResult = other.ReplyResult;
        }
        if (other.HasImageURL) {
          ImageURL = other.ImageURL;
        }
        if (other.HasThumbImageURL) {
          ThumbImageURL = other.ThumbImageURL;
        }
        if (other.HasDataUrl) {
          DataUrl = other.DataUrl;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMessageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasMessageId = input.ReadString(ref result.messageId_);
              break;
            }
            case 18: {
              result.hasFrom = input.ReadString(ref result.from_);
              break;
            }
            case 26: {
              result.hasTo = input.ReadString(ref result.to_);
              break;
            }
            case 32: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 40: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 48: {
              result.hasIsGroup = input.ReadBool(ref result.isGroup_);
              break;
            }
            case 58: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasFromUser) {
                subBuilder.MergeFrom(FromUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FromUser = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasToUser) {
                subBuilder.MergeFrom(ToUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToUser = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 170: {
              input.ReadMessageArray(tag, field_name, result.drawData_, global::hdsense.PBDrawAction.DefaultInstance, extensionRegistry);
              break;
            }
            case 176: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 184: {
              result.hasDrawDataVersion = input.ReadInt32(ref result.drawDataVersion_);
              break;
            }
            case 194: {
              global::hdsense.PBSize.Builder subBuilder = global::hdsense.PBSize.CreateBuilder();
              if (result.hasCanvasSize) {
                subBuilder.MergeFrom(CanvasSize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CanvasSize = subBuilder.BuildPartial();
              break;
            }
            case 200: {
              result.hasStartDate = input.ReadInt32(ref result.startDate_);
              break;
            }
            case 208: {
              result.hasEndDate = input.ReadInt32(ref result.endDate_);
              break;
            }
            case 242: {
              result.hasLocation = input.ReadString(ref result.location_);
              break;
            }
            case 249: {
              result.hasLongitude = input.ReadDouble(ref result.longitude_);
              break;
            }
            case 257: {
              result.hasLatitude = input.ReadDouble(ref result.latitude_);
              break;
            }
            case 266: {
              result.hasReqMessageId = input.ReadString(ref result.reqMessageId_);
              break;
            }
            case 272: {
              result.hasReplyResult = input.ReadInt32(ref result.replyResult_);
              break;
            }
            case 330: {
              result.hasImageURL = input.ReadString(ref result.imageURL_);
              break;
            }
            case 338: {
              result.hasThumbImageURL = input.ReadString(ref result.thumbImageURL_);
              break;
            }
            case 410: {
              result.hasDataUrl = input.ReadString(ref result.dataUrl_);
              break;
            }
            case 416: {
              result.hasDuration = input.ReadInt32(ref result.duration_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public string MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = "";
        return this;
      }
      
      public bool HasFrom {
        get { return result.hasFrom; }
      }
      public string From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = "";
        return this;
      }
      
      public bool HasTo {
        get { return result.hasTo; }
      }
      public string To {
        get { return result.To; }
        set { SetTo(value); }
      }
      public Builder SetTo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTo = true;
        result.to_ = value;
        return this;
      }
      public Builder ClearTo() {
        PrepareBuilder();
        result.hasTo = false;
        result.to_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasIsGroup {
        get { return result.hasIsGroup; }
      }
      public bool IsGroup {
        get { return result.IsGroup; }
        set { SetIsGroup(value); }
      }
      public Builder SetIsGroup(bool value) {
        PrepareBuilder();
        result.hasIsGroup = true;
        result.isGroup_ = value;
        return this;
      }
      public Builder ClearIsGroup() {
        PrepareBuilder();
        result.hasIsGroup = false;
        result.isGroup_ = false;
        return this;
      }
      
      public bool HasFromUser {
       get { return result.hasFromUser; }
      }
      public global::hdsense.PBGameUser FromUser {
        get { return result.FromUser; }
        set { SetFromUser(value); }
      }
      public Builder SetFromUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromUser = true;
        result.fromUser_ = value;
        return this;
      }
      public Builder SetFromUser(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFromUser = true;
        result.fromUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFromUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFromUser &&
            result.fromUser_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.fromUser_ = global::hdsense.PBGameUser.CreateBuilder(result.fromUser_).MergeFrom(value).BuildPartial();
        } else {
          result.fromUser_ = value;
        }
        result.hasFromUser = true;
        return this;
      }
      public Builder ClearFromUser() {
        PrepareBuilder();
        result.hasFromUser = false;
        result.fromUser_ = null;
        return this;
      }
      
      public bool HasToUser {
       get { return result.hasToUser; }
      }
      public global::hdsense.PBGameUser ToUser {
        get { return result.ToUser; }
        set { SetToUser(value); }
      }
      public Builder SetToUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToUser = true;
        result.toUser_ = value;
        return this;
      }
      public Builder SetToUser(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToUser = true;
        result.toUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToUser &&
            result.toUser_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.toUser_ = global::hdsense.PBGameUser.CreateBuilder(result.toUser_).MergeFrom(value).BuildPartial();
        } else {
          result.toUser_ = value;
        }
        result.hasToUser = true;
        return this;
      }
      public Builder ClearToUser() {
        PrepareBuilder();
        result.hasToUser = false;
        result.toUser_ = null;
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBDrawAction> DrawDataList {
        get { return PrepareBuilder().drawData_; }
      }
      public int DrawDataCount {
        get { return result.DrawDataCount; }
      }
      public global::hdsense.PBDrawAction GetDrawData(int index) {
        return result.GetDrawData(index);
      }
      public Builder SetDrawData(int index, global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_[index] = value;
        return this;
      }
      public Builder SetDrawData(int index, global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_.Add(value);
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawData(scg::IEnumerable<global::hdsense.PBDrawAction> values) {
        PrepareBuilder();
        result.drawData_.Add(values);
        return this;
      }
      public Builder ClearDrawData() {
        PrepareBuilder();
        result.drawData_.Clear();
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasDrawDataVersion {
        get { return result.hasDrawDataVersion; }
      }
      public int DrawDataVersion {
        get { return result.DrawDataVersion; }
        set { SetDrawDataVersion(value); }
      }
      public Builder SetDrawDataVersion(int value) {
        PrepareBuilder();
        result.hasDrawDataVersion = true;
        result.drawDataVersion_ = value;
        return this;
      }
      public Builder ClearDrawDataVersion() {
        PrepareBuilder();
        result.hasDrawDataVersion = false;
        result.drawDataVersion_ = 0;
        return this;
      }
      
      public bool HasCanvasSize {
       get { return result.hasCanvasSize; }
      }
      public global::hdsense.PBSize CanvasSize {
        get { return result.CanvasSize; }
        set { SetCanvasSize(value); }
      }
      public Builder SetCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = value;
        return this;
      }
      public Builder SetCanvasSize(global::hdsense.PBSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCanvasSize &&
            result.canvasSize_ != global::hdsense.PBSize.DefaultInstance) {
            result.canvasSize_ = global::hdsense.PBSize.CreateBuilder(result.canvasSize_).MergeFrom(value).BuildPartial();
        } else {
          result.canvasSize_ = value;
        }
        result.hasCanvasSize = true;
        return this;
      }
      public Builder ClearCanvasSize() {
        PrepareBuilder();
        result.hasCanvasSize = false;
        result.canvasSize_ = null;
        return this;
      }
      
      public bool HasStartDate {
        get { return result.hasStartDate; }
      }
      public int StartDate {
        get { return result.StartDate; }
        set { SetStartDate(value); }
      }
      public Builder SetStartDate(int value) {
        PrepareBuilder();
        result.hasStartDate = true;
        result.startDate_ = value;
        return this;
      }
      public Builder ClearStartDate() {
        PrepareBuilder();
        result.hasStartDate = false;
        result.startDate_ = 0;
        return this;
      }
      
      public bool HasEndDate {
        get { return result.hasEndDate; }
      }
      public int EndDate {
        get { return result.EndDate; }
        set { SetEndDate(value); }
      }
      public Builder SetEndDate(int value) {
        PrepareBuilder();
        result.hasEndDate = true;
        result.endDate_ = value;
        return this;
      }
      public Builder ClearEndDate() {
        PrepareBuilder();
        result.hasEndDate = false;
        result.endDate_ = 0;
        return this;
      }
      
      public bool HasLocation {
        get { return result.hasLocation; }
      }
      public string Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = "";
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public double Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(double value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public double Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(double value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      public bool HasReqMessageId {
        get { return result.hasReqMessageId; }
      }
      public string ReqMessageId {
        get { return result.ReqMessageId; }
        set { SetReqMessageId(value); }
      }
      public Builder SetReqMessageId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReqMessageId = true;
        result.reqMessageId_ = value;
        return this;
      }
      public Builder ClearReqMessageId() {
        PrepareBuilder();
        result.hasReqMessageId = false;
        result.reqMessageId_ = "";
        return this;
      }
      
      public bool HasReplyResult {
        get { return result.hasReplyResult; }
      }
      public int ReplyResult {
        get { return result.ReplyResult; }
        set { SetReplyResult(value); }
      }
      public Builder SetReplyResult(int value) {
        PrepareBuilder();
        result.hasReplyResult = true;
        result.replyResult_ = value;
        return this;
      }
      public Builder ClearReplyResult() {
        PrepareBuilder();
        result.hasReplyResult = false;
        result.replyResult_ = 0;
        return this;
      }
      
      public bool HasImageURL {
        get { return result.hasImageURL; }
      }
      public string ImageURL {
        get { return result.ImageURL; }
        set { SetImageURL(value); }
      }
      public Builder SetImageURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageURL = true;
        result.imageURL_ = value;
        return this;
      }
      public Builder ClearImageURL() {
        PrepareBuilder();
        result.hasImageURL = false;
        result.imageURL_ = "";
        return this;
      }
      
      public bool HasThumbImageURL {
        get { return result.hasThumbImageURL; }
      }
      public string ThumbImageURL {
        get { return result.ThumbImageURL; }
        set { SetThumbImageURL(value); }
      }
      public Builder SetThumbImageURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThumbImageURL = true;
        result.thumbImageURL_ = value;
        return this;
      }
      public Builder ClearThumbImageURL() {
        PrepareBuilder();
        result.hasThumbImageURL = false;
        result.thumbImageURL_ = "";
        return this;
      }
      
      public bool HasDataUrl {
        get { return result.hasDataUrl; }
      }
      public string DataUrl {
        get { return result.DataUrl; }
        set { SetDataUrl(value); }
      }
      public Builder SetDataUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDataUrl = true;
        result.dataUrl_ = value;
        return this;
      }
      public Builder ClearDataUrl() {
        PrepareBuilder();
        result.hasDataUrl = false;
        result.dataUrl_ = "";
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public int Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(int value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0;
        return this;
      }
    }
    static PBMessage() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBMessageStat : pb::GeneratedMessage<PBMessageStat, PBMessageStat.Builder> {
    private PBMessageStat() { }
    private static readonly PBMessageStat defaultInstance = new PBMessageStat().MakeReadOnly();
    private static readonly string[] _pBMessageStatFieldNames = new string[] { "createDate", "drawData", "friendAvatar", "friendGender", "friendNickName", "friendUserId", "from", "isGroup", "isVip", "messageId", "modifiedDate", "newGroupMessageCount", "newMessageCount", "statRoleType", "text", "to", "totalMessageCount", "type", "userId" };
    private static readonly uint[] _pBMessageStatFieldTags = new uint[] { 120, 114, 34, 40, 26, 18, 90, 48, 56, 82, 248, 272, 264, 64, 106, 98, 256, 128, 10 };
    public static PBMessageStat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBMessageStat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBMessageStat ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBMessageStat__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBMessageStat, PBMessageStat.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBMessageStat__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int FriendUserIdFieldNumber = 2;
    private bool hasFriendUserId;
    private string friendUserId_ = "";
    public bool HasFriendUserId {
      get { return hasFriendUserId; }
    }
    public string FriendUserId {
      get { return friendUserId_; }
    }
    
    public const int FriendNickNameFieldNumber = 3;
    private bool hasFriendNickName;
    private string friendNickName_ = "";
    public bool HasFriendNickName {
      get { return hasFriendNickName; }
    }
    public string FriendNickName {
      get { return friendNickName_; }
    }
    
    public const int FriendAvatarFieldNumber = 4;
    private bool hasFriendAvatar;
    private string friendAvatar_ = "";
    public bool HasFriendAvatar {
      get { return hasFriendAvatar; }
    }
    public string FriendAvatar {
      get { return friendAvatar_; }
    }
    
    public const int FriendGenderFieldNumber = 5;
    private bool hasFriendGender;
    private bool friendGender_;
    public bool HasFriendGender {
      get { return hasFriendGender; }
    }
    public bool FriendGender {
      get { return friendGender_; }
    }
    
    public const int IsGroupFieldNumber = 6;
    private bool hasIsGroup;
    private bool isGroup_;
    public bool HasIsGroup {
      get { return hasIsGroup; }
    }
    public bool IsGroup {
      get { return isGroup_; }
    }
    
    public const int IsVipFieldNumber = 7;
    private bool hasIsVip;
    private int isVip_;
    public bool HasIsVip {
      get { return hasIsVip; }
    }
    public int IsVip {
      get { return isVip_; }
    }
    
    public const int StatRoleTypeFieldNumber = 8;
    private bool hasStatRoleType;
    private global::hdsense.PBMessageStatRoleType statRoleType_ = global::hdsense.PBMessageStatRoleType.USER_SESSION;
    public bool HasStatRoleType {
      get { return hasStatRoleType; }
    }
    public global::hdsense.PBMessageStatRoleType StatRoleType {
      get { return statRoleType_; }
    }
    
    public const int MessageIdFieldNumber = 10;
    private bool hasMessageId;
    private string messageId_ = "";
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public string MessageId {
      get { return messageId_; }
    }
    
    public const int FromFieldNumber = 11;
    private bool hasFrom;
    private string from_ = "";
    public bool HasFrom {
      get { return hasFrom; }
    }
    public string From {
      get { return from_; }
    }
    
    public const int ToFieldNumber = 12;
    private bool hasTo;
    private string to_ = "";
    public bool HasTo {
      get { return hasTo; }
    }
    public string To {
      get { return to_; }
    }
    
    public const int TextFieldNumber = 13;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int DrawDataFieldNumber = 14;
    private pbc::PopsicleList<global::hdsense.PBDrawAction> drawData_ = new pbc::PopsicleList<global::hdsense.PBDrawAction>();
    public scg::IList<global::hdsense.PBDrawAction> DrawDataList {
      get { return drawData_; }
    }
    public int DrawDataCount {
      get { return drawData_.Count; }
    }
    public global::hdsense.PBDrawAction GetDrawData(int index) {
      return drawData_[index];
    }
    
    public const int CreateDateFieldNumber = 15;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int TypeFieldNumber = 16;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int ModifiedDateFieldNumber = 31;
    private bool hasModifiedDate;
    private int modifiedDate_;
    public bool HasModifiedDate {
      get { return hasModifiedDate; }
    }
    public int ModifiedDate {
      get { return modifiedDate_; }
    }
    
    public const int TotalMessageCountFieldNumber = 32;
    private bool hasTotalMessageCount;
    private int totalMessageCount_;
    public bool HasTotalMessageCount {
      get { return hasTotalMessageCount; }
    }
    public int TotalMessageCount {
      get { return totalMessageCount_; }
    }
    
    public const int NewMessageCountFieldNumber = 33;
    private bool hasNewMessageCount;
    private int newMessageCount_;
    public bool HasNewMessageCount {
      get { return hasNewMessageCount; }
    }
    public int NewMessageCount {
      get { return newMessageCount_; }
    }
    
    public const int NewGroupMessageCountFieldNumber = 34;
    private bool hasNewGroupMessageCount;
    private int newGroupMessageCount_;
    public bool HasNewGroupMessageCount {
      get { return hasNewGroupMessageCount; }
    }
    public int NewGroupMessageCount {
      get { return newGroupMessageCount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        if (!hasFriendUserId) return false;
        if (!hasFriendNickName) return false;
        if (!hasFrom) return false;
        if (!hasTo) return false;
        foreach (global::hdsense.PBDrawAction element in DrawDataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBMessageStatFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[18], UserId);
      }
      if (hasFriendUserId) {
        output.WriteString(2, field_names[5], FriendUserId);
      }
      if (hasFriendNickName) {
        output.WriteString(3, field_names[4], FriendNickName);
      }
      if (hasFriendAvatar) {
        output.WriteString(4, field_names[2], FriendAvatar);
      }
      if (hasFriendGender) {
        output.WriteBool(5, field_names[3], FriendGender);
      }
      if (hasIsGroup) {
        output.WriteBool(6, field_names[7], IsGroup);
      }
      if (hasIsVip) {
        output.WriteInt32(7, field_names[8], IsVip);
      }
      if (hasStatRoleType) {
        output.WriteEnum(8, field_names[13], (int) StatRoleType, StatRoleType);
      }
      if (hasMessageId) {
        output.WriteString(10, field_names[9], MessageId);
      }
      if (hasFrom) {
        output.WriteString(11, field_names[6], From);
      }
      if (hasTo) {
        output.WriteString(12, field_names[15], To);
      }
      if (hasText) {
        output.WriteString(13, field_names[14], Text);
      }
      if (drawData_.Count > 0) {
        output.WriteMessageArray(14, field_names[1], drawData_);
      }
      if (hasCreateDate) {
        output.WriteInt32(15, field_names[0], CreateDate);
      }
      if (hasType) {
        output.WriteInt32(16, field_names[17], Type);
      }
      if (hasModifiedDate) {
        output.WriteInt32(31, field_names[10], ModifiedDate);
      }
      if (hasTotalMessageCount) {
        output.WriteInt32(32, field_names[16], TotalMessageCount);
      }
      if (hasNewMessageCount) {
        output.WriteInt32(33, field_names[12], NewMessageCount);
      }
      if (hasNewGroupMessageCount) {
        output.WriteInt32(34, field_names[11], NewGroupMessageCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        if (hasFriendUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FriendUserId);
        }
        if (hasFriendNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FriendNickName);
        }
        if (hasFriendAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(4, FriendAvatar);
        }
        if (hasFriendGender) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, FriendGender);
        }
        if (hasIsGroup) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsGroup);
        }
        if (hasIsVip) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, IsVip);
        }
        if (hasStatRoleType) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) StatRoleType);
        }
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeStringSize(10, MessageId);
        }
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeStringSize(11, From);
        }
        if (hasTo) {
          size += pb::CodedOutputStream.ComputeStringSize(12, To);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(13, Text);
        }
        foreach (global::hdsense.PBDrawAction element in DrawDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, element);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, CreateDate);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, Type);
        }
        if (hasModifiedDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(31, ModifiedDate);
        }
        if (hasTotalMessageCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(32, TotalMessageCount);
        }
        if (hasNewMessageCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(33, NewMessageCount);
        }
        if (hasNewGroupMessageCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(34, NewGroupMessageCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBMessageStat ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMessageStat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMessageStat ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBMessageStat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBMessageStat ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMessageStat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBMessageStat ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBMessageStat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBMessageStat ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBMessageStat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBMessageStat MakeReadOnly() {
      drawData_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBMessageStat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBMessageStat, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBMessageStat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBMessageStat result;
      
      private PBMessageStat PrepareBuilder() {
        if (resultIsReadOnly) {
          PBMessageStat original = result;
          result = new PBMessageStat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBMessageStat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBMessageStat.Descriptor; }
      }
      
      public override PBMessageStat DefaultInstanceForType {
        get { return global::hdsense.PBMessageStat.DefaultInstance; }
      }
      
      public override PBMessageStat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBMessageStat) {
          return MergeFrom((PBMessageStat) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBMessageStat other) {
        if (other == global::hdsense.PBMessageStat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasFriendUserId) {
          FriendUserId = other.FriendUserId;
        }
        if (other.HasFriendNickName) {
          FriendNickName = other.FriendNickName;
        }
        if (other.HasFriendAvatar) {
          FriendAvatar = other.FriendAvatar;
        }
        if (other.HasFriendGender) {
          FriendGender = other.FriendGender;
        }
        if (other.HasIsGroup) {
          IsGroup = other.IsGroup;
        }
        if (other.HasIsVip) {
          IsVip = other.IsVip;
        }
        if (other.HasStatRoleType) {
          StatRoleType = other.StatRoleType;
        }
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasFrom) {
          From = other.From;
        }
        if (other.HasTo) {
          To = other.To;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.drawData_.Count != 0) {
          result.drawData_.Add(other.drawData_);
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasModifiedDate) {
          ModifiedDate = other.ModifiedDate;
        }
        if (other.HasTotalMessageCount) {
          TotalMessageCount = other.TotalMessageCount;
        }
        if (other.HasNewMessageCount) {
          NewMessageCount = other.NewMessageCount;
        }
        if (other.HasNewGroupMessageCount) {
          NewGroupMessageCount = other.NewGroupMessageCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBMessageStatFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBMessageStatFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasFriendUserId = input.ReadString(ref result.friendUserId_);
              break;
            }
            case 26: {
              result.hasFriendNickName = input.ReadString(ref result.friendNickName_);
              break;
            }
            case 34: {
              result.hasFriendAvatar = input.ReadString(ref result.friendAvatar_);
              break;
            }
            case 40: {
              result.hasFriendGender = input.ReadBool(ref result.friendGender_);
              break;
            }
            case 48: {
              result.hasIsGroup = input.ReadBool(ref result.isGroup_);
              break;
            }
            case 56: {
              result.hasIsVip = input.ReadInt32(ref result.isVip_);
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.statRoleType_, out unknown)) {
                result.hasStatRoleType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 82: {
              result.hasMessageId = input.ReadString(ref result.messageId_);
              break;
            }
            case 90: {
              result.hasFrom = input.ReadString(ref result.from_);
              break;
            }
            case 98: {
              result.hasTo = input.ReadString(ref result.to_);
              break;
            }
            case 106: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.drawData_, global::hdsense.PBDrawAction.DefaultInstance, extensionRegistry);
              break;
            }
            case 120: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 128: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 248: {
              result.hasModifiedDate = input.ReadInt32(ref result.modifiedDate_);
              break;
            }
            case 256: {
              result.hasTotalMessageCount = input.ReadInt32(ref result.totalMessageCount_);
              break;
            }
            case 264: {
              result.hasNewMessageCount = input.ReadInt32(ref result.newMessageCount_);
              break;
            }
            case 272: {
              result.hasNewGroupMessageCount = input.ReadInt32(ref result.newGroupMessageCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasFriendUserId {
        get { return result.hasFriendUserId; }
      }
      public string FriendUserId {
        get { return result.FriendUserId; }
        set { SetFriendUserId(value); }
      }
      public Builder SetFriendUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendUserId = true;
        result.friendUserId_ = value;
        return this;
      }
      public Builder ClearFriendUserId() {
        PrepareBuilder();
        result.hasFriendUserId = false;
        result.friendUserId_ = "";
        return this;
      }
      
      public bool HasFriendNickName {
        get { return result.hasFriendNickName; }
      }
      public string FriendNickName {
        get { return result.FriendNickName; }
        set { SetFriendNickName(value); }
      }
      public Builder SetFriendNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendNickName = true;
        result.friendNickName_ = value;
        return this;
      }
      public Builder ClearFriendNickName() {
        PrepareBuilder();
        result.hasFriendNickName = false;
        result.friendNickName_ = "";
        return this;
      }
      
      public bool HasFriendAvatar {
        get { return result.hasFriendAvatar; }
      }
      public string FriendAvatar {
        get { return result.FriendAvatar; }
        set { SetFriendAvatar(value); }
      }
      public Builder SetFriendAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendAvatar = true;
        result.friendAvatar_ = value;
        return this;
      }
      public Builder ClearFriendAvatar() {
        PrepareBuilder();
        result.hasFriendAvatar = false;
        result.friendAvatar_ = "";
        return this;
      }
      
      public bool HasFriendGender {
        get { return result.hasFriendGender; }
      }
      public bool FriendGender {
        get { return result.FriendGender; }
        set { SetFriendGender(value); }
      }
      public Builder SetFriendGender(bool value) {
        PrepareBuilder();
        result.hasFriendGender = true;
        result.friendGender_ = value;
        return this;
      }
      public Builder ClearFriendGender() {
        PrepareBuilder();
        result.hasFriendGender = false;
        result.friendGender_ = false;
        return this;
      }
      
      public bool HasIsGroup {
        get { return result.hasIsGroup; }
      }
      public bool IsGroup {
        get { return result.IsGroup; }
        set { SetIsGroup(value); }
      }
      public Builder SetIsGroup(bool value) {
        PrepareBuilder();
        result.hasIsGroup = true;
        result.isGroup_ = value;
        return this;
      }
      public Builder ClearIsGroup() {
        PrepareBuilder();
        result.hasIsGroup = false;
        result.isGroup_ = false;
        return this;
      }
      
      public bool HasIsVip {
        get { return result.hasIsVip; }
      }
      public int IsVip {
        get { return result.IsVip; }
        set { SetIsVip(value); }
      }
      public Builder SetIsVip(int value) {
        PrepareBuilder();
        result.hasIsVip = true;
        result.isVip_ = value;
        return this;
      }
      public Builder ClearIsVip() {
        PrepareBuilder();
        result.hasIsVip = false;
        result.isVip_ = 0;
        return this;
      }
      
      public bool HasStatRoleType {
       get { return result.hasStatRoleType; }
      }
      public global::hdsense.PBMessageStatRoleType StatRoleType {
        get { return result.StatRoleType; }
        set { SetStatRoleType(value); }
      }
      public Builder SetStatRoleType(global::hdsense.PBMessageStatRoleType value) {
        PrepareBuilder();
        result.hasStatRoleType = true;
        result.statRoleType_ = value;
        return this;
      }
      public Builder ClearStatRoleType() {
        PrepareBuilder();
        result.hasStatRoleType = false;
        result.statRoleType_ = global::hdsense.PBMessageStatRoleType.USER_SESSION;
        return this;
      }
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public string MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = "";
        return this;
      }
      
      public bool HasFrom {
        get { return result.hasFrom; }
      }
      public string From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = "";
        return this;
      }
      
      public bool HasTo {
        get { return result.hasTo; }
      }
      public string To {
        get { return result.To; }
        set { SetTo(value); }
      }
      public Builder SetTo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTo = true;
        result.to_ = value;
        return this;
      }
      public Builder ClearTo() {
        PrepareBuilder();
        result.hasTo = false;
        result.to_ = "";
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBDrawAction> DrawDataList {
        get { return PrepareBuilder().drawData_; }
      }
      public int DrawDataCount {
        get { return result.DrawDataCount; }
      }
      public global::hdsense.PBDrawAction GetDrawData(int index) {
        return result.GetDrawData(index);
      }
      public Builder SetDrawData(int index, global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_[index] = value;
        return this;
      }
      public Builder SetDrawData(int index, global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawData_.Add(value);
        return this;
      }
      public Builder AddDrawData(global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawData(scg::IEnumerable<global::hdsense.PBDrawAction> values) {
        PrepareBuilder();
        result.drawData_.Add(values);
        return this;
      }
      public Builder ClearDrawData() {
        PrepareBuilder();
        result.drawData_.Clear();
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasModifiedDate {
        get { return result.hasModifiedDate; }
      }
      public int ModifiedDate {
        get { return result.ModifiedDate; }
        set { SetModifiedDate(value); }
      }
      public Builder SetModifiedDate(int value) {
        PrepareBuilder();
        result.hasModifiedDate = true;
        result.modifiedDate_ = value;
        return this;
      }
      public Builder ClearModifiedDate() {
        PrepareBuilder();
        result.hasModifiedDate = false;
        result.modifiedDate_ = 0;
        return this;
      }
      
      public bool HasTotalMessageCount {
        get { return result.hasTotalMessageCount; }
      }
      public int TotalMessageCount {
        get { return result.TotalMessageCount; }
        set { SetTotalMessageCount(value); }
      }
      public Builder SetTotalMessageCount(int value) {
        PrepareBuilder();
        result.hasTotalMessageCount = true;
        result.totalMessageCount_ = value;
        return this;
      }
      public Builder ClearTotalMessageCount() {
        PrepareBuilder();
        result.hasTotalMessageCount = false;
        result.totalMessageCount_ = 0;
        return this;
      }
      
      public bool HasNewMessageCount {
        get { return result.hasNewMessageCount; }
      }
      public int NewMessageCount {
        get { return result.NewMessageCount; }
        set { SetNewMessageCount(value); }
      }
      public Builder SetNewMessageCount(int value) {
        PrepareBuilder();
        result.hasNewMessageCount = true;
        result.newMessageCount_ = value;
        return this;
      }
      public Builder ClearNewMessageCount() {
        PrepareBuilder();
        result.hasNewMessageCount = false;
        result.newMessageCount_ = 0;
        return this;
      }
      
      public bool HasNewGroupMessageCount {
        get { return result.hasNewGroupMessageCount; }
      }
      public int NewGroupMessageCount {
        get { return result.NewGroupMessageCount; }
        set { SetNewGroupMessageCount(value); }
      }
      public Builder SetNewGroupMessageCount(int value) {
        PrepareBuilder();
        result.hasNewGroupMessageCount = true;
        result.newGroupMessageCount_ = value;
        return this;
      }
      public Builder ClearNewGroupMessageCount() {
        PrepareBuilder();
        result.hasNewGroupMessageCount = false;
        result.newGroupMessageCount_ = 0;
        return this;
      }
    }
    static PBMessageStat() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserBasicInfo : pb::GeneratedMessage<PBUserBasicInfo, PBUserBasicInfo.Builder> {
    private PBUserBasicInfo() { }
    private static readonly PBUserBasicInfo defaultInstance = new PBUserBasicInfo().MakeReadOnly();
    private static readonly string[] _pBUserBasicInfoFieldNames = new string[] { "avatar", "gender", "nickName", "userId" };
    private static readonly uint[] _pBUserBasicInfoFieldTags = new uint[] { 26, 34, 18, 10 };
    public static PBUserBasicInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserBasicInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserBasicInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserBasicInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserBasicInfo, PBUserBasicInfo.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserBasicInfo__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int NickNameFieldNumber = 2;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int AvatarFieldNumber = 3;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int GenderFieldNumber = 4;
    private bool hasGender;
    private string gender_ = "";
    public bool HasGender {
      get { return hasGender; }
    }
    public string Gender {
      get { return gender_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        if (!hasNickName) return false;
        if (!hasAvatar) return false;
        if (!hasGender) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserBasicInfoFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[3], UserId);
      }
      if (hasNickName) {
        output.WriteString(2, field_names[2], NickName);
      }
      if (hasAvatar) {
        output.WriteString(3, field_names[0], Avatar);
      }
      if (hasGender) {
        output.WriteString(4, field_names[1], Gender);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NickName);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Avatar);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Gender);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserBasicInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserBasicInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserBasicInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserBasicInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserBasicInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserBasicInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserBasicInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserBasicInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserBasicInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserBasicInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserBasicInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserBasicInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserBasicInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserBasicInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserBasicInfo result;
      
      private PBUserBasicInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserBasicInfo original = result;
          result = new PBUserBasicInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserBasicInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBUserBasicInfo.Descriptor; }
      }
      
      public override PBUserBasicInfo DefaultInstanceForType {
        get { return global::hdsense.PBUserBasicInfo.DefaultInstance; }
      }
      
      public override PBUserBasicInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserBasicInfo) {
          return MergeFrom((PBUserBasicInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserBasicInfo other) {
        if (other == global::hdsense.PBUserBasicInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserBasicInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserBasicInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 26: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 34: {
              result.hasGender = input.ReadString(ref result.gender_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public string Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = "";
        return this;
      }
    }
    static PBUserBasicInfo() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBItemPriceInfo : pb::GeneratedMessage<PBItemPriceInfo, PBItemPriceInfo.Builder> {
    private PBItemPriceInfo() { }
    private static readonly PBItemPriceInfo defaultInstance = new PBItemPriceInfo().MakeReadOnly();
    private static readonly string[] _pBItemPriceInfoFieldNames = new string[] { "currency", "price" };
    private static readonly uint[] _pBItemPriceInfoFieldTags = new uint[] { 16, 8 };
    public static PBItemPriceInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBItemPriceInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBItemPriceInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBItemPriceInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBItemPriceInfo, PBItemPriceInfo.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBItemPriceInfo__FieldAccessorTable; }
    }
    
    public const int PriceFieldNumber = 1;
    private bool hasPrice;
    private int price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public int Price {
      get { return price_; }
    }
    
    public const int CurrencyFieldNumber = 2;
    private bool hasCurrency;
    private global::hdsense.PBGameCurrency currency_ = global::hdsense.PBGameCurrency.Coin;
    public bool HasCurrency {
      get { return hasCurrency; }
    }
    public global::hdsense.PBGameCurrency Currency {
      get { return currency_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBItemPriceInfoFieldNames;
      if (hasPrice) {
        output.WriteInt32(1, field_names[1], Price);
      }
      if (hasCurrency) {
        output.WriteEnum(2, field_names[0], (int) Currency, Currency);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Price);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Currency);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBItemPriceInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBItemPriceInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBItemPriceInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBItemPriceInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBItemPriceInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBItemPriceInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBItemPriceInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBItemPriceInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBItemPriceInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBItemPriceInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBItemPriceInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBItemPriceInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBItemPriceInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBItemPriceInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBItemPriceInfo result;
      
      private PBItemPriceInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBItemPriceInfo original = result;
          result = new PBItemPriceInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBItemPriceInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBItemPriceInfo.Descriptor; }
      }
      
      public override PBItemPriceInfo DefaultInstanceForType {
        get { return global::hdsense.PBItemPriceInfo.DefaultInstance; }
      }
      
      public override PBItemPriceInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBItemPriceInfo) {
          return MergeFrom((PBItemPriceInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBItemPriceInfo other) {
        if (other == global::hdsense.PBItemPriceInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasCurrency) {
          Currency = other.Currency;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBItemPriceInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBItemPriceInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrice = input.ReadInt32(ref result.price_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.currency_, out unknown)) {
                result.hasCurrency = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0;
        return this;
      }
      
      public bool HasCurrency {
       get { return result.hasCurrency; }
      }
      public global::hdsense.PBGameCurrency Currency {
        get { return result.Currency; }
        set { SetCurrency(value); }
      }
      public Builder SetCurrency(global::hdsense.PBGameCurrency value) {
        PrepareBuilder();
        result.hasCurrency = true;
        result.currency_ = value;
        return this;
      }
      public Builder ClearCurrency() {
        PrepareBuilder();
        result.hasCurrency = false;
        result.currency_ = global::hdsense.PBGameCurrency.Coin;
        return this;
      }
    }
    static PBItemPriceInfo() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBPromotionInfo : pb::GeneratedMessage<PBPromotionInfo, PBPromotionInfo.Builder> {
    private PBPromotionInfo() { }
    private static readonly PBPromotionInfo defaultInstance = new PBPromotionInfo().MakeReadOnly();
    private static readonly string[] _pBPromotionInfoFieldNames = new string[] { "expireDate", "price", "startDate" };
    private static readonly uint[] _pBPromotionInfoFieldTags = new uint[] { 24, 8, 16 };
    public static PBPromotionInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBPromotionInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBPromotionInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBPromotionInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBPromotionInfo, PBPromotionInfo.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBPromotionInfo__FieldAccessorTable; }
    }
    
    public const int PriceFieldNumber = 1;
    private bool hasPrice;
    private int price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public int Price {
      get { return price_; }
    }
    
    public const int StartDateFieldNumber = 2;
    private bool hasStartDate;
    private int startDate_;
    public bool HasStartDate {
      get { return hasStartDate; }
    }
    public int StartDate {
      get { return startDate_; }
    }
    
    public const int ExpireDateFieldNumber = 3;
    private bool hasExpireDate;
    private int expireDate_;
    public bool HasExpireDate {
      get { return hasExpireDate; }
    }
    public int ExpireDate {
      get { return expireDate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBPromotionInfoFieldNames;
      if (hasPrice) {
        output.WriteInt32(1, field_names[1], Price);
      }
      if (hasStartDate) {
        output.WriteInt32(2, field_names[2], StartDate);
      }
      if (hasExpireDate) {
        output.WriteInt32(3, field_names[0], ExpireDate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Price);
        }
        if (hasStartDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, StartDate);
        }
        if (hasExpireDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ExpireDate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBPromotionInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPromotionInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPromotionInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBPromotionInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBPromotionInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPromotionInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBPromotionInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBPromotionInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBPromotionInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBPromotionInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBPromotionInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBPromotionInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBPromotionInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBPromotionInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBPromotionInfo result;
      
      private PBPromotionInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          PBPromotionInfo original = result;
          result = new PBPromotionInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBPromotionInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBPromotionInfo.Descriptor; }
      }
      
      public override PBPromotionInfo DefaultInstanceForType {
        get { return global::hdsense.PBPromotionInfo.DefaultInstance; }
      }
      
      public override PBPromotionInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBPromotionInfo) {
          return MergeFrom((PBPromotionInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBPromotionInfo other) {
        if (other == global::hdsense.PBPromotionInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasStartDate) {
          StartDate = other.StartDate;
        }
        if (other.HasExpireDate) {
          ExpireDate = other.ExpireDate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBPromotionInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBPromotionInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPrice = input.ReadInt32(ref result.price_);
              break;
            }
            case 16: {
              result.hasStartDate = input.ReadInt32(ref result.startDate_);
              break;
            }
            case 24: {
              result.hasExpireDate = input.ReadInt32(ref result.expireDate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public int Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(int value) {
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = 0;
        return this;
      }
      
      public bool HasStartDate {
        get { return result.hasStartDate; }
      }
      public int StartDate {
        get { return result.StartDate; }
        set { SetStartDate(value); }
      }
      public Builder SetStartDate(int value) {
        PrepareBuilder();
        result.hasStartDate = true;
        result.startDate_ = value;
        return this;
      }
      public Builder ClearStartDate() {
        PrepareBuilder();
        result.hasStartDate = false;
        result.startDate_ = 0;
        return this;
      }
      
      public bool HasExpireDate {
        get { return result.hasExpireDate; }
      }
      public int ExpireDate {
        get { return result.ExpireDate; }
        set { SetExpireDate(value); }
      }
      public Builder SetExpireDate(int value) {
        PrepareBuilder();
        result.hasExpireDate = true;
        result.expireDate_ = value;
        return this;
      }
      public Builder ClearExpireDate() {
        PrepareBuilder();
        result.hasExpireDate = false;
        result.expireDate_ = 0;
        return this;
      }
    }
    static PBPromotionInfo() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGameItem : pb::GeneratedMessage<PBGameItem, PBGameItem.Builder> {
    private PBGameItem() { }
    private static readonly PBGameItem defaultInstance = new PBGameItem().MakeReadOnly();
    private static readonly string[] _pBGameItemFieldNames = new string[] { "appleProductId", "consumeType", "defaultSaleCount", "demoImage", "desc", "image", "itemId", "name", "priceInfo", "promotionInfo", "type", "url", "usageLife", "usageLifeUnit" };
    private static readonly uint[] _pBGameItemFieldTags = new uint[] { 178, 40, 240, 98, 26, 90, 8, 18, 186, 194, 120, 34, 408, 400 };
    public static PBGameItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGameItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGameItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGameItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGameItem, PBGameItem.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGameItem__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescFieldNumber = 3;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int UrlFieldNumber = 4;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int ConsumeTypeFieldNumber = 5;
    private bool hasConsumeType;
    private global::hdsense.PBGameItemConsumeType consumeType_ = global::hdsense.PBGameItemConsumeType.NonConsumable;
    public bool HasConsumeType {
      get { return hasConsumeType; }
    }
    public global::hdsense.PBGameItemConsumeType ConsumeType {
      get { return consumeType_; }
    }
    
    public const int ImageFieldNumber = 11;
    private bool hasImage;
    private string image_ = "";
    public bool HasImage {
      get { return hasImage; }
    }
    public string Image {
      get { return image_; }
    }
    
    public const int DemoImageFieldNumber = 12;
    private bool hasDemoImage;
    private string demoImage_ = "";
    public bool HasDemoImage {
      get { return hasDemoImage; }
    }
    public string DemoImage {
      get { return demoImage_; }
    }
    
    public const int TypeFieldNumber = 15;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int AppleProductIdFieldNumber = 22;
    private bool hasAppleProductId;
    private string appleProductId_ = "";
    public bool HasAppleProductId {
      get { return hasAppleProductId; }
    }
    public string AppleProductId {
      get { return appleProductId_; }
    }
    
    public const int PriceInfoFieldNumber = 23;
    private bool hasPriceInfo;
    private global::hdsense.PBItemPriceInfo priceInfo_;
    public bool HasPriceInfo {
      get { return hasPriceInfo; }
    }
    public global::hdsense.PBItemPriceInfo PriceInfo {
      get { return priceInfo_ ?? global::hdsense.PBItemPriceInfo.DefaultInstance; }
    }
    
    public const int PromotionInfoFieldNumber = 24;
    private bool hasPromotionInfo;
    private global::hdsense.PBPromotionInfo promotionInfo_;
    public bool HasPromotionInfo {
      get { return hasPromotionInfo; }
    }
    public global::hdsense.PBPromotionInfo PromotionInfo {
      get { return promotionInfo_ ?? global::hdsense.PBPromotionInfo.DefaultInstance; }
    }
    
    public const int DefaultSaleCountFieldNumber = 30;
    private bool hasDefaultSaleCount;
    private int defaultSaleCount_;
    public bool HasDefaultSaleCount {
      get { return hasDefaultSaleCount; }
    }
    public int DefaultSaleCount {
      get { return defaultSaleCount_; }
    }
    
    public const int UsageLifeUnitFieldNumber = 50;
    private bool hasUsageLifeUnit;
    private global::hdsense.PBGameTimeUnit usageLifeUnit_ = global::hdsense.PBGameTimeUnit.Hour;
    public bool HasUsageLifeUnit {
      get { return hasUsageLifeUnit; }
    }
    public global::hdsense.PBGameTimeUnit UsageLifeUnit {
      get { return usageLifeUnit_; }
    }
    
    public const int UsageLifeFieldNumber = 51;
    private bool hasUsageLife;
    private int usageLife_;
    public bool HasUsageLife {
      get { return hasUsageLife; }
    }
    public int UsageLife {
      get { return usageLife_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        if (!hasName) return false;
        if (HasPriceInfo) {
          if (!PriceInfo.IsInitialized) return false;
        }
        if (HasPromotionInfo) {
          if (!PromotionInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGameItemFieldNames;
      if (hasItemId) {
        output.WriteInt32(1, field_names[6], ItemId);
      }
      if (hasName) {
        output.WriteString(2, field_names[7], Name);
      }
      if (hasDesc) {
        output.WriteString(3, field_names[4], Desc);
      }
      if (hasUrl) {
        output.WriteString(4, field_names[11], Url);
      }
      if (hasConsumeType) {
        output.WriteEnum(5, field_names[1], (int) ConsumeType, ConsumeType);
      }
      if (hasImage) {
        output.WriteString(11, field_names[5], Image);
      }
      if (hasDemoImage) {
        output.WriteString(12, field_names[3], DemoImage);
      }
      if (hasType) {
        output.WriteInt32(15, field_names[10], Type);
      }
      if (hasAppleProductId) {
        output.WriteString(22, field_names[0], AppleProductId);
      }
      if (hasPriceInfo) {
        output.WriteMessage(23, field_names[8], PriceInfo);
      }
      if (hasPromotionInfo) {
        output.WriteMessage(24, field_names[9], PromotionInfo);
      }
      if (hasDefaultSaleCount) {
        output.WriteInt32(30, field_names[2], DefaultSaleCount);
      }
      if (hasUsageLifeUnit) {
        output.WriteEnum(50, field_names[13], (int) UsageLifeUnit, UsageLifeUnit);
      }
      if (hasUsageLife) {
        output.WriteInt32(51, field_names[12], UsageLife);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Url);
        }
        if (hasConsumeType) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) ConsumeType);
        }
        if (hasImage) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Image);
        }
        if (hasDemoImage) {
          size += pb::CodedOutputStream.ComputeStringSize(12, DemoImage);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, Type);
        }
        if (hasAppleProductId) {
          size += pb::CodedOutputStream.ComputeStringSize(22, AppleProductId);
        }
        if (hasPriceInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, PriceInfo);
        }
        if (hasPromotionInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, PromotionInfo);
        }
        if (hasDefaultSaleCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(30, DefaultSaleCount);
        }
        if (hasUsageLifeUnit) {
          size += pb::CodedOutputStream.ComputeEnumSize(50, (int) UsageLifeUnit);
        }
        if (hasUsageLife) {
          size += pb::CodedOutputStream.ComputeInt32Size(51, UsageLife);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGameItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGameItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGameItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGameItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGameItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGameItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGameItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGameItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGameItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGameItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGameItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGameItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGameItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGameItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGameItem result;
      
      private PBGameItem PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGameItem original = result;
          result = new PBGameItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGameItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGameItem.Descriptor; }
      }
      
      public override PBGameItem DefaultInstanceForType {
        get { return global::hdsense.PBGameItem.DefaultInstance; }
      }
      
      public override PBGameItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGameItem) {
          return MergeFrom((PBGameItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGameItem other) {
        if (other == global::hdsense.PBGameItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasConsumeType) {
          ConsumeType = other.ConsumeType;
        }
        if (other.HasImage) {
          Image = other.Image;
        }
        if (other.HasDemoImage) {
          DemoImage = other.DemoImage;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasAppleProductId) {
          AppleProductId = other.AppleProductId;
        }
        if (other.HasPriceInfo) {
          MergePriceInfo(other.PriceInfo);
        }
        if (other.HasPromotionInfo) {
          MergePromotionInfo(other.PromotionInfo);
        }
        if (other.HasDefaultSaleCount) {
          DefaultSaleCount = other.DefaultSaleCount;
        }
        if (other.HasUsageLifeUnit) {
          UsageLifeUnit = other.UsageLifeUnit;
        }
        if (other.HasUsageLife) {
          UsageLife = other.UsageLife;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGameItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGameItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 34: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.consumeType_, out unknown)) {
                result.hasConsumeType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
            case 90: {
              result.hasImage = input.ReadString(ref result.image_);
              break;
            }
            case 98: {
              result.hasDemoImage = input.ReadString(ref result.demoImage_);
              break;
            }
            case 120: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 178: {
              result.hasAppleProductId = input.ReadString(ref result.appleProductId_);
              break;
            }
            case 186: {
              global::hdsense.PBItemPriceInfo.Builder subBuilder = global::hdsense.PBItemPriceInfo.CreateBuilder();
              if (result.hasPriceInfo) {
                subBuilder.MergeFrom(PriceInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PriceInfo = subBuilder.BuildPartial();
              break;
            }
            case 194: {
              global::hdsense.PBPromotionInfo.Builder subBuilder = global::hdsense.PBPromotionInfo.CreateBuilder();
              if (result.hasPromotionInfo) {
                subBuilder.MergeFrom(PromotionInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PromotionInfo = subBuilder.BuildPartial();
              break;
            }
            case 240: {
              result.hasDefaultSaleCount = input.ReadInt32(ref result.defaultSaleCount_);
              break;
            }
            case 400: {
              object unknown;
              if(input.ReadEnum(ref result.usageLifeUnit_, out unknown)) {
                result.hasUsageLifeUnit = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(50, (ulong)(int)unknown);
              }
              break;
            }
            case 408: {
              result.hasUsageLife = input.ReadInt32(ref result.usageLife_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasConsumeType {
       get { return result.hasConsumeType; }
      }
      public global::hdsense.PBGameItemConsumeType ConsumeType {
        get { return result.ConsumeType; }
        set { SetConsumeType(value); }
      }
      public Builder SetConsumeType(global::hdsense.PBGameItemConsumeType value) {
        PrepareBuilder();
        result.hasConsumeType = true;
        result.consumeType_ = value;
        return this;
      }
      public Builder ClearConsumeType() {
        PrepareBuilder();
        result.hasConsumeType = false;
        result.consumeType_ = global::hdsense.PBGameItemConsumeType.NonConsumable;
        return this;
      }
      
      public bool HasImage {
        get { return result.hasImage; }
      }
      public string Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImage = true;
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.hasImage = false;
        result.image_ = "";
        return this;
      }
      
      public bool HasDemoImage {
        get { return result.hasDemoImage; }
      }
      public string DemoImage {
        get { return result.DemoImage; }
        set { SetDemoImage(value); }
      }
      public Builder SetDemoImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDemoImage = true;
        result.demoImage_ = value;
        return this;
      }
      public Builder ClearDemoImage() {
        PrepareBuilder();
        result.hasDemoImage = false;
        result.demoImage_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasAppleProductId {
        get { return result.hasAppleProductId; }
      }
      public string AppleProductId {
        get { return result.AppleProductId; }
        set { SetAppleProductId(value); }
      }
      public Builder SetAppleProductId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppleProductId = true;
        result.appleProductId_ = value;
        return this;
      }
      public Builder ClearAppleProductId() {
        PrepareBuilder();
        result.hasAppleProductId = false;
        result.appleProductId_ = "";
        return this;
      }
      
      public bool HasPriceInfo {
       get { return result.hasPriceInfo; }
      }
      public global::hdsense.PBItemPriceInfo PriceInfo {
        get { return result.PriceInfo; }
        set { SetPriceInfo(value); }
      }
      public Builder SetPriceInfo(global::hdsense.PBItemPriceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPriceInfo = true;
        result.priceInfo_ = value;
        return this;
      }
      public Builder SetPriceInfo(global::hdsense.PBItemPriceInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPriceInfo = true;
        result.priceInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergePriceInfo(global::hdsense.PBItemPriceInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPriceInfo &&
            result.priceInfo_ != global::hdsense.PBItemPriceInfo.DefaultInstance) {
            result.priceInfo_ = global::hdsense.PBItemPriceInfo.CreateBuilder(result.priceInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.priceInfo_ = value;
        }
        result.hasPriceInfo = true;
        return this;
      }
      public Builder ClearPriceInfo() {
        PrepareBuilder();
        result.hasPriceInfo = false;
        result.priceInfo_ = null;
        return this;
      }
      
      public bool HasPromotionInfo {
       get { return result.hasPromotionInfo; }
      }
      public global::hdsense.PBPromotionInfo PromotionInfo {
        get { return result.PromotionInfo; }
        set { SetPromotionInfo(value); }
      }
      public Builder SetPromotionInfo(global::hdsense.PBPromotionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPromotionInfo = true;
        result.promotionInfo_ = value;
        return this;
      }
      public Builder SetPromotionInfo(global::hdsense.PBPromotionInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPromotionInfo = true;
        result.promotionInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergePromotionInfo(global::hdsense.PBPromotionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPromotionInfo &&
            result.promotionInfo_ != global::hdsense.PBPromotionInfo.DefaultInstance) {
            result.promotionInfo_ = global::hdsense.PBPromotionInfo.CreateBuilder(result.promotionInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.promotionInfo_ = value;
        }
        result.hasPromotionInfo = true;
        return this;
      }
      public Builder ClearPromotionInfo() {
        PrepareBuilder();
        result.hasPromotionInfo = false;
        result.promotionInfo_ = null;
        return this;
      }
      
      public bool HasDefaultSaleCount {
        get { return result.hasDefaultSaleCount; }
      }
      public int DefaultSaleCount {
        get { return result.DefaultSaleCount; }
        set { SetDefaultSaleCount(value); }
      }
      public Builder SetDefaultSaleCount(int value) {
        PrepareBuilder();
        result.hasDefaultSaleCount = true;
        result.defaultSaleCount_ = value;
        return this;
      }
      public Builder ClearDefaultSaleCount() {
        PrepareBuilder();
        result.hasDefaultSaleCount = false;
        result.defaultSaleCount_ = 0;
        return this;
      }
      
      public bool HasUsageLifeUnit {
       get { return result.hasUsageLifeUnit; }
      }
      public global::hdsense.PBGameTimeUnit UsageLifeUnit {
        get { return result.UsageLifeUnit; }
        set { SetUsageLifeUnit(value); }
      }
      public Builder SetUsageLifeUnit(global::hdsense.PBGameTimeUnit value) {
        PrepareBuilder();
        result.hasUsageLifeUnit = true;
        result.usageLifeUnit_ = value;
        return this;
      }
      public Builder ClearUsageLifeUnit() {
        PrepareBuilder();
        result.hasUsageLifeUnit = false;
        result.usageLifeUnit_ = global::hdsense.PBGameTimeUnit.Hour;
        return this;
      }
      
      public bool HasUsageLife {
        get { return result.hasUsageLife; }
      }
      public int UsageLife {
        get { return result.UsageLife; }
        set { SetUsageLife(value); }
      }
      public Builder SetUsageLife(int value) {
        PrepareBuilder();
        result.hasUsageLife = true;
        result.usageLife_ = value;
        return this;
      }
      public Builder ClearUsageLife() {
        PrepareBuilder();
        result.hasUsageLife = false;
        result.usageLife_ = 0;
        return this;
      }
    }
    static PBGameItem() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGameItemList : pb::GeneratedMessage<PBGameItemList, PBGameItemList.Builder> {
    private PBGameItemList() { }
    private static readonly PBGameItemList defaultInstance = new PBGameItemList().MakeReadOnly();
    private static readonly string[] _pBGameItemListFieldNames = new string[] { "items" };
    private static readonly uint[] _pBGameItemListFieldTags = new uint[] { 10 };
    public static PBGameItemList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGameItemList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGameItemList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGameItemList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGameItemList, PBGameItemList.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBGameItemList__FieldAccessorTable; }
    }
    
    public const int ItemsFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBGameItem> items_ = new pbc::PopsicleList<global::hdsense.PBGameItem>();
    public scg::IList<global::hdsense.PBGameItem> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::hdsense.PBGameItem GetItems(int index) {
      return items_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBGameItem element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGameItemListFieldNames;
      if (items_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], items_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBGameItem element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGameItemList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGameItemList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGameItemList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGameItemList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGameItemList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGameItemList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGameItemList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGameItemList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGameItemList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGameItemList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGameItemList MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGameItemList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGameItemList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGameItemList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGameItemList result;
      
      private PBGameItemList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGameItemList original = result;
          result = new PBGameItemList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGameItemList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGameItemList.Descriptor; }
      }
      
      public override PBGameItemList DefaultInstanceForType {
        get { return global::hdsense.PBGameItemList.DefaultInstance; }
      }
      
      public override PBGameItemList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGameItemList) {
          return MergeFrom((PBGameItemList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGameItemList other) {
        if (other == global::hdsense.PBGameItemList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGameItemListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGameItemListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.items_, global::hdsense.PBGameItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBGameItem> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::hdsense.PBGameItem GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::hdsense.PBGameItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::hdsense.PBGameItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::hdsense.PBGameItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::hdsense.PBGameItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::hdsense.PBGameItem> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
    }
    static PBGameItemList() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBIAPProduct : pb::GeneratedMessage<PBIAPProduct, PBIAPProduct.Builder> {
    private PBIAPProduct() { }
    private static readonly PBIAPProduct defaultInstance = new PBIAPProduct().MakeReadOnly();
    private static readonly string[] _pBIAPProductFieldNames = new string[] { "alipayProductId", "appleProductId", "count", "country", "currency", "desc", "name", "prices", "saving", "taobaoUrl", "totalPrice", "type" };
    private static readonly uint[] _pBIAPProductFieldTags = new uint[] { 26, 18, 88, 178, 170, 66, 42, 794, 402, 490, 98, 8 };
    public static PBIAPProduct DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBIAPProduct DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBIAPProduct ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIAPProduct__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBIAPProduct, PBIAPProduct.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIAPProduct__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::hdsense.PBIAPProductType type_ = global::hdsense.PBIAPProductType.IAPCoin;
    public bool HasType {
      get { return hasType; }
    }
    public global::hdsense.PBIAPProductType Type {
      get { return type_; }
    }
    
    public const int AppleProductIdFieldNumber = 2;
    private bool hasAppleProductId;
    private string appleProductId_ = "";
    public bool HasAppleProductId {
      get { return hasAppleProductId; }
    }
    public string AppleProductId {
      get { return appleProductId_; }
    }
    
    public const int AlipayProductIdFieldNumber = 3;
    private bool hasAlipayProductId;
    private string alipayProductId_ = "";
    public bool HasAlipayProductId {
      get { return hasAlipayProductId; }
    }
    public string AlipayProductId {
      get { return alipayProductId_; }
    }
    
    public const int NameFieldNumber = 5;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescFieldNumber = 8;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int CountFieldNumber = 11;
    private bool hasCount;
    private int count_ = 1;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int TotalPriceFieldNumber = 12;
    private bool hasTotalPrice;
    private string totalPrice_ = "";
    public bool HasTotalPrice {
      get { return hasTotalPrice; }
    }
    public string TotalPrice {
      get { return totalPrice_; }
    }
    
    public const int CurrencyFieldNumber = 21;
    private bool hasCurrency;
    private string currency_ = "";
    public bool HasCurrency {
      get { return hasCurrency; }
    }
    public string Currency {
      get { return currency_; }
    }
    
    public const int CountryFieldNumber = 22;
    private bool hasCountry;
    private string country_ = "";
    public bool HasCountry {
      get { return hasCountry; }
    }
    public string Country {
      get { return country_; }
    }
    
    public const int SavingFieldNumber = 50;
    private bool hasSaving;
    private string saving_ = "";
    public bool HasSaving {
      get { return hasSaving; }
    }
    public string Saving {
      get { return saving_; }
    }
    
    public const int TaobaoUrlFieldNumber = 61;
    private bool hasTaobaoUrl;
    private string taobaoUrl_ = "";
    public bool HasTaobaoUrl {
      get { return hasTaobaoUrl; }
    }
    public string TaobaoUrl {
      get { return taobaoUrl_; }
    }
    
    public const int PricesFieldNumber = 99;
    private pbc::PopsicleList<global::hdsense.PBIAPProductPrice> prices_ = new pbc::PopsicleList<global::hdsense.PBIAPProductPrice>();
    public scg::IList<global::hdsense.PBIAPProductPrice> PricesList {
      get { return prices_; }
    }
    public int PricesCount {
      get { return prices_.Count; }
    }
    public global::hdsense.PBIAPProductPrice GetPrices(int index) {
      return prices_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasAppleProductId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBIAPProductFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[11], (int) Type, Type);
      }
      if (hasAppleProductId) {
        output.WriteString(2, field_names[1], AppleProductId);
      }
      if (hasAlipayProductId) {
        output.WriteString(3, field_names[0], AlipayProductId);
      }
      if (hasName) {
        output.WriteString(5, field_names[6], Name);
      }
      if (hasDesc) {
        output.WriteString(8, field_names[5], Desc);
      }
      if (hasCount) {
        output.WriteInt32(11, field_names[2], Count);
      }
      if (hasTotalPrice) {
        output.WriteString(12, field_names[10], TotalPrice);
      }
      if (hasCurrency) {
        output.WriteString(21, field_names[4], Currency);
      }
      if (hasCountry) {
        output.WriteString(22, field_names[3], Country);
      }
      if (hasSaving) {
        output.WriteString(50, field_names[8], Saving);
      }
      if (hasTaobaoUrl) {
        output.WriteString(61, field_names[9], TaobaoUrl);
      }
      if (prices_.Count > 0) {
        output.WriteMessageArray(99, field_names[7], prices_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasAppleProductId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AppleProductId);
        }
        if (hasAlipayProductId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AlipayProductId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Name);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Desc);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, Count);
        }
        if (hasTotalPrice) {
          size += pb::CodedOutputStream.ComputeStringSize(12, TotalPrice);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeStringSize(21, Currency);
        }
        if (hasCountry) {
          size += pb::CodedOutputStream.ComputeStringSize(22, Country);
        }
        if (hasSaving) {
          size += pb::CodedOutputStream.ComputeStringSize(50, Saving);
        }
        if (hasTaobaoUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(61, TaobaoUrl);
        }
        foreach (global::hdsense.PBIAPProductPrice element in PricesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(99, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBIAPProduct ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIAPProduct ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProduct ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIAPProduct ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProduct ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIAPProduct ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProduct ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBIAPProduct ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBIAPProduct ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIAPProduct ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBIAPProduct MakeReadOnly() {
      prices_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBIAPProduct prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBIAPProduct, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBIAPProduct cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBIAPProduct result;
      
      private PBIAPProduct PrepareBuilder() {
        if (resultIsReadOnly) {
          PBIAPProduct original = result;
          result = new PBIAPProduct();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBIAPProduct MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBIAPProduct.Descriptor; }
      }
      
      public override PBIAPProduct DefaultInstanceForType {
        get { return global::hdsense.PBIAPProduct.DefaultInstance; }
      }
      
      public override PBIAPProduct BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBIAPProduct) {
          return MergeFrom((PBIAPProduct) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBIAPProduct other) {
        if (other == global::hdsense.PBIAPProduct.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasAppleProductId) {
          AppleProductId = other.AppleProductId;
        }
        if (other.HasAlipayProductId) {
          AlipayProductId = other.AlipayProductId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.HasTotalPrice) {
          TotalPrice = other.TotalPrice;
        }
        if (other.HasCurrency) {
          Currency = other.Currency;
        }
        if (other.HasCountry) {
          Country = other.Country;
        }
        if (other.HasSaving) {
          Saving = other.Saving;
        }
        if (other.HasTaobaoUrl) {
          TaobaoUrl = other.TaobaoUrl;
        }
        if (other.prices_.Count != 0) {
          result.prices_.Add(other.prices_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBIAPProductFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBIAPProductFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasAppleProductId = input.ReadString(ref result.appleProductId_);
              break;
            }
            case 26: {
              result.hasAlipayProductId = input.ReadString(ref result.alipayProductId_);
              break;
            }
            case 42: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 66: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 88: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 98: {
              result.hasTotalPrice = input.ReadString(ref result.totalPrice_);
              break;
            }
            case 170: {
              result.hasCurrency = input.ReadString(ref result.currency_);
              break;
            }
            case 178: {
              result.hasCountry = input.ReadString(ref result.country_);
              break;
            }
            case 402: {
              result.hasSaving = input.ReadString(ref result.saving_);
              break;
            }
            case 490: {
              result.hasTaobaoUrl = input.ReadString(ref result.taobaoUrl_);
              break;
            }
            case 794: {
              input.ReadMessageArray(tag, field_name, result.prices_, global::hdsense.PBIAPProductPrice.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::hdsense.PBIAPProductType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::hdsense.PBIAPProductType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::hdsense.PBIAPProductType.IAPCoin;
        return this;
      }
      
      public bool HasAppleProductId {
        get { return result.hasAppleProductId; }
      }
      public string AppleProductId {
        get { return result.AppleProductId; }
        set { SetAppleProductId(value); }
      }
      public Builder SetAppleProductId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppleProductId = true;
        result.appleProductId_ = value;
        return this;
      }
      public Builder ClearAppleProductId() {
        PrepareBuilder();
        result.hasAppleProductId = false;
        result.appleProductId_ = "";
        return this;
      }
      
      public bool HasAlipayProductId {
        get { return result.hasAlipayProductId; }
      }
      public string AlipayProductId {
        get { return result.AlipayProductId; }
        set { SetAlipayProductId(value); }
      }
      public Builder SetAlipayProductId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlipayProductId = true;
        result.alipayProductId_ = value;
        return this;
      }
      public Builder ClearAlipayProductId() {
        PrepareBuilder();
        result.hasAlipayProductId = false;
        result.alipayProductId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 1;
        return this;
      }
      
      public bool HasTotalPrice {
        get { return result.hasTotalPrice; }
      }
      public string TotalPrice {
        get { return result.TotalPrice; }
        set { SetTotalPrice(value); }
      }
      public Builder SetTotalPrice(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTotalPrice = true;
        result.totalPrice_ = value;
        return this;
      }
      public Builder ClearTotalPrice() {
        PrepareBuilder();
        result.hasTotalPrice = false;
        result.totalPrice_ = "";
        return this;
      }
      
      public bool HasCurrency {
        get { return result.hasCurrency; }
      }
      public string Currency {
        get { return result.Currency; }
        set { SetCurrency(value); }
      }
      public Builder SetCurrency(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrency = true;
        result.currency_ = value;
        return this;
      }
      public Builder ClearCurrency() {
        PrepareBuilder();
        result.hasCurrency = false;
        result.currency_ = "";
        return this;
      }
      
      public bool HasCountry {
        get { return result.hasCountry; }
      }
      public string Country {
        get { return result.Country; }
        set { SetCountry(value); }
      }
      public Builder SetCountry(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountry = true;
        result.country_ = value;
        return this;
      }
      public Builder ClearCountry() {
        PrepareBuilder();
        result.hasCountry = false;
        result.country_ = "";
        return this;
      }
      
      public bool HasSaving {
        get { return result.hasSaving; }
      }
      public string Saving {
        get { return result.Saving; }
        set { SetSaving(value); }
      }
      public Builder SetSaving(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSaving = true;
        result.saving_ = value;
        return this;
      }
      public Builder ClearSaving() {
        PrepareBuilder();
        result.hasSaving = false;
        result.saving_ = "";
        return this;
      }
      
      public bool HasTaobaoUrl {
        get { return result.hasTaobaoUrl; }
      }
      public string TaobaoUrl {
        get { return result.TaobaoUrl; }
        set { SetTaobaoUrl(value); }
      }
      public Builder SetTaobaoUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTaobaoUrl = true;
        result.taobaoUrl_ = value;
        return this;
      }
      public Builder ClearTaobaoUrl() {
        PrepareBuilder();
        result.hasTaobaoUrl = false;
        result.taobaoUrl_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBIAPProductPrice> PricesList {
        get { return PrepareBuilder().prices_; }
      }
      public int PricesCount {
        get { return result.PricesCount; }
      }
      public global::hdsense.PBIAPProductPrice GetPrices(int index) {
        return result.GetPrices(index);
      }
      public Builder SetPrices(int index, global::hdsense.PBIAPProductPrice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.prices_[index] = value;
        return this;
      }
      public Builder SetPrices(int index, global::hdsense.PBIAPProductPrice.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.prices_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPrices(global::hdsense.PBIAPProductPrice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.prices_.Add(value);
        return this;
      }
      public Builder AddPrices(global::hdsense.PBIAPProductPrice.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.prices_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePrices(scg::IEnumerable<global::hdsense.PBIAPProductPrice> values) {
        PrepareBuilder();
        result.prices_.Add(values);
        return this;
      }
      public Builder ClearPrices() {
        PrepareBuilder();
        result.prices_.Clear();
        return this;
      }
    }
    static PBIAPProduct() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBIAPProductPrice : pb::GeneratedMessage<PBIAPProductPrice, PBIAPProductPrice.Builder> {
    private PBIAPProductPrice() { }
    private static readonly PBIAPProductPrice defaultInstance = new PBIAPProductPrice().MakeReadOnly();
    private static readonly string[] _pBIAPProductPriceFieldNames = new string[] { "country", "currency", "price", "saving" };
    private static readonly uint[] _pBIAPProductPriceFieldTags = new uint[] { 90, 18, 10, 794 };
    public static PBIAPProductPrice DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBIAPProductPrice DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBIAPProductPrice ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIAPProductPrice__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBIAPProductPrice, PBIAPProductPrice.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIAPProductPrice__FieldAccessorTable; }
    }
    
    public const int PriceFieldNumber = 1;
    private bool hasPrice;
    private string price_ = "";
    public bool HasPrice {
      get { return hasPrice; }
    }
    public string Price {
      get { return price_; }
    }
    
    public const int CurrencyFieldNumber = 2;
    private bool hasCurrency;
    private string currency_ = "";
    public bool HasCurrency {
      get { return hasCurrency; }
    }
    public string Currency {
      get { return currency_; }
    }
    
    public const int CountryFieldNumber = 11;
    private bool hasCountry;
    private string country_ = "";
    public bool HasCountry {
      get { return hasCountry; }
    }
    public string Country {
      get { return country_; }
    }
    
    public const int SavingFieldNumber = 99;
    private bool hasSaving;
    private string saving_ = "";
    public bool HasSaving {
      get { return hasSaving; }
    }
    public string Saving {
      get { return saving_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBIAPProductPriceFieldNames;
      if (hasPrice) {
        output.WriteString(1, field_names[2], Price);
      }
      if (hasCurrency) {
        output.WriteString(2, field_names[1], Currency);
      }
      if (hasCountry) {
        output.WriteString(11, field_names[0], Country);
      }
      if (hasSaving) {
        output.WriteString(99, field_names[3], Saving);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Price);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Currency);
        }
        if (hasCountry) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Country);
        }
        if (hasSaving) {
          size += pb::CodedOutputStream.ComputeStringSize(99, Saving);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBIAPProductPrice ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIAPProductPrice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProductPrice ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIAPProductPrice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProductPrice ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIAPProductPrice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProductPrice ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBIAPProductPrice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBIAPProductPrice ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIAPProductPrice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBIAPProductPrice MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBIAPProductPrice prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBIAPProductPrice, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBIAPProductPrice cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBIAPProductPrice result;
      
      private PBIAPProductPrice PrepareBuilder() {
        if (resultIsReadOnly) {
          PBIAPProductPrice original = result;
          result = new PBIAPProductPrice();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBIAPProductPrice MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBIAPProductPrice.Descriptor; }
      }
      
      public override PBIAPProductPrice DefaultInstanceForType {
        get { return global::hdsense.PBIAPProductPrice.DefaultInstance; }
      }
      
      public override PBIAPProductPrice BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBIAPProductPrice) {
          return MergeFrom((PBIAPProductPrice) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBIAPProductPrice other) {
        if (other == global::hdsense.PBIAPProductPrice.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPrice) {
          Price = other.Price;
        }
        if (other.HasCurrency) {
          Currency = other.Currency;
        }
        if (other.HasCountry) {
          Country = other.Country;
        }
        if (other.HasSaving) {
          Saving = other.Saving;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBIAPProductPriceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBIAPProductPriceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPrice = input.ReadString(ref result.price_);
              break;
            }
            case 18: {
              result.hasCurrency = input.ReadString(ref result.currency_);
              break;
            }
            case 90: {
              result.hasCountry = input.ReadString(ref result.country_);
              break;
            }
            case 794: {
              result.hasSaving = input.ReadString(ref result.saving_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPrice {
        get { return result.hasPrice; }
      }
      public string Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = "";
        return this;
      }
      
      public bool HasCurrency {
        get { return result.hasCurrency; }
      }
      public string Currency {
        get { return result.Currency; }
        set { SetCurrency(value); }
      }
      public Builder SetCurrency(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrency = true;
        result.currency_ = value;
        return this;
      }
      public Builder ClearCurrency() {
        PrepareBuilder();
        result.hasCurrency = false;
        result.currency_ = "";
        return this;
      }
      
      public bool HasCountry {
        get { return result.hasCountry; }
      }
      public string Country {
        get { return result.Country; }
        set { SetCountry(value); }
      }
      public Builder SetCountry(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountry = true;
        result.country_ = value;
        return this;
      }
      public Builder ClearCountry() {
        PrepareBuilder();
        result.hasCountry = false;
        result.country_ = "";
        return this;
      }
      
      public bool HasSaving {
        get { return result.hasSaving; }
      }
      public string Saving {
        get { return result.Saving; }
        set { SetSaving(value); }
      }
      public Builder SetSaving(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSaving = true;
        result.saving_ = value;
        return this;
      }
      public Builder ClearSaving() {
        PrepareBuilder();
        result.hasSaving = false;
        result.saving_ = "";
        return this;
      }
    }
    static PBIAPProductPrice() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBIAPProductList : pb::GeneratedMessage<PBIAPProductList, PBIAPProductList.Builder> {
    private PBIAPProductList() { }
    private static readonly PBIAPProductList defaultInstance = new PBIAPProductList().MakeReadOnly();
    private static readonly string[] _pBIAPProductListFieldNames = new string[] { "products" };
    private static readonly uint[] _pBIAPProductListFieldTags = new uint[] { 10 };
    public static PBIAPProductList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBIAPProductList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBIAPProductList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIAPProductList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBIAPProductList, PBIAPProductList.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBIAPProductList__FieldAccessorTable; }
    }
    
    public const int ProductsFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBIAPProduct> products_ = new pbc::PopsicleList<global::hdsense.PBIAPProduct>();
    public scg::IList<global::hdsense.PBIAPProduct> ProductsList {
      get { return products_; }
    }
    public int ProductsCount {
      get { return products_.Count; }
    }
    public global::hdsense.PBIAPProduct GetProducts(int index) {
      return products_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBIAPProduct element in ProductsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBIAPProductListFieldNames;
      if (products_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], products_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBIAPProduct element in ProductsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBIAPProductList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIAPProductList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProductList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBIAPProductList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProductList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIAPProductList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBIAPProductList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBIAPProductList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBIAPProductList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBIAPProductList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBIAPProductList MakeReadOnly() {
      products_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBIAPProductList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBIAPProductList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBIAPProductList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBIAPProductList result;
      
      private PBIAPProductList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBIAPProductList original = result;
          result = new PBIAPProductList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBIAPProductList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBIAPProductList.Descriptor; }
      }
      
      public override PBIAPProductList DefaultInstanceForType {
        get { return global::hdsense.PBIAPProductList.DefaultInstance; }
      }
      
      public override PBIAPProductList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBIAPProductList) {
          return MergeFrom((PBIAPProductList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBIAPProductList other) {
        if (other == global::hdsense.PBIAPProductList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.products_.Count != 0) {
          result.products_.Add(other.products_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBIAPProductListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBIAPProductListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.products_, global::hdsense.PBIAPProduct.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBIAPProduct> ProductsList {
        get { return PrepareBuilder().products_; }
      }
      public int ProductsCount {
        get { return result.ProductsCount; }
      }
      public global::hdsense.PBIAPProduct GetProducts(int index) {
        return result.GetProducts(index);
      }
      public Builder SetProducts(int index, global::hdsense.PBIAPProduct value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.products_[index] = value;
        return this;
      }
      public Builder SetProducts(int index, global::hdsense.PBIAPProduct.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.products_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProducts(global::hdsense.PBIAPProduct value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.products_.Add(value);
        return this;
      }
      public Builder AddProducts(global::hdsense.PBIAPProduct.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.products_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProducts(scg::IEnumerable<global::hdsense.PBIAPProduct> values) {
        PrepareBuilder();
        result.products_.Add(values);
        return this;
      }
      public Builder ClearProducts() {
        PrepareBuilder();
        result.products_.Clear();
        return this;
      }
    }
    static PBIAPProductList() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserItem : pb::GeneratedMessage<PBUserItem, PBUserItem.Builder> {
    private PBUserItem() { }
    private static readonly PBUserItem defaultInstance = new PBUserItem().MakeReadOnly();
    private static readonly string[] _pBUserItemFieldNames = new string[] { "count", "createDate", "expireDate", "itemId", "modifyDate" };
    private static readonly uint[] _pBUserItemFieldTags = new uint[] { 16, 40, 56, 8, 48 };
    public static PBUserItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserItem, PBUserItem.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserItem__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int CreateDateFieldNumber = 5;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int ModifyDateFieldNumber = 6;
    private bool hasModifyDate;
    private int modifyDate_;
    public bool HasModifyDate {
      get { return hasModifyDate; }
    }
    public int ModifyDate {
      get { return modifyDate_; }
    }
    
    public const int ExpireDateFieldNumber = 7;
    private bool hasExpireDate;
    private int expireDate_;
    public bool HasExpireDate {
      get { return hasExpireDate; }
    }
    public int ExpireDate {
      get { return expireDate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserItemFieldNames;
      if (hasItemId) {
        output.WriteInt32(1, field_names[3], ItemId);
      }
      if (hasCount) {
        output.WriteInt32(2, field_names[0], Count);
      }
      if (hasCreateDate) {
        output.WriteInt32(5, field_names[1], CreateDate);
      }
      if (hasModifyDate) {
        output.WriteInt32(6, field_names[4], ModifyDate);
      }
      if (hasExpireDate) {
        output.WriteInt32(7, field_names[2], ExpireDate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, CreateDate);
        }
        if (hasModifyDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, ModifyDate);
        }
        if (hasExpireDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, ExpireDate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserItem result;
      
      private PBUserItem PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserItem original = result;
          result = new PBUserItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBUserItem.Descriptor; }
      }
      
      public override PBUserItem DefaultInstanceForType {
        get { return global::hdsense.PBUserItem.DefaultInstance; }
      }
      
      public override PBUserItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserItem) {
          return MergeFrom((PBUserItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserItem other) {
        if (other == global::hdsense.PBUserItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasModifyDate) {
          ModifyDate = other.ModifyDate;
        }
        if (other.HasExpireDate) {
          ExpireDate = other.ExpireDate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 40: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 48: {
              result.hasModifyDate = input.ReadInt32(ref result.modifyDate_);
              break;
            }
            case 56: {
              result.hasExpireDate = input.ReadInt32(ref result.expireDate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasModifyDate {
        get { return result.hasModifyDate; }
      }
      public int ModifyDate {
        get { return result.ModifyDate; }
        set { SetModifyDate(value); }
      }
      public Builder SetModifyDate(int value) {
        PrepareBuilder();
        result.hasModifyDate = true;
        result.modifyDate_ = value;
        return this;
      }
      public Builder ClearModifyDate() {
        PrepareBuilder();
        result.hasModifyDate = false;
        result.modifyDate_ = 0;
        return this;
      }
      
      public bool HasExpireDate {
        get { return result.hasExpireDate; }
      }
      public int ExpireDate {
        get { return result.ExpireDate; }
        set { SetExpireDate(value); }
      }
      public Builder SetExpireDate(int value) {
        PrepareBuilder();
        result.hasExpireDate = true;
        result.expireDate_ = value;
        return this;
      }
      public Builder ClearExpireDate() {
        PrepareBuilder();
        result.hasExpireDate = false;
        result.expireDate_ = 0;
        return this;
      }
    }
    static PBUserItem() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserItemList : pb::GeneratedMessage<PBUserItemList, PBUserItemList.Builder> {
    private PBUserItemList() { }
    private static readonly PBUserItemList defaultInstance = new PBUserItemList().MakeReadOnly();
    private static readonly string[] _pBUserItemListFieldNames = new string[] { "userItems" };
    private static readonly uint[] _pBUserItemListFieldTags = new uint[] { 18 };
    public static PBUserItemList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserItemList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserItemList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserItemList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserItemList, PBUserItemList.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserItemList__FieldAccessorTable; }
    }
    
    public const int UserItemsFieldNumber = 2;
    private pbc::PopsicleList<global::hdsense.PBUserItem> userItems_ = new pbc::PopsicleList<global::hdsense.PBUserItem>();
    public scg::IList<global::hdsense.PBUserItem> UserItemsList {
      get { return userItems_; }
    }
    public int UserItemsCount {
      get { return userItems_.Count; }
    }
    public global::hdsense.PBUserItem GetUserItems(int index) {
      return userItems_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBUserItem element in UserItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserItemListFieldNames;
      if (userItems_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], userItems_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBUserItem element in UserItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserItemList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserItemList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserItemList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserItemList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserItemList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserItemList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserItemList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserItemList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserItemList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserItemList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserItemList MakeReadOnly() {
      userItems_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserItemList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserItemList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserItemList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserItemList result;
      
      private PBUserItemList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserItemList original = result;
          result = new PBUserItemList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserItemList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBUserItemList.Descriptor; }
      }
      
      public override PBUserItemList DefaultInstanceForType {
        get { return global::hdsense.PBUserItemList.DefaultInstance; }
      }
      
      public override PBUserItemList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserItemList) {
          return MergeFrom((PBUserItemList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserItemList other) {
        if (other == global::hdsense.PBUserItemList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.userItems_.Count != 0) {
          result.userItems_.Add(other.userItems_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserItemListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserItemListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.userItems_, global::hdsense.PBUserItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBUserItem> UserItemsList {
        get { return PrepareBuilder().userItems_; }
      }
      public int UserItemsCount {
        get { return result.UserItemsCount; }
      }
      public global::hdsense.PBUserItem GetUserItems(int index) {
        return result.GetUserItems(index);
      }
      public Builder SetUserItems(int index, global::hdsense.PBUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userItems_[index] = value;
        return this;
      }
      public Builder SetUserItems(int index, global::hdsense.PBUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserItems(global::hdsense.PBUserItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userItems_.Add(value);
        return this;
      }
      public Builder AddUserItems(global::hdsense.PBUserItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserItems(scg::IEnumerable<global::hdsense.PBUserItem> values) {
        PrepareBuilder();
        result.userItems_.Add(values);
        return this;
      }
      public Builder ClearUserItems() {
        PrepareBuilder();
        result.userItems_.Clear();
        return this;
      }
    }
    static PBUserItemList() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBLocalizeString : pb::GeneratedMessage<PBLocalizeString, PBLocalizeString.Builder> {
    private PBLocalizeString() { }
    private static readonly PBLocalizeString defaultInstance = new PBLocalizeString().MakeReadOnly();
    private static readonly string[] _pBLocalizeStringFieldNames = new string[] { "languageCode", "localizedText", "text" };
    private static readonly uint[] _pBLocalizeStringFieldTags = new uint[] { 10, 26, 18 };
    public static PBLocalizeString DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBLocalizeString DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBLocalizeString ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBLocalizeString__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBLocalizeString, PBLocalizeString.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBLocalizeString__FieldAccessorTable; }
    }
    
    public const int LanguageCodeFieldNumber = 1;
    private bool hasLanguageCode;
    private string languageCode_ = "";
    public bool HasLanguageCode {
      get { return hasLanguageCode; }
    }
    public string LanguageCode {
      get { return languageCode_; }
    }
    
    public const int TextFieldNumber = 2;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int LocalizedTextFieldNumber = 3;
    private bool hasLocalizedText;
    private string localizedText_ = "";
    public bool HasLocalizedText {
      get { return hasLocalizedText; }
    }
    public string LocalizedText {
      get { return localizedText_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLanguageCode) return false;
        if (!hasLocalizedText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBLocalizeStringFieldNames;
      if (hasLanguageCode) {
        output.WriteString(1, field_names[0], LanguageCode);
      }
      if (hasText) {
        output.WriteString(2, field_names[2], Text);
      }
      if (hasLocalizedText) {
        output.WriteString(3, field_names[1], LocalizedText);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLanguageCode) {
          size += pb::CodedOutputStream.ComputeStringSize(1, LanguageCode);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Text);
        }
        if (hasLocalizedText) {
          size += pb::CodedOutputStream.ComputeStringSize(3, LocalizedText);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBLocalizeString ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLocalizeString ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLocalizeString ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBLocalizeString ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBLocalizeString ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLocalizeString ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBLocalizeString ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBLocalizeString ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBLocalizeString ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBLocalizeString ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBLocalizeString MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBLocalizeString prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBLocalizeString, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBLocalizeString cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBLocalizeString result;
      
      private PBLocalizeString PrepareBuilder() {
        if (resultIsReadOnly) {
          PBLocalizeString original = result;
          result = new PBLocalizeString();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBLocalizeString MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBLocalizeString.Descriptor; }
      }
      
      public override PBLocalizeString DefaultInstanceForType {
        get { return global::hdsense.PBLocalizeString.DefaultInstance; }
      }
      
      public override PBLocalizeString BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBLocalizeString) {
          return MergeFrom((PBLocalizeString) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBLocalizeString other) {
        if (other == global::hdsense.PBLocalizeString.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLanguageCode) {
          LanguageCode = other.LanguageCode;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasLocalizedText) {
          LocalizedText = other.LocalizedText;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBLocalizeStringFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBLocalizeStringFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLanguageCode = input.ReadString(ref result.languageCode_);
              break;
            }
            case 18: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 26: {
              result.hasLocalizedText = input.ReadString(ref result.localizedText_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLanguageCode {
        get { return result.hasLanguageCode; }
      }
      public string LanguageCode {
        get { return result.LanguageCode; }
        set { SetLanguageCode(value); }
      }
      public Builder SetLanguageCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguageCode = true;
        result.languageCode_ = value;
        return this;
      }
      public Builder ClearLanguageCode() {
        PrepareBuilder();
        result.hasLanguageCode = false;
        result.languageCode_ = "";
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public bool HasLocalizedText {
        get { return result.hasLocalizedText; }
      }
      public string LocalizedText {
        get { return result.LocalizedText; }
        set { SetLocalizedText(value); }
      }
      public Builder SetLocalizedText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalizedText = true;
        result.localizedText_ = value;
        return this;
      }
      public Builder ClearLocalizedText() {
        PrepareBuilder();
        result.hasLocalizedText = false;
        result.localizedText_ = "";
        return this;
      }
    }
    static PBLocalizeString() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSize : pb::GeneratedMessage<PBSize, PBSize.Builder> {
    private PBSize() { }
    private static readonly PBSize defaultInstance = new PBSize().MakeReadOnly();
    private static readonly string[] _pBSizeFieldNames = new string[] { "height", "width" };
    private static readonly uint[] _pBSizeFieldTags = new uint[] { 21, 13 };
    public static PBSize DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSize DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSize ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSize__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSize, PBSize.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSize__FieldAccessorTable; }
    }
    
    public const int WidthFieldNumber = 1;
    private bool hasWidth;
    private float width_ = 304F;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public float Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 2;
    private bool hasHeight;
    private float height_ = 320F;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public float Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSizeFieldNames;
      if (hasWidth) {
        output.WriteFloat(1, field_names[1], Width);
      }
      if (hasHeight) {
        output.WriteFloat(2, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSize ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSize ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSize ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSize ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSize ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSize ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSize ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSize ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSize ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSize ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSize MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSize prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSize, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSize cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSize result;
      
      private PBSize PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSize original = result;
          result = new PBSize();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSize MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSize.Descriptor; }
      }
      
      public override PBSize DefaultInstanceForType {
        get { return global::hdsense.PBSize.DefaultInstance; }
      }
      
      public override PBSize BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSize) {
          return MergeFrom((PBSize) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSize other) {
        if (other == global::hdsense.PBSize.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSizeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSizeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasWidth = input.ReadFloat(ref result.width_);
              break;
            }
            case 21: {
              result.hasHeight = input.ReadFloat(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public float Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(float value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 304F;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public float Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(float value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 320F;
        return this;
      }
    }
    static PBSize() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBOpusRank : pb::GeneratedMessage<PBOpusRank, PBOpusRank.Builder> {
    private PBOpusRank() { }
    private static readonly PBOpusRank defaultInstance = new PBOpusRank().MakeReadOnly();
    private static readonly string[] _pBOpusRankFieldNames = new string[] { "type", "userId", "value" };
    private static readonly uint[] _pBOpusRankFieldTags = new uint[] { 8, 26, 16 };
    public static PBOpusRank DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBOpusRank DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBOpusRank ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBOpusRank__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBOpusRank, PBOpusRank.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBOpusRank__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_ = 1;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public const int UserIdFieldNumber = 3;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBOpusRankFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[0], Type);
      }
      if (hasValue) {
        output.WriteInt32(2, field_names[2], Value);
      }
      if (hasUserId) {
        output.WriteString(3, field_names[1], UserId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, UserId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBOpusRank ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpusRank ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpusRank ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpusRank ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpusRank ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpusRank ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBOpusRank ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBOpusRank ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBOpusRank ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpusRank ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBOpusRank MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBOpusRank prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBOpusRank, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBOpusRank cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBOpusRank result;
      
      private PBOpusRank PrepareBuilder() {
        if (resultIsReadOnly) {
          PBOpusRank original = result;
          result = new PBOpusRank();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBOpusRank MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBOpusRank.Descriptor; }
      }
      
      public override PBOpusRank DefaultInstanceForType {
        get { return global::hdsense.PBOpusRank.DefaultInstance; }
      }
      
      public override PBOpusRank BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBOpusRank) {
          return MergeFrom((PBOpusRank) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBOpusRank other) {
        if (other == global::hdsense.PBOpusRank.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBOpusRankFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBOpusRankFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 16: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
            case 26: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 1;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
    }
    static PBOpusRank() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBUserAward : pb::GeneratedMessage<PBUserAward, PBUserAward.Builder> {
    private PBUserAward() { }
    private static readonly PBUserAward defaultInstance = new PBUserAward().MakeReadOnly();
    private static readonly string[] _pBUserAwardFieldNames = new string[] { "awardType", "coins", "contestId", "createDate", "opusId", "rank", "score", "user" };
    private static readonly uint[] _pBUserAwardFieldTags = new uint[] { 10, 40, 162, 88, 50, 24, 37, 18 };
    public static PBUserAward DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBUserAward DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBUserAward ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserAward__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBUserAward, PBUserAward.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBUserAward__FieldAccessorTable; }
    }
    
    public const int AwardTypeFieldNumber = 1;
    private bool hasAwardType;
    private global::hdsense.PBIntKeyValue awardType_;
    public bool HasAwardType {
      get { return hasAwardType; }
    }
    public global::hdsense.PBIntKeyValue AwardType {
      get { return awardType_ ?? global::hdsense.PBIntKeyValue.DefaultInstance; }
    }
    
    public const int UserFieldNumber = 2;
    private bool hasUser;
    private global::hdsense.PBGameUser user_;
    public bool HasUser {
      get { return hasUser; }
    }
    public global::hdsense.PBGameUser User {
      get { return user_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int RankFieldNumber = 3;
    private bool hasRank;
    private int rank_;
    public bool HasRank {
      get { return hasRank; }
    }
    public int Rank {
      get { return rank_; }
    }
    
    public const int ScoreFieldNumber = 4;
    private bool hasScore;
    private float score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public float Score {
      get { return score_; }
    }
    
    public const int CoinsFieldNumber = 5;
    private bool hasCoins;
    private int coins_;
    public bool HasCoins {
      get { return hasCoins; }
    }
    public int Coins {
      get { return coins_; }
    }
    
    public const int OpusIdFieldNumber = 6;
    private bool hasOpusId;
    private string opusId_ = "";
    public bool HasOpusId {
      get { return hasOpusId; }
    }
    public string OpusId {
      get { return opusId_; }
    }
    
    public const int CreateDateFieldNumber = 11;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int ContestIdFieldNumber = 20;
    private bool hasContestId;
    private string contestId_ = "";
    public bool HasContestId {
      get { return hasContestId; }
    }
    public string ContestId {
      get { return contestId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAwardType) return false;
        if (!hasUser) return false;
        if (!AwardType.IsInitialized) return false;
        if (!User.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBUserAwardFieldNames;
      if (hasAwardType) {
        output.WriteMessage(1, field_names[0], AwardType);
      }
      if (hasUser) {
        output.WriteMessage(2, field_names[7], User);
      }
      if (hasRank) {
        output.WriteInt32(3, field_names[5], Rank);
      }
      if (hasScore) {
        output.WriteFloat(4, field_names[6], Score);
      }
      if (hasCoins) {
        output.WriteInt32(5, field_names[1], Coins);
      }
      if (hasOpusId) {
        output.WriteString(6, field_names[4], OpusId);
      }
      if (hasCreateDate) {
        output.WriteInt32(11, field_names[3], CreateDate);
      }
      if (hasContestId) {
        output.WriteString(20, field_names[2], ContestId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAwardType) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, AwardType);
        }
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, User);
        }
        if (hasRank) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Rank);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Score);
        }
        if (hasCoins) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Coins);
        }
        if (hasOpusId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, OpusId);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, CreateDate);
        }
        if (hasContestId) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ContestId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBUserAward ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserAward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserAward ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBUserAward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBUserAward ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserAward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBUserAward ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBUserAward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBUserAward ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBUserAward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBUserAward MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBUserAward prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBUserAward, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBUserAward cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBUserAward result;
      
      private PBUserAward PrepareBuilder() {
        if (resultIsReadOnly) {
          PBUserAward original = result;
          result = new PBUserAward();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBUserAward MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBUserAward.Descriptor; }
      }
      
      public override PBUserAward DefaultInstanceForType {
        get { return global::hdsense.PBUserAward.DefaultInstance; }
      }
      
      public override PBUserAward BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBUserAward) {
          return MergeFrom((PBUserAward) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBUserAward other) {
        if (other == global::hdsense.PBUserAward.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAwardType) {
          MergeAwardType(other.AwardType);
        }
        if (other.HasUser) {
          MergeUser(other.User);
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasCoins) {
          Coins = other.Coins;
        }
        if (other.HasOpusId) {
          OpusId = other.OpusId;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasContestId) {
          ContestId = other.ContestId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBUserAwardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBUserAwardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::hdsense.PBIntKeyValue.Builder subBuilder = global::hdsense.PBIntKeyValue.CreateBuilder();
              if (result.hasAwardType) {
                subBuilder.MergeFrom(AwardType);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AwardType = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasUser) {
                subBuilder.MergeFrom(User);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              User = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasRank = input.ReadInt32(ref result.rank_);
              break;
            }
            case 37: {
              result.hasScore = input.ReadFloat(ref result.score_);
              break;
            }
            case 40: {
              result.hasCoins = input.ReadInt32(ref result.coins_);
              break;
            }
            case 50: {
              result.hasOpusId = input.ReadString(ref result.opusId_);
              break;
            }
            case 88: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 162: {
              result.hasContestId = input.ReadString(ref result.contestId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAwardType {
       get { return result.hasAwardType; }
      }
      public global::hdsense.PBIntKeyValue AwardType {
        get { return result.AwardType; }
        set { SetAwardType(value); }
      }
      public Builder SetAwardType(global::hdsense.PBIntKeyValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAwardType = true;
        result.awardType_ = value;
        return this;
      }
      public Builder SetAwardType(global::hdsense.PBIntKeyValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAwardType = true;
        result.awardType_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAwardType(global::hdsense.PBIntKeyValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAwardType &&
            result.awardType_ != global::hdsense.PBIntKeyValue.DefaultInstance) {
            result.awardType_ = global::hdsense.PBIntKeyValue.CreateBuilder(result.awardType_).MergeFrom(value).BuildPartial();
        } else {
          result.awardType_ = value;
        }
        result.hasAwardType = true;
        return this;
      }
      public Builder ClearAwardType() {
        PrepareBuilder();
        result.hasAwardType = false;
        result.awardType_ = null;
        return this;
      }
      
      public bool HasUser {
       get { return result.hasUser; }
      }
      public global::hdsense.PBGameUser User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder SetUser(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUser &&
            result.user_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.user_ = global::hdsense.PBGameUser.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
        } else {
          result.user_ = value;
        }
        result.hasUser = true;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = null;
        return this;
      }
      
      public bool HasRank {
        get { return result.hasRank; }
      }
      public int Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(int value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = 0;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public float Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(float value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0F;
        return this;
      }
      
      public bool HasCoins {
        get { return result.hasCoins; }
      }
      public int Coins {
        get { return result.Coins; }
        set { SetCoins(value); }
      }
      public Builder SetCoins(int value) {
        PrepareBuilder();
        result.hasCoins = true;
        result.coins_ = value;
        return this;
      }
      public Builder ClearCoins() {
        PrepareBuilder();
        result.hasCoins = false;
        result.coins_ = 0;
        return this;
      }
      
      public bool HasOpusId {
        get { return result.hasOpusId; }
      }
      public string OpusId {
        get { return result.OpusId; }
        set { SetOpusId(value); }
      }
      public Builder SetOpusId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusId = true;
        result.opusId_ = value;
        return this;
      }
      public Builder ClearOpusId() {
        PrepareBuilder();
        result.hasOpusId = false;
        result.opusId_ = "";
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasContestId {
        get { return result.hasContestId; }
      }
      public string ContestId {
        get { return result.ContestId; }
        set { SetContestId(value); }
      }
      public Builder SetContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestId = true;
        result.contestId_ = value;
        return this;
      }
      public Builder ClearContestId() {
        PrepareBuilder();
        result.hasContestId = false;
        result.contestId_ = "";
        return this;
      }
    }
    static PBUserAward() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBTask : pb::GeneratedMessage<PBTask, PBTask.Builder> {
    private PBTask() { }
    private static readonly PBTask defaultInstance = new PBTask().MakeReadOnly();
    private static readonly string[] _pBTaskFieldNames = new string[] { "award", "badge", "desc", "name", "status", "taskId" };
    private static readonly uint[] _pBTaskFieldTags = new uint[] { 48, 40, 26, 18, 32, 8 };
    public static PBTask DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBTask DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBTask ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBTask__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBTask, PBTask.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBTask__FieldAccessorTable; }
    }
    
    public const int TaskIdFieldNumber = 1;
    private bool hasTaskId;
    private int taskId_;
    public bool HasTaskId {
      get { return hasTaskId; }
    }
    public int TaskId {
      get { return taskId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescFieldNumber = 3;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int StatusFieldNumber = 4;
    private bool hasStatus;
    private global::hdsense.PBTaskStatus status_ = global::hdsense.PBTaskStatus.TASK_STATUS_CAN_TAKE;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::hdsense.PBTaskStatus Status {
      get { return status_; }
    }
    
    public const int BadgeFieldNumber = 5;
    private bool hasBadge;
    private int badge_;
    public bool HasBadge {
      get { return hasBadge; }
    }
    public int Badge {
      get { return badge_; }
    }
    
    public const int AwardFieldNumber = 6;
    private bool hasAward;
    private int award_;
    public bool HasAward {
      get { return hasAward; }
    }
    public int Award {
      get { return award_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTaskId) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBTaskFieldNames;
      if (hasTaskId) {
        output.WriteInt32(1, field_names[5], TaskId);
      }
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (hasDesc) {
        output.WriteString(3, field_names[2], Desc);
      }
      if (hasStatus) {
        output.WriteEnum(4, field_names[4], (int) Status, Status);
      }
      if (hasBadge) {
        output.WriteInt32(5, field_names[1], Badge);
      }
      if (hasAward) {
        output.WriteInt32(6, field_names[0], Award);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTaskId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TaskId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Status);
        }
        if (hasBadge) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Badge);
        }
        if (hasAward) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Award);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBTask ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBTask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBTask ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBTask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBTask ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBTask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBTask ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBTask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBTask ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBTask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBTask MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBTask prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBTask, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBTask cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBTask result;
      
      private PBTask PrepareBuilder() {
        if (resultIsReadOnly) {
          PBTask original = result;
          result = new PBTask();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBTask MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBTask.Descriptor; }
      }
      
      public override PBTask DefaultInstanceForType {
        get { return global::hdsense.PBTask.DefaultInstance; }
      }
      
      public override PBTask BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBTask) {
          return MergeFrom((PBTask) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBTask other) {
        if (other == global::hdsense.PBTask.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTaskId) {
          TaskId = other.TaskId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasBadge) {
          Badge = other.Badge;
        }
        if (other.HasAward) {
          Award = other.Award;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBTaskFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBTaskFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTaskId = input.ReadInt32(ref result.taskId_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasBadge = input.ReadInt32(ref result.badge_);
              break;
            }
            case 48: {
              result.hasAward = input.ReadInt32(ref result.award_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTaskId {
        get { return result.hasTaskId; }
      }
      public int TaskId {
        get { return result.TaskId; }
        set { SetTaskId(value); }
      }
      public Builder SetTaskId(int value) {
        PrepareBuilder();
        result.hasTaskId = true;
        result.taskId_ = value;
        return this;
      }
      public Builder ClearTaskId() {
        PrepareBuilder();
        result.hasTaskId = false;
        result.taskId_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::hdsense.PBTaskStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::hdsense.PBTaskStatus value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::hdsense.PBTaskStatus.TASK_STATUS_CAN_TAKE;
        return this;
      }
      
      public bool HasBadge {
        get { return result.hasBadge; }
      }
      public int Badge {
        get { return result.Badge; }
        set { SetBadge(value); }
      }
      public Builder SetBadge(int value) {
        PrepareBuilder();
        result.hasBadge = true;
        result.badge_ = value;
        return this;
      }
      public Builder ClearBadge() {
        PrepareBuilder();
        result.hasBadge = false;
        result.badge_ = 0;
        return this;
      }
      
      public bool HasAward {
        get { return result.hasAward; }
      }
      public int Award {
        get { return result.Award; }
        set { SetAward(value); }
      }
      public Builder SetAward(int value) {
        PrepareBuilder();
        result.hasAward = true;
        result.award_ = value;
        return this;
      }
      public Builder ClearAward() {
        PrepareBuilder();
        result.hasAward = false;
        result.award_ = 0;
        return this;
      }
    }
    static PBTask() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBSodoTag : pb::GeneratedMessage<PBSodoTag, PBSodoTag.Builder> {
    private PBSodoTag() { }
    private static readonly PBSodoTag defaultInstance = new PBSodoTag().MakeReadOnly();
    private static readonly string[] _pBSodoTagFieldNames = new string[] { "classId", "cnName", "desc", "enName", "isTopTag", "keywords", "parentTag", "subTags", "tcnName" };
    private static readonly uint[] _pBSodoTagFieldTags = new uint[] { 10, 162, 42, 170, 48, 34, 58, 26, 178 };
    public static PBSodoTag DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBSodoTag DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBSodoTag ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSodoTag__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBSodoTag, PBSodoTag.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBSodoTag__FieldAccessorTable; }
    }
    
    public const int ClassIdFieldNumber = 1;
    private bool hasClassId;
    private string classId_ = "";
    public bool HasClassId {
      get { return hasClassId; }
    }
    public string ClassId {
      get { return classId_; }
    }
    
    public const int SubTagsFieldNumber = 3;
    private pbc::PopsicleList<global::hdsense.PBSodoTag> subTags_ = new pbc::PopsicleList<global::hdsense.PBSodoTag>();
    public scg::IList<global::hdsense.PBSodoTag> SubTagsList {
      get { return subTags_; }
    }
    public int SubTagsCount {
      get { return subTags_.Count; }
    }
    public global::hdsense.PBSodoTag GetSubTags(int index) {
      return subTags_[index];
    }
    
    public const int KeywordsFieldNumber = 4;
    private pbc::PopsicleList<string> keywords_ = new pbc::PopsicleList<string>();
    public scg::IList<string> KeywordsList {
      get { return pbc::Lists.AsReadOnly(keywords_); }
    }
    public int KeywordsCount {
      get { return keywords_.Count; }
    }
    public string GetKeywords(int index) {
      return keywords_[index];
    }
    
    public const int DescFieldNumber = 5;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int IsTopTagFieldNumber = 6;
    private bool hasIsTopTag;
    private bool isTopTag_;
    public bool HasIsTopTag {
      get { return hasIsTopTag; }
    }
    public bool IsTopTag {
      get { return isTopTag_; }
    }
    
    public const int ParentTagFieldNumber = 7;
    private bool hasParentTag;
    private global::hdsense.PBSodoTag parentTag_;
    public bool HasParentTag {
      get { return hasParentTag; }
    }
    public global::hdsense.PBSodoTag ParentTag {
      get { return parentTag_ ?? global::hdsense.PBSodoTag.DefaultInstance; }
    }
    
    public const int CnNameFieldNumber = 20;
    private bool hasCnName;
    private string cnName_ = "";
    public bool HasCnName {
      get { return hasCnName; }
    }
    public string CnName {
      get { return cnName_; }
    }
    
    public const int EnNameFieldNumber = 21;
    private bool hasEnName;
    private string enName_ = "";
    public bool HasEnName {
      get { return hasEnName; }
    }
    public string EnName {
      get { return enName_; }
    }
    
    public const int TcnNameFieldNumber = 22;
    private bool hasTcnName;
    private string tcnName_ = "";
    public bool HasTcnName {
      get { return hasTcnName; }
    }
    public string TcnName {
      get { return tcnName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClassId) return false;
        foreach (global::hdsense.PBSodoTag element in SubTagsList) {
          if (!element.IsInitialized) return false;
        }
        if (HasParentTag) {
          if (!ParentTag.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBSodoTagFieldNames;
      if (hasClassId) {
        output.WriteString(1, field_names[0], ClassId);
      }
      if (subTags_.Count > 0) {
        output.WriteMessageArray(3, field_names[7], subTags_);
      }
      if (keywords_.Count > 0) {
        output.WriteStringArray(4, field_names[5], keywords_);
      }
      if (hasDesc) {
        output.WriteString(5, field_names[2], Desc);
      }
      if (hasIsTopTag) {
        output.WriteBool(6, field_names[4], IsTopTag);
      }
      if (hasParentTag) {
        output.WriteMessage(7, field_names[6], ParentTag);
      }
      if (hasCnName) {
        output.WriteString(20, field_names[1], CnName);
      }
      if (hasEnName) {
        output.WriteString(21, field_names[3], EnName);
      }
      if (hasTcnName) {
        output.WriteString(22, field_names[8], TcnName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClassId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ClassId);
        }
        foreach (global::hdsense.PBSodoTag element in SubTagsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        {
          int dataSize = 0;
          foreach (string element in KeywordsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * keywords_.Count;
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Desc);
        }
        if (hasIsTopTag) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, IsTopTag);
        }
        if (hasParentTag) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, ParentTag);
        }
        if (hasCnName) {
          size += pb::CodedOutputStream.ComputeStringSize(20, CnName);
        }
        if (hasEnName) {
          size += pb::CodedOutputStream.ComputeStringSize(21, EnName);
        }
        if (hasTcnName) {
          size += pb::CodedOutputStream.ComputeStringSize(22, TcnName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBSodoTag ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSodoTag ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSodoTag ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBSodoTag ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBSodoTag ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSodoTag ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBSodoTag ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBSodoTag ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBSodoTag ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBSodoTag ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBSodoTag MakeReadOnly() {
      subTags_.MakeReadOnly();
      keywords_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBSodoTag prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBSodoTag, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBSodoTag cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBSodoTag result;
      
      private PBSodoTag PrepareBuilder() {
        if (resultIsReadOnly) {
          PBSodoTag original = result;
          result = new PBSodoTag();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBSodoTag MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBSodoTag.Descriptor; }
      }
      
      public override PBSodoTag DefaultInstanceForType {
        get { return global::hdsense.PBSodoTag.DefaultInstance; }
      }
      
      public override PBSodoTag BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBSodoTag) {
          return MergeFrom((PBSodoTag) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBSodoTag other) {
        if (other == global::hdsense.PBSodoTag.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClassId) {
          ClassId = other.ClassId;
        }
        if (other.subTags_.Count != 0) {
          result.subTags_.Add(other.subTags_);
        }
        if (other.keywords_.Count != 0) {
          result.keywords_.Add(other.keywords_);
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasIsTopTag) {
          IsTopTag = other.IsTopTag;
        }
        if (other.HasParentTag) {
          MergeParentTag(other.ParentTag);
        }
        if (other.HasCnName) {
          CnName = other.CnName;
        }
        if (other.HasEnName) {
          EnName = other.EnName;
        }
        if (other.HasTcnName) {
          TcnName = other.TcnName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBSodoTagFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBSodoTagFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasClassId = input.ReadString(ref result.classId_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.subTags_, global::hdsense.PBSodoTag.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.keywords_);
              break;
            }
            case 42: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 48: {
              result.hasIsTopTag = input.ReadBool(ref result.isTopTag_);
              break;
            }
            case 58: {
              global::hdsense.PBSodoTag.Builder subBuilder = global::hdsense.PBSodoTag.CreateBuilder();
              if (result.hasParentTag) {
                subBuilder.MergeFrom(ParentTag);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ParentTag = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              result.hasCnName = input.ReadString(ref result.cnName_);
              break;
            }
            case 170: {
              result.hasEnName = input.ReadString(ref result.enName_);
              break;
            }
            case 178: {
              result.hasTcnName = input.ReadString(ref result.tcnName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClassId {
        get { return result.hasClassId; }
      }
      public string ClassId {
        get { return result.ClassId; }
        set { SetClassId(value); }
      }
      public Builder SetClassId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassId = true;
        result.classId_ = value;
        return this;
      }
      public Builder ClearClassId() {
        PrepareBuilder();
        result.hasClassId = false;
        result.classId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBSodoTag> SubTagsList {
        get { return PrepareBuilder().subTags_; }
      }
      public int SubTagsCount {
        get { return result.SubTagsCount; }
      }
      public global::hdsense.PBSodoTag GetSubTags(int index) {
        return result.GetSubTags(index);
      }
      public Builder SetSubTags(int index, global::hdsense.PBSodoTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subTags_[index] = value;
        return this;
      }
      public Builder SetSubTags(int index, global::hdsense.PBSodoTag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subTags_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSubTags(global::hdsense.PBSodoTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.subTags_.Add(value);
        return this;
      }
      public Builder AddSubTags(global::hdsense.PBSodoTag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.subTags_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSubTags(scg::IEnumerable<global::hdsense.PBSodoTag> values) {
        PrepareBuilder();
        result.subTags_.Add(values);
        return this;
      }
      public Builder ClearSubTags() {
        PrepareBuilder();
        result.subTags_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> KeywordsList {
        get { return PrepareBuilder().keywords_; }
      }
      public int KeywordsCount {
        get { return result.KeywordsCount; }
      }
      public string GetKeywords(int index) {
        return result.GetKeywords(index);
      }
      public Builder SetKeywords(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.keywords_[index] = value;
        return this;
      }
      public Builder AddKeywords(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.keywords_.Add(value);
        return this;
      }
      public Builder AddRangeKeywords(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.keywords_.Add(values);
        return this;
      }
      public Builder ClearKeywords() {
        PrepareBuilder();
        result.keywords_.Clear();
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasIsTopTag {
        get { return result.hasIsTopTag; }
      }
      public bool IsTopTag {
        get { return result.IsTopTag; }
        set { SetIsTopTag(value); }
      }
      public Builder SetIsTopTag(bool value) {
        PrepareBuilder();
        result.hasIsTopTag = true;
        result.isTopTag_ = value;
        return this;
      }
      public Builder ClearIsTopTag() {
        PrepareBuilder();
        result.hasIsTopTag = false;
        result.isTopTag_ = false;
        return this;
      }
      
      public bool HasParentTag {
       get { return result.hasParentTag; }
      }
      public global::hdsense.PBSodoTag ParentTag {
        get { return result.ParentTag; }
        set { SetParentTag(value); }
      }
      public Builder SetParentTag(global::hdsense.PBSodoTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParentTag = true;
        result.parentTag_ = value;
        return this;
      }
      public Builder SetParentTag(global::hdsense.PBSodoTag.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasParentTag = true;
        result.parentTag_ = builderForValue.Build();
        return this;
      }
      public Builder MergeParentTag(global::hdsense.PBSodoTag value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasParentTag &&
            result.parentTag_ != global::hdsense.PBSodoTag.DefaultInstance) {
            result.parentTag_ = global::hdsense.PBSodoTag.CreateBuilder(result.parentTag_).MergeFrom(value).BuildPartial();
        } else {
          result.parentTag_ = value;
        }
        result.hasParentTag = true;
        return this;
      }
      public Builder ClearParentTag() {
        PrepareBuilder();
        result.hasParentTag = false;
        result.parentTag_ = null;
        return this;
      }
      
      public bool HasCnName {
        get { return result.hasCnName; }
      }
      public string CnName {
        get { return result.CnName; }
        set { SetCnName(value); }
      }
      public Builder SetCnName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCnName = true;
        result.cnName_ = value;
        return this;
      }
      public Builder ClearCnName() {
        PrepareBuilder();
        result.hasCnName = false;
        result.cnName_ = "";
        return this;
      }
      
      public bool HasEnName {
        get { return result.hasEnName; }
      }
      public string EnName {
        get { return result.EnName; }
        set { SetEnName(value); }
      }
      public Builder SetEnName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnName = true;
        result.enName_ = value;
        return this;
      }
      public Builder ClearEnName() {
        PrepareBuilder();
        result.hasEnName = false;
        result.enName_ = "";
        return this;
      }
      
      public bool HasTcnName {
        get { return result.hasTcnName; }
      }
      public string TcnName {
        get { return result.TcnName; }
        set { SetTcnName(value); }
      }
      public Builder SetTcnName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTcnName = true;
        result.tcnName_ = value;
        return this;
      }
      public Builder ClearTcnName() {
        PrepareBuilder();
        result.hasTcnName = false;
        result.tcnName_ = "";
        return this;
      }
    }
    static PBSodoTag() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBAlbum : pb::GeneratedMessage<PBAlbum, PBAlbum.Builder> {
    private PBAlbum() { }
    private static readonly PBAlbum defaultInstance = new PBAlbum().MakeReadOnly();
    private static readonly string[] _pBAlbumFieldNames = new string[] { "albumId", "avatar", "cameraPara", "createDate", "dataUrl", "desc", "duration", "image", "isWithAppImage", "nickName", "sodoType", "thumbImage", "userId" };
    private static readonly uint[] _pBAlbumFieldTags = new uint[] { 10, 98, 162, 56, 34, 42, 69, 18, 104, 90, 48, 26, 82 };
    public static PBAlbum DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBAlbum DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBAlbum ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBAlbum__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBAlbum, PBAlbum.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBAlbum__FieldAccessorTable; }
    }
    
    public const int AlbumIdFieldNumber = 1;
    private bool hasAlbumId;
    private string albumId_ = "";
    public bool HasAlbumId {
      get { return hasAlbumId; }
    }
    public string AlbumId {
      get { return albumId_; }
    }
    
    public const int ImageFieldNumber = 2;
    private bool hasImage;
    private string image_ = "";
    public bool HasImage {
      get { return hasImage; }
    }
    public string Image {
      get { return image_; }
    }
    
    public const int ThumbImageFieldNumber = 3;
    private bool hasThumbImage;
    private string thumbImage_ = "";
    public bool HasThumbImage {
      get { return hasThumbImage; }
    }
    public string ThumbImage {
      get { return thumbImage_; }
    }
    
    public const int DataUrlFieldNumber = 4;
    private bool hasDataUrl;
    private string dataUrl_ = "";
    public bool HasDataUrl {
      get { return hasDataUrl; }
    }
    public string DataUrl {
      get { return dataUrl_; }
    }
    
    public const int DescFieldNumber = 5;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int SodoTypeFieldNumber = 6;
    private bool hasSodoType;
    private global::hdsense.PBOpusSodoType sodoType_ = global::hdsense.PBOpusSodoType.SODO_RENXIANG;
    public bool HasSodoType {
      get { return hasSodoType; }
    }
    public global::hdsense.PBOpusSodoType SodoType {
      get { return sodoType_; }
    }
    
    public const int CreateDateFieldNumber = 7;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int DurationFieldNumber = 8;
    private bool hasDuration;
    private float duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public float Duration {
      get { return duration_; }
    }
    
    public const int UserIdFieldNumber = 10;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int NickNameFieldNumber = 11;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int AvatarFieldNumber = 12;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int IsWithAppImageFieldNumber = 13;
    private bool hasIsWithAppImage;
    private bool isWithAppImage_;
    public bool HasIsWithAppImage {
      get { return hasIsWithAppImage; }
    }
    public bool IsWithAppImage {
      get { return isWithAppImage_; }
    }
    
    public const int CameraParaFieldNumber = 20;
    private bool hasCameraPara;
    private global::hdsense.PBCameraParameter cameraPara_;
    public bool HasCameraPara {
      get { return hasCameraPara; }
    }
    public global::hdsense.PBCameraParameter CameraPara {
      get { return cameraPara_ ?? global::hdsense.PBCameraParameter.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAlbumId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBAlbumFieldNames;
      if (hasAlbumId) {
        output.WriteString(1, field_names[0], AlbumId);
      }
      if (hasImage) {
        output.WriteString(2, field_names[7], Image);
      }
      if (hasThumbImage) {
        output.WriteString(3, field_names[11], ThumbImage);
      }
      if (hasDataUrl) {
        output.WriteString(4, field_names[4], DataUrl);
      }
      if (hasDesc) {
        output.WriteString(5, field_names[5], Desc);
      }
      if (hasSodoType) {
        output.WriteEnum(6, field_names[10], (int) SodoType, SodoType);
      }
      if (hasCreateDate) {
        output.WriteInt32(7, field_names[3], CreateDate);
      }
      if (hasDuration) {
        output.WriteFloat(8, field_names[6], Duration);
      }
      if (hasUserId) {
        output.WriteString(10, field_names[12], UserId);
      }
      if (hasNickName) {
        output.WriteString(11, field_names[9], NickName);
      }
      if (hasAvatar) {
        output.WriteString(12, field_names[1], Avatar);
      }
      if (hasIsWithAppImage) {
        output.WriteBool(13, field_names[8], IsWithAppImage);
      }
      if (hasCameraPara) {
        output.WriteMessage(20, field_names[2], CameraPara);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAlbumId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AlbumId);
        }
        if (hasImage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Image);
        }
        if (hasThumbImage) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ThumbImage);
        }
        if (hasDataUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(4, DataUrl);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Desc);
        }
        if (hasSodoType) {
          size += pb::CodedOutputStream.ComputeEnumSize(6, (int) SodoType);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, CreateDate);
        }
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeFloatSize(8, Duration);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(10, UserId);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(11, NickName);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(12, Avatar);
        }
        if (hasIsWithAppImage) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, IsWithAppImage);
        }
        if (hasCameraPara) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, CameraPara);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBAlbum ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAlbum ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAlbum ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAlbum ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAlbum ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAlbum ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBAlbum ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBAlbum ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBAlbum ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAlbum ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBAlbum MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBAlbum prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBAlbum, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBAlbum cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBAlbum result;
      
      private PBAlbum PrepareBuilder() {
        if (resultIsReadOnly) {
          PBAlbum original = result;
          result = new PBAlbum();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBAlbum MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBAlbum.Descriptor; }
      }
      
      public override PBAlbum DefaultInstanceForType {
        get { return global::hdsense.PBAlbum.DefaultInstance; }
      }
      
      public override PBAlbum BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBAlbum) {
          return MergeFrom((PBAlbum) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBAlbum other) {
        if (other == global::hdsense.PBAlbum.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAlbumId) {
          AlbumId = other.AlbumId;
        }
        if (other.HasImage) {
          Image = other.Image;
        }
        if (other.HasThumbImage) {
          ThumbImage = other.ThumbImage;
        }
        if (other.HasDataUrl) {
          DataUrl = other.DataUrl;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasSodoType) {
          SodoType = other.SodoType;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasIsWithAppImage) {
          IsWithAppImage = other.IsWithAppImage;
        }
        if (other.HasCameraPara) {
          MergeCameraPara(other.CameraPara);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBAlbumFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBAlbumFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAlbumId = input.ReadString(ref result.albumId_);
              break;
            }
            case 18: {
              result.hasImage = input.ReadString(ref result.image_);
              break;
            }
            case 26: {
              result.hasThumbImage = input.ReadString(ref result.thumbImage_);
              break;
            }
            case 34: {
              result.hasDataUrl = input.ReadString(ref result.dataUrl_);
              break;
            }
            case 42: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 48: {
              object unknown;
              if(input.ReadEnum(ref result.sodoType_, out unknown)) {
                result.hasSodoType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(6, (ulong)(int)unknown);
              }
              break;
            }
            case 56: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 69: {
              result.hasDuration = input.ReadFloat(ref result.duration_);
              break;
            }
            case 82: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 90: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 98: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 104: {
              result.hasIsWithAppImage = input.ReadBool(ref result.isWithAppImage_);
              break;
            }
            case 162: {
              global::hdsense.PBCameraParameter.Builder subBuilder = global::hdsense.PBCameraParameter.CreateBuilder();
              if (result.hasCameraPara) {
                subBuilder.MergeFrom(CameraPara);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CameraPara = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAlbumId {
        get { return result.hasAlbumId; }
      }
      public string AlbumId {
        get { return result.AlbumId; }
        set { SetAlbumId(value); }
      }
      public Builder SetAlbumId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlbumId = true;
        result.albumId_ = value;
        return this;
      }
      public Builder ClearAlbumId() {
        PrepareBuilder();
        result.hasAlbumId = false;
        result.albumId_ = "";
        return this;
      }
      
      public bool HasImage {
        get { return result.hasImage; }
      }
      public string Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImage = true;
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.hasImage = false;
        result.image_ = "";
        return this;
      }
      
      public bool HasThumbImage {
        get { return result.hasThumbImage; }
      }
      public string ThumbImage {
        get { return result.ThumbImage; }
        set { SetThumbImage(value); }
      }
      public Builder SetThumbImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThumbImage = true;
        result.thumbImage_ = value;
        return this;
      }
      public Builder ClearThumbImage() {
        PrepareBuilder();
        result.hasThumbImage = false;
        result.thumbImage_ = "";
        return this;
      }
      
      public bool HasDataUrl {
        get { return result.hasDataUrl; }
      }
      public string DataUrl {
        get { return result.DataUrl; }
        set { SetDataUrl(value); }
      }
      public Builder SetDataUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDataUrl = true;
        result.dataUrl_ = value;
        return this;
      }
      public Builder ClearDataUrl() {
        PrepareBuilder();
        result.hasDataUrl = false;
        result.dataUrl_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasSodoType {
       get { return result.hasSodoType; }
      }
      public global::hdsense.PBOpusSodoType SodoType {
        get { return result.SodoType; }
        set { SetSodoType(value); }
      }
      public Builder SetSodoType(global::hdsense.PBOpusSodoType value) {
        PrepareBuilder();
        result.hasSodoType = true;
        result.sodoType_ = value;
        return this;
      }
      public Builder ClearSodoType() {
        PrepareBuilder();
        result.hasSodoType = false;
        result.sodoType_ = global::hdsense.PBOpusSodoType.SODO_RENXIANG;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public float Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(float value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0F;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasIsWithAppImage {
        get { return result.hasIsWithAppImage; }
      }
      public bool IsWithAppImage {
        get { return result.IsWithAppImage; }
        set { SetIsWithAppImage(value); }
      }
      public Builder SetIsWithAppImage(bool value) {
        PrepareBuilder();
        result.hasIsWithAppImage = true;
        result.isWithAppImage_ = value;
        return this;
      }
      public Builder ClearIsWithAppImage() {
        PrepareBuilder();
        result.hasIsWithAppImage = false;
        result.isWithAppImage_ = false;
        return this;
      }
      
      public bool HasCameraPara {
       get { return result.hasCameraPara; }
      }
      public global::hdsense.PBCameraParameter CameraPara {
        get { return result.CameraPara; }
        set { SetCameraPara(value); }
      }
      public Builder SetCameraPara(global::hdsense.PBCameraParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraPara = true;
        result.cameraPara_ = value;
        return this;
      }
      public Builder SetCameraPara(global::hdsense.PBCameraParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCameraPara = true;
        result.cameraPara_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCameraPara(global::hdsense.PBCameraParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCameraPara &&
            result.cameraPara_ != global::hdsense.PBCameraParameter.DefaultInstance) {
            result.cameraPara_ = global::hdsense.PBCameraParameter.CreateBuilder(result.cameraPara_).MergeFrom(value).BuildPartial();
        } else {
          result.cameraPara_ = value;
        }
        result.hasCameraPara = true;
        return this;
      }
      public Builder ClearCameraPara() {
        PrepareBuilder();
        result.hasCameraPara = false;
        result.cameraPara_ = null;
        return this;
      }
    }
    static PBAlbum() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBulletion : pb::GeneratedMessage<PBBulletion, PBBulletion.Builder> {
    private PBBulletion() { }
    private static readonly PBBulletion defaultInstance = new PBBulletion().MakeReadOnly();
    private static readonly string[] _pBBulletionFieldNames = new string[] { "bulletinId", "createDate", "endDate", "function", "gameId", "imageAppUrl", "imageWebUrl", "message", "parameter", "showType", "type", "url" };
    private static readonly uint[] _pBBulletionFieldTags = new uint[] { 10, 80, 88, 34, 26, 122, 130, 98, 114, 40, 16, 106 };
    public static PBBulletion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBulletion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBulletion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBBulletion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBulletion, PBBulletion.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameBasic.internal__static_hdsense_PBBulletion__FieldAccessorTable; }
    }
    
    public const int BulletinIdFieldNumber = 1;
    private bool hasBulletinId;
    private string bulletinId_ = "";
    public bool HasBulletinId {
      get { return hasBulletinId; }
    }
    public string BulletinId {
      get { return bulletinId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int GameIdFieldNumber = 3;
    private bool hasGameId;
    private string gameId_ = "";
    public bool HasGameId {
      get { return hasGameId; }
    }
    public string GameId {
      get { return gameId_; }
    }
    
    public const int FunctionFieldNumber = 4;
    private bool hasFunction;
    private string function_ = "";
    public bool HasFunction {
      get { return hasFunction; }
    }
    public string Function {
      get { return function_; }
    }
    
    public const int ShowTypeFieldNumber = 5;
    private bool hasShowType;
    private int showType_;
    public bool HasShowType {
      get { return hasShowType; }
    }
    public int ShowType {
      get { return showType_; }
    }
    
    public const int CreateDateFieldNumber = 10;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int EndDateFieldNumber = 11;
    private bool hasEndDate;
    private int endDate_;
    public bool HasEndDate {
      get { return hasEndDate; }
    }
    public int EndDate {
      get { return endDate_; }
    }
    
    public const int MessageFieldNumber = 12;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public const int UrlFieldNumber = 13;
    private bool hasUrl;
    private string url_ = "";
    public bool HasUrl {
      get { return hasUrl; }
    }
    public string Url {
      get { return url_; }
    }
    
    public const int ParameterFieldNumber = 14;
    private bool hasParameter;
    private string parameter_ = "";
    public bool HasParameter {
      get { return hasParameter; }
    }
    public string Parameter {
      get { return parameter_; }
    }
    
    public const int ImageAppUrlFieldNumber = 15;
    private bool hasImageAppUrl;
    private string imageAppUrl_ = "";
    public bool HasImageAppUrl {
      get { return hasImageAppUrl; }
    }
    public string ImageAppUrl {
      get { return imageAppUrl_; }
    }
    
    public const int ImageWebUrlFieldNumber = 16;
    private bool hasImageWebUrl;
    private string imageWebUrl_ = "";
    public bool HasImageWebUrl {
      get { return hasImageWebUrl; }
    }
    public string ImageWebUrl {
      get { return imageWebUrl_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBulletinId) return false;
        if (!hasType) return false;
        if (!hasGameId) return false;
        if (!hasFunction) return false;
        if (!hasShowType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBulletionFieldNames;
      if (hasBulletinId) {
        output.WriteString(1, field_names[0], BulletinId);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[10], Type);
      }
      if (hasGameId) {
        output.WriteString(3, field_names[4], GameId);
      }
      if (hasFunction) {
        output.WriteString(4, field_names[3], Function);
      }
      if (hasShowType) {
        output.WriteInt32(5, field_names[9], ShowType);
      }
      if (hasCreateDate) {
        output.WriteInt32(10, field_names[1], CreateDate);
      }
      if (hasEndDate) {
        output.WriteInt32(11, field_names[2], EndDate);
      }
      if (hasMessage) {
        output.WriteString(12, field_names[7], Message);
      }
      if (hasUrl) {
        output.WriteString(13, field_names[11], Url);
      }
      if (hasParameter) {
        output.WriteString(14, field_names[8], Parameter);
      }
      if (hasImageAppUrl) {
        output.WriteString(15, field_names[5], ImageAppUrl);
      }
      if (hasImageWebUrl) {
        output.WriteString(16, field_names[6], ImageWebUrl);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBulletinId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BulletinId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasGameId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, GameId);
        }
        if (hasFunction) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Function);
        }
        if (hasShowType) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ShowType);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, CreateDate);
        }
        if (hasEndDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, EndDate);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(12, Message);
        }
        if (hasUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(13, Url);
        }
        if (hasParameter) {
          size += pb::CodedOutputStream.ComputeStringSize(14, Parameter);
        }
        if (hasImageAppUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(15, ImageAppUrl);
        }
        if (hasImageWebUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(16, ImageWebUrl);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBulletion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBulletion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBulletion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBulletion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBulletion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBulletion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBulletion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBulletion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBulletion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBulletion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBulletion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBulletion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBulletion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBulletion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBulletion result;
      
      private PBBulletion PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBulletion original = result;
          result = new PBBulletion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBulletion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBulletion.Descriptor; }
      }
      
      public override PBBulletion DefaultInstanceForType {
        get { return global::hdsense.PBBulletion.DefaultInstance; }
      }
      
      public override PBBulletion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBulletion) {
          return MergeFrom((PBBulletion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBulletion other) {
        if (other == global::hdsense.PBBulletion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBulletinId) {
          BulletinId = other.BulletinId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasGameId) {
          GameId = other.GameId;
        }
        if (other.HasFunction) {
          Function = other.Function;
        }
        if (other.HasShowType) {
          ShowType = other.ShowType;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasEndDate) {
          EndDate = other.EndDate;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        if (other.HasUrl) {
          Url = other.Url;
        }
        if (other.HasParameter) {
          Parameter = other.Parameter;
        }
        if (other.HasImageAppUrl) {
          ImageAppUrl = other.ImageAppUrl;
        }
        if (other.HasImageWebUrl) {
          ImageWebUrl = other.ImageWebUrl;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBulletionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBulletionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBulletinId = input.ReadString(ref result.bulletinId_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 26: {
              result.hasGameId = input.ReadString(ref result.gameId_);
              break;
            }
            case 34: {
              result.hasFunction = input.ReadString(ref result.function_);
              break;
            }
            case 40: {
              result.hasShowType = input.ReadInt32(ref result.showType_);
              break;
            }
            case 80: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 88: {
              result.hasEndDate = input.ReadInt32(ref result.endDate_);
              break;
            }
            case 98: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
            case 106: {
              result.hasUrl = input.ReadString(ref result.url_);
              break;
            }
            case 114: {
              result.hasParameter = input.ReadString(ref result.parameter_);
              break;
            }
            case 122: {
              result.hasImageAppUrl = input.ReadString(ref result.imageAppUrl_);
              break;
            }
            case 130: {
              result.hasImageWebUrl = input.ReadString(ref result.imageWebUrl_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBulletinId {
        get { return result.hasBulletinId; }
      }
      public string BulletinId {
        get { return result.BulletinId; }
        set { SetBulletinId(value); }
      }
      public Builder SetBulletinId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBulletinId = true;
        result.bulletinId_ = value;
        return this;
      }
      public Builder ClearBulletinId() {
        PrepareBuilder();
        result.hasBulletinId = false;
        result.bulletinId_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasGameId {
        get { return result.hasGameId; }
      }
      public string GameId {
        get { return result.GameId; }
        set { SetGameId(value); }
      }
      public Builder SetGameId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameId = true;
        result.gameId_ = value;
        return this;
      }
      public Builder ClearGameId() {
        PrepareBuilder();
        result.hasGameId = false;
        result.gameId_ = "";
        return this;
      }
      
      public bool HasFunction {
        get { return result.hasFunction; }
      }
      public string Function {
        get { return result.Function; }
        set { SetFunction(value); }
      }
      public Builder SetFunction(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFunction = true;
        result.function_ = value;
        return this;
      }
      public Builder ClearFunction() {
        PrepareBuilder();
        result.hasFunction = false;
        result.function_ = "";
        return this;
      }
      
      public bool HasShowType {
        get { return result.hasShowType; }
      }
      public int ShowType {
        get { return result.ShowType; }
        set { SetShowType(value); }
      }
      public Builder SetShowType(int value) {
        PrepareBuilder();
        result.hasShowType = true;
        result.showType_ = value;
        return this;
      }
      public Builder ClearShowType() {
        PrepareBuilder();
        result.hasShowType = false;
        result.showType_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasEndDate {
        get { return result.hasEndDate; }
      }
      public int EndDate {
        get { return result.EndDate; }
        set { SetEndDate(value); }
      }
      public Builder SetEndDate(int value) {
        PrepareBuilder();
        result.hasEndDate = true;
        result.endDate_ = value;
        return this;
      }
      public Builder ClearEndDate() {
        PrepareBuilder();
        result.hasEndDate = false;
        result.endDate_ = 0;
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
      
      public bool HasUrl {
        get { return result.hasUrl; }
      }
      public string Url {
        get { return result.Url; }
        set { SetUrl(value); }
      }
      public Builder SetUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUrl = true;
        result.url_ = value;
        return this;
      }
      public Builder ClearUrl() {
        PrepareBuilder();
        result.hasUrl = false;
        result.url_ = "";
        return this;
      }
      
      public bool HasParameter {
        get { return result.hasParameter; }
      }
      public string Parameter {
        get { return result.Parameter; }
        set { SetParameter(value); }
      }
      public Builder SetParameter(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParameter = true;
        result.parameter_ = value;
        return this;
      }
      public Builder ClearParameter() {
        PrepareBuilder();
        result.hasParameter = false;
        result.parameter_ = "";
        return this;
      }
      
      public bool HasImageAppUrl {
        get { return result.hasImageAppUrl; }
      }
      public string ImageAppUrl {
        get { return result.ImageAppUrl; }
        set { SetImageAppUrl(value); }
      }
      public Builder SetImageAppUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageAppUrl = true;
        result.imageAppUrl_ = value;
        return this;
      }
      public Builder ClearImageAppUrl() {
        PrepareBuilder();
        result.hasImageAppUrl = false;
        result.imageAppUrl_ = "";
        return this;
      }
      
      public bool HasImageWebUrl {
        get { return result.hasImageWebUrl; }
      }
      public string ImageWebUrl {
        get { return result.ImageWebUrl; }
        set { SetImageWebUrl(value); }
      }
      public Builder SetImageWebUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageWebUrl = true;
        result.imageWebUrl_ = value;
        return this;
      }
      public Builder ClearImageWebUrl() {
        PrepareBuilder();
        result.hasImageWebUrl = false;
        result.imageWebUrl_ = "";
        return this;
      }
    }
    static PBBulletion() {
      object.ReferenceEquals(global::hdsense.GameBasic.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
