// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BBS {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSUser__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSUser, global::hdsense.PBBBSUser.Builder> internal__static_hdsense_PBBBSUser__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSDraw__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSDraw, global::hdsense.PBBBSDraw.Builder> internal__static_hdsense_PBBBSDraw__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSImages__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSImages, global::hdsense.PBBBSImages.Builder> internal__static_hdsense_PBBBSImages__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSContent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSContent, global::hdsense.PBBBSContent.Builder> internal__static_hdsense_PBBBSContent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSReward__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSReward, global::hdsense.PBBBSReward.Builder> internal__static_hdsense_PBBBSReward__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSPost__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSPost, global::hdsense.PBBBSPost.Builder> internal__static_hdsense_PBBBSPost__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSPrivilege__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSPrivilege, global::hdsense.PBBBSPrivilege.Builder> internal__static_hdsense_PBBBSPrivilege__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSActionSource__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSActionSource, global::hdsense.PBBBSActionSource.Builder> internal__static_hdsense_PBBBSActionSource__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSAction__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSAction, global::hdsense.PBBBSAction.Builder> internal__static_hdsense_PBBBSAction__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBBBSBoard__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSBoard, global::hdsense.PBBBSBoard.Builder> internal__static_hdsense_PBBBSBoard__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static BBS() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CglCQlMucHJvdG8SB2hkc2Vuc2UaD0dhbWVCYXNpYy5wcm90byJaCglQQkJC" + 
          "U1VzZXISDgoGdXNlcklkGAEgAigJEhAKCG5pY2tOYW1lGAIgASgJEg4KBmF2" + 
          "YXRhchgDIAEoCRIOCgZnZW5kZXIYBCABKAgSCwoDdmlwGAUgASgFInMKCVBC" + 
          "QkJTRHJhdxItCg5kcmF3QWN0aW9uTGlzdBgBIAMoCzIVLmhkc2Vuc2UuUEJE" + 
          "cmF3QWN0aW9uEhIKB3ZlcnNpb24YAiABKAU6ATASIwoKY2FudmFzU2l6ZRgD" + 
          "IAEoCzIPLmhkc2Vuc2UuUEJTaXplIooBCgtQQkJCU0ltYWdlcxIPCgdpbWFn" + 
          "ZUlkGAEgAigFEhAKCGltYWdlVXJsGAIgAigJEhUKDXRodW1iSW1hZ2VVcmwY" + 
          "AyABKAkSEQoJc3RhcnREYXRlGAQgASgFEg8KB2VuZERhdGUYBSABKAUSDQoF" + 
          "d2lkdGgYCiABKAISDgoGaGVpZ2h0GAsgASgCIo0CCgxQQkJCU0NvbnRlbnQS" + 
          "DAoEdHlwZRgBIAIoBRIMCgR0ZXh0GAIgASgJEg0KBXRpdGxlGAMgASgJEhUK" + 
          "DXRodW1iSW1hZ2VVcmwYCiABKAkSEAoIaW1hZ2VVcmwYCyABKAkSJAoGaW1h" + 
          "Z2VzGA8gAygLMhQuaGRzZW5zZS5QQkJCU0ltYWdlcxIPCgdkYXRhVXJsGBAg" + 
          "ASgJEhAKCGR1cmF0aW9uGBEgASgFEhQKDGRyYXdUaHVtYlVybBgUIAEoCRIU" + 
          "CgxkcmF3SW1hZ2VVcmwYFSABKAkSJAoIZHJhd0RhdGEYFiABKAsyEi5oZHNl" + 
          "bnNlLlBCQkJTRHJhdxIOCgZvcHVzSWQYHiABKAkidQoLUEJCQlNSZXdhcmQS" + 
          "DQoFYm9udXMYASACKAUSDgoGc3RhdHVzGAIgAigFEiIKBndpbm5lchgDIAEo" + 
          "CzISLmhkc2Vuc2UuUEJCQlNVc2VyEhEKCWF3YXJkRGF0ZRgEIAEoBRIQCghh" + 
          "Y3Rpb25JZBgFIAEoCSLKAgoJUEJCQlNQb3N0Eg4KBnBvc3RJZBgBIAIoCRIP" + 
          "Cgdib2FyZElkGAIgAigJEg0KBWFwcElkGAMgAigJEhIKCmRldmljZVR5cGUY" + 
          "BCACKAUSEgoKcmVwbHlDb3VudBgFIAIoBRIUCgxzdXBwb3J0Q291bnQYBiAC" + 
          "KAUSEgoKY3JlYXRlRGF0ZRgHIAIoBRISCgptb2RpZnlEYXRlGAggAigFEiYK" + 
          "CmNyZWF0ZVVzZXIYCSACKAsyEi5oZHNlbnNlLlBCQkJTVXNlchImCgdjb250" + 
          "ZW50GAogAigLMhUuaGRzZW5zZS5QQkJCU0NvbnRlbnQSJAoGcmV3YXJkGAsg" + 
          "ASgLMhQuaGRzZW5zZS5QQkJCU1Jld2FyZBIOCgZzdGF0dXMYDCABKAUSDgoG" + 
          "bWFya2VkGA0gASgIEhEKCWlzUHJpdmF0ZRgOIAEoCCI1Cg5QQkJCU1ByaXZp" + 
          "bGVnZRIPCgdib2FyZElkGAEgAigJEhIKCnBlcm1pc3Npb24YAiACKAUilAEK" + 
          "EVBCQkJTQWN0aW9uU291cmNlEg4KBnBvc3RJZBgBIAIoCRIPCgdwb3N0VWlk" + 
          "GAIgAigJEhAKCGFjdGlvbklkGAMgASgJEhEKCWFjdGlvblVpZBgEIAEoCRIS" + 
          "CgphY3Rpb25OaWNrGAUgASgJEhIKCmFjdGlvblR5cGUYBiABKAUSEQoJYnJp" + 
          "ZWZUZXh0GAcgASgJIuUBCgtQQkJCU0FjdGlvbhIQCghhY3Rpb25JZBgBIAIo" + 
          "CRIMCgR0eXBlGAIgAigFEiYKCmNyZWF0ZVVzZXIYAyACKAsyEi5oZHNlbnNl" + 
          "LlBCQkJTVXNlchISCgpkZXZpY2VUeXBlGAUgAigFEhIKCmNyZWF0ZURhdGUY" + 
          "BiACKAUSEgoKcmVwbHlDb3VudBgHIAEoBRImCgdjb250ZW50GAggASgLMhUu" + 
          "aGRzZW5zZS5QQkJCU0NvbnRlbnQSKgoGc291cmNlGAkgASgLMhouaGRzZW5z" + 
          "ZS5QQkJCU0FjdGlvblNvdXJjZSLwAQoKUEJCQlNCb2FyZBIPCgdib2FyZElk" + 
          "GAEgAigJEgwKBHR5cGUYAiACKAUSDAoEbmFtZRgDIAIoCRITCgthY3Rpb25D" + 
          "b3VudBgFIAIoBRIRCglwb3N0Q291bnQYBiACKAUSDAoEaWNvbhgEIAEoCRIV" + 
          "Cg1wYXJlbnRCb2FyZElkGAcgASgJEiQKCGxhc3RQb3N0GAggASgLMhIuaGRz" + 
          "ZW5zZS5QQkJCU1Bvc3QSDAoEZGVzYxgJIAEoCRIlCglhZG1pbkxpc3QYCiAD" + 
          "KAsyEi5oZHNlbnNlLlBCQkJTVXNlchINCgVpbmRleBgLIAEoBUI0Cidjb20u" + 
          "aGRzZW5zZS5uZXR3b3JrLmdhbWUucHJvdG9jb2wubW9kZWxCCUJCU1Byb3Rv" + 
          "cw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBBBSUser__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBBBSUser__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSUser, global::hdsense.PBBBSUser.Builder>(internal__static_hdsense_PBBBSUser__Descriptor,
                new string[] { "UserId", "NickName", "Avatar", "Gender", "Vip", });
        internal__static_hdsense_PBBBSDraw__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBBBSDraw__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSDraw, global::hdsense.PBBBSDraw.Builder>(internal__static_hdsense_PBBBSDraw__Descriptor,
                new string[] { "DrawActionList", "Version", "CanvasSize", });
        internal__static_hdsense_PBBBSImages__Descriptor = Descriptor.MessageTypes[2];
        internal__static_hdsense_PBBBSImages__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSImages, global::hdsense.PBBBSImages.Builder>(internal__static_hdsense_PBBBSImages__Descriptor,
                new string[] { "ImageId", "ImageUrl", "ThumbImageUrl", "StartDate", "EndDate", "Width", "Height", });
        internal__static_hdsense_PBBBSContent__Descriptor = Descriptor.MessageTypes[3];
        internal__static_hdsense_PBBBSContent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSContent, global::hdsense.PBBBSContent.Builder>(internal__static_hdsense_PBBBSContent__Descriptor,
                new string[] { "Type", "Text", "Title", "ThumbImageUrl", "ImageUrl", "Images", "DataUrl", "Duration", "DrawThumbUrl", "DrawImageUrl", "DrawData", "OpusId", });
        internal__static_hdsense_PBBBSReward__Descriptor = Descriptor.MessageTypes[4];
        internal__static_hdsense_PBBBSReward__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSReward, global::hdsense.PBBBSReward.Builder>(internal__static_hdsense_PBBBSReward__Descriptor,
                new string[] { "Bonus", "Status", "Winner", "AwardDate", "ActionId", });
        internal__static_hdsense_PBBBSPost__Descriptor = Descriptor.MessageTypes[5];
        internal__static_hdsense_PBBBSPost__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSPost, global::hdsense.PBBBSPost.Builder>(internal__static_hdsense_PBBBSPost__Descriptor,
                new string[] { "PostId", "BoardId", "AppId", "DeviceType", "ReplyCount", "SupportCount", "CreateDate", "ModifyDate", "CreateUser", "Content", "Reward", "Status", "Marked", "IsPrivate", });
        internal__static_hdsense_PBBBSPrivilege__Descriptor = Descriptor.MessageTypes[6];
        internal__static_hdsense_PBBBSPrivilege__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSPrivilege, global::hdsense.PBBBSPrivilege.Builder>(internal__static_hdsense_PBBBSPrivilege__Descriptor,
                new string[] { "BoardId", "Permission", });
        internal__static_hdsense_PBBBSActionSource__Descriptor = Descriptor.MessageTypes[7];
        internal__static_hdsense_PBBBSActionSource__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSActionSource, global::hdsense.PBBBSActionSource.Builder>(internal__static_hdsense_PBBBSActionSource__Descriptor,
                new string[] { "PostId", "PostUid", "ActionId", "ActionUid", "ActionNick", "ActionType", "BriefText", });
        internal__static_hdsense_PBBBSAction__Descriptor = Descriptor.MessageTypes[8];
        internal__static_hdsense_PBBBSAction__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSAction, global::hdsense.PBBBSAction.Builder>(internal__static_hdsense_PBBBSAction__Descriptor,
                new string[] { "ActionId", "Type", "CreateUser", "DeviceType", "CreateDate", "ReplyCount", "Content", "Source", });
        internal__static_hdsense_PBBBSBoard__Descriptor = Descriptor.MessageTypes[9];
        internal__static_hdsense_PBBBSBoard__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBBBSBoard, global::hdsense.PBBBSBoard.Builder>(internal__static_hdsense_PBBBSBoard__Descriptor,
                new string[] { "BoardId", "Type", "Name", "ActionCount", "PostCount", "Icon", "ParentBoardId", "LastPost", "Desc", "AdminList", "Index", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::hdsense.GameBasic.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSUser : pb::GeneratedMessage<PBBBSUser, PBBBSUser.Builder> {
    private PBBBSUser() { }
    private static readonly PBBBSUser defaultInstance = new PBBBSUser().MakeReadOnly();
    private static readonly string[] _pBBBSUserFieldNames = new string[] { "avatar", "gender", "nickName", "userId", "vip" };
    private static readonly uint[] _pBBBSUserFieldTags = new uint[] { 26, 32, 18, 10, 40 };
    public static PBBBSUser DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSUser DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSUser ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSUser__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSUser, PBBBSUser.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSUser__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int NickNameFieldNumber = 2;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int AvatarFieldNumber = 3;
    private bool hasAvatar;
    private string avatar_ = "";
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public string Avatar {
      get { return avatar_; }
    }
    
    public const int GenderFieldNumber = 4;
    private bool hasGender;
    private bool gender_;
    public bool HasGender {
      get { return hasGender; }
    }
    public bool Gender {
      get { return gender_; }
    }
    
    public const int VipFieldNumber = 5;
    private bool hasVip;
    private int vip_;
    public bool HasVip {
      get { return hasVip; }
    }
    public int Vip {
      get { return vip_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSUserFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[3], UserId);
      }
      if (hasNickName) {
        output.WriteString(2, field_names[2], NickName);
      }
      if (hasAvatar) {
        output.WriteString(3, field_names[0], Avatar);
      }
      if (hasGender) {
        output.WriteBool(4, field_names[1], Gender);
      }
      if (hasVip) {
        output.WriteInt32(5, field_names[4], Vip);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NickName);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Avatar);
        }
        if (hasGender) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, Gender);
        }
        if (hasVip) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Vip);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSUser ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSUser ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSUser ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSUser ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSUser ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSUser MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSUser prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSUser, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSUser cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSUser result;
      
      private PBBBSUser PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSUser original = result;
          result = new PBBBSUser();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSUser MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSUser.Descriptor; }
      }
      
      public override PBBBSUser DefaultInstanceForType {
        get { return global::hdsense.PBBBSUser.DefaultInstance; }
      }
      
      public override PBBBSUser BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSUser) {
          return MergeFrom((PBBBSUser) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSUser other) {
        if (other == global::hdsense.PBBBSUser.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasAvatar) {
          Avatar = other.Avatar;
        }
        if (other.HasGender) {
          Gender = other.Gender;
        }
        if (other.HasVip) {
          Vip = other.Vip;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSUserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSUserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 18: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 26: {
              result.hasAvatar = input.ReadString(ref result.avatar_);
              break;
            }
            case 32: {
              result.hasGender = input.ReadBool(ref result.gender_);
              break;
            }
            case 40: {
              result.hasVip = input.ReadInt32(ref result.vip_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasAvatar {
        get { return result.hasAvatar; }
      }
      public string Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = "";
        return this;
      }
      
      public bool HasGender {
        get { return result.hasGender; }
      }
      public bool Gender {
        get { return result.Gender; }
        set { SetGender(value); }
      }
      public Builder SetGender(bool value) {
        PrepareBuilder();
        result.hasGender = true;
        result.gender_ = value;
        return this;
      }
      public Builder ClearGender() {
        PrepareBuilder();
        result.hasGender = false;
        result.gender_ = false;
        return this;
      }
      
      public bool HasVip {
        get { return result.hasVip; }
      }
      public int Vip {
        get { return result.Vip; }
        set { SetVip(value); }
      }
      public Builder SetVip(int value) {
        PrepareBuilder();
        result.hasVip = true;
        result.vip_ = value;
        return this;
      }
      public Builder ClearVip() {
        PrepareBuilder();
        result.hasVip = false;
        result.vip_ = 0;
        return this;
      }
    }
    static PBBBSUser() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSDraw : pb::GeneratedMessage<PBBBSDraw, PBBBSDraw.Builder> {
    private PBBBSDraw() { }
    private static readonly PBBBSDraw defaultInstance = new PBBBSDraw().MakeReadOnly();
    private static readonly string[] _pBBBSDrawFieldNames = new string[] { "canvasSize", "drawActionList", "version" };
    private static readonly uint[] _pBBBSDrawFieldTags = new uint[] { 26, 10, 16 };
    public static PBBBSDraw DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSDraw DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSDraw ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSDraw__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSDraw, PBBBSDraw.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSDraw__FieldAccessorTable; }
    }
    
    public const int DrawActionListFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBDrawAction> drawActionList_ = new pbc::PopsicleList<global::hdsense.PBDrawAction>();
    public scg::IList<global::hdsense.PBDrawAction> DrawActionListList {
      get { return drawActionList_; }
    }
    public int DrawActionListCount {
      get { return drawActionList_.Count; }
    }
    public global::hdsense.PBDrawAction GetDrawActionList(int index) {
      return drawActionList_[index];
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int CanvasSizeFieldNumber = 3;
    private bool hasCanvasSize;
    private global::hdsense.PBSize canvasSize_;
    public bool HasCanvasSize {
      get { return hasCanvasSize; }
    }
    public global::hdsense.PBSize CanvasSize {
      get { return canvasSize_ ?? global::hdsense.PBSize.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBDrawAction element in DrawActionListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSDrawFieldNames;
      if (drawActionList_.Count > 0) {
        output.WriteMessageArray(1, field_names[1], drawActionList_);
      }
      if (hasVersion) {
        output.WriteInt32(2, field_names[2], Version);
      }
      if (hasCanvasSize) {
        output.WriteMessage(3, field_names[0], CanvasSize);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBDrawAction element in DrawActionListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        if (hasCanvasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CanvasSize);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSDraw ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSDraw ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSDraw ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSDraw ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSDraw ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSDraw ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSDraw ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSDraw ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSDraw ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSDraw ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSDraw MakeReadOnly() {
      drawActionList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSDraw prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSDraw, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSDraw cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSDraw result;
      
      private PBBBSDraw PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSDraw original = result;
          result = new PBBBSDraw();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSDraw MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSDraw.Descriptor; }
      }
      
      public override PBBBSDraw DefaultInstanceForType {
        get { return global::hdsense.PBBBSDraw.DefaultInstance; }
      }
      
      public override PBBBSDraw BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSDraw) {
          return MergeFrom((PBBBSDraw) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSDraw other) {
        if (other == global::hdsense.PBBBSDraw.DefaultInstance) return this;
        PrepareBuilder();
        if (other.drawActionList_.Count != 0) {
          result.drawActionList_.Add(other.drawActionList_);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasCanvasSize) {
          MergeCanvasSize(other.CanvasSize);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSDrawFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSDrawFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.drawActionList_, global::hdsense.PBDrawAction.DefaultInstance, extensionRegistry);
              break;
            }
            case 16: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 26: {
              global::hdsense.PBSize.Builder subBuilder = global::hdsense.PBSize.CreateBuilder();
              if (result.hasCanvasSize) {
                subBuilder.MergeFrom(CanvasSize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CanvasSize = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBDrawAction> DrawActionListList {
        get { return PrepareBuilder().drawActionList_; }
      }
      public int DrawActionListCount {
        get { return result.DrawActionListCount; }
      }
      public global::hdsense.PBDrawAction GetDrawActionList(int index) {
        return result.GetDrawActionList(index);
      }
      public Builder SetDrawActionList(int index, global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawActionList_[index] = value;
        return this;
      }
      public Builder SetDrawActionList(int index, global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawActionList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDrawActionList(global::hdsense.PBDrawAction value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.drawActionList_.Add(value);
        return this;
      }
      public Builder AddDrawActionList(global::hdsense.PBDrawAction.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.drawActionList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDrawActionList(scg::IEnumerable<global::hdsense.PBDrawAction> values) {
        PrepareBuilder();
        result.drawActionList_.Add(values);
        return this;
      }
      public Builder ClearDrawActionList() {
        PrepareBuilder();
        result.drawActionList_.Clear();
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasCanvasSize {
       get { return result.hasCanvasSize; }
      }
      public global::hdsense.PBSize CanvasSize {
        get { return result.CanvasSize; }
        set { SetCanvasSize(value); }
      }
      public Builder SetCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = value;
        return this;
      }
      public Builder SetCanvasSize(global::hdsense.PBSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCanvasSize &&
            result.canvasSize_ != global::hdsense.PBSize.DefaultInstance) {
            result.canvasSize_ = global::hdsense.PBSize.CreateBuilder(result.canvasSize_).MergeFrom(value).BuildPartial();
        } else {
          result.canvasSize_ = value;
        }
        result.hasCanvasSize = true;
        return this;
      }
      public Builder ClearCanvasSize() {
        PrepareBuilder();
        result.hasCanvasSize = false;
        result.canvasSize_ = null;
        return this;
      }
    }
    static PBBBSDraw() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSImages : pb::GeneratedMessage<PBBBSImages, PBBBSImages.Builder> {
    private PBBBSImages() { }
    private static readonly PBBBSImages defaultInstance = new PBBBSImages().MakeReadOnly();
    private static readonly string[] _pBBBSImagesFieldNames = new string[] { "endDate", "height", "imageId", "imageUrl", "startDate", "thumbImageUrl", "width" };
    private static readonly uint[] _pBBBSImagesFieldTags = new uint[] { 40, 93, 8, 18, 32, 26, 85 };
    public static PBBBSImages DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSImages DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSImages ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSImages__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSImages, PBBBSImages.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSImages__FieldAccessorTable; }
    }
    
    public const int ImageIdFieldNumber = 1;
    private bool hasImageId;
    private int imageId_;
    public bool HasImageId {
      get { return hasImageId; }
    }
    public int ImageId {
      get { return imageId_; }
    }
    
    public const int ImageUrlFieldNumber = 2;
    private bool hasImageUrl;
    private string imageUrl_ = "";
    public bool HasImageUrl {
      get { return hasImageUrl; }
    }
    public string ImageUrl {
      get { return imageUrl_; }
    }
    
    public const int ThumbImageUrlFieldNumber = 3;
    private bool hasThumbImageUrl;
    private string thumbImageUrl_ = "";
    public bool HasThumbImageUrl {
      get { return hasThumbImageUrl; }
    }
    public string ThumbImageUrl {
      get { return thumbImageUrl_; }
    }
    
    public const int StartDateFieldNumber = 4;
    private bool hasStartDate;
    private int startDate_;
    public bool HasStartDate {
      get { return hasStartDate; }
    }
    public int StartDate {
      get { return startDate_; }
    }
    
    public const int EndDateFieldNumber = 5;
    private bool hasEndDate;
    private int endDate_;
    public bool HasEndDate {
      get { return hasEndDate; }
    }
    public int EndDate {
      get { return endDate_; }
    }
    
    public const int WidthFieldNumber = 10;
    private bool hasWidth;
    private float width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public float Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 11;
    private bool hasHeight;
    private float height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public float Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasImageId) return false;
        if (!hasImageUrl) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSImagesFieldNames;
      if (hasImageId) {
        output.WriteInt32(1, field_names[2], ImageId);
      }
      if (hasImageUrl) {
        output.WriteString(2, field_names[3], ImageUrl);
      }
      if (hasThumbImageUrl) {
        output.WriteString(3, field_names[5], ThumbImageUrl);
      }
      if (hasStartDate) {
        output.WriteInt32(4, field_names[4], StartDate);
      }
      if (hasEndDate) {
        output.WriteInt32(5, field_names[0], EndDate);
      }
      if (hasWidth) {
        output.WriteFloat(10, field_names[6], Width);
      }
      if (hasHeight) {
        output.WriteFloat(11, field_names[1], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasImageId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ImageId);
        }
        if (hasImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ImageUrl);
        }
        if (hasThumbImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ThumbImageUrl);
        }
        if (hasStartDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, StartDate);
        }
        if (hasEndDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, EndDate);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeFloatSize(10, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeFloatSize(11, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSImages ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSImages ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSImages ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSImages ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSImages ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSImages ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSImages ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSImages ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSImages ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSImages ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSImages MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSImages prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSImages, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSImages cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSImages result;
      
      private PBBBSImages PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSImages original = result;
          result = new PBBBSImages();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSImages MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSImages.Descriptor; }
      }
      
      public override PBBBSImages DefaultInstanceForType {
        get { return global::hdsense.PBBBSImages.DefaultInstance; }
      }
      
      public override PBBBSImages BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSImages) {
          return MergeFrom((PBBBSImages) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSImages other) {
        if (other == global::hdsense.PBBBSImages.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasImageId) {
          ImageId = other.ImageId;
        }
        if (other.HasImageUrl) {
          ImageUrl = other.ImageUrl;
        }
        if (other.HasThumbImageUrl) {
          ThumbImageUrl = other.ThumbImageUrl;
        }
        if (other.HasStartDate) {
          StartDate = other.StartDate;
        }
        if (other.HasEndDate) {
          EndDate = other.EndDate;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSImagesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSImagesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasImageId = input.ReadInt32(ref result.imageId_);
              break;
            }
            case 18: {
              result.hasImageUrl = input.ReadString(ref result.imageUrl_);
              break;
            }
            case 26: {
              result.hasThumbImageUrl = input.ReadString(ref result.thumbImageUrl_);
              break;
            }
            case 32: {
              result.hasStartDate = input.ReadInt32(ref result.startDate_);
              break;
            }
            case 40: {
              result.hasEndDate = input.ReadInt32(ref result.endDate_);
              break;
            }
            case 85: {
              result.hasWidth = input.ReadFloat(ref result.width_);
              break;
            }
            case 93: {
              result.hasHeight = input.ReadFloat(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasImageId {
        get { return result.hasImageId; }
      }
      public int ImageId {
        get { return result.ImageId; }
        set { SetImageId(value); }
      }
      public Builder SetImageId(int value) {
        PrepareBuilder();
        result.hasImageId = true;
        result.imageId_ = value;
        return this;
      }
      public Builder ClearImageId() {
        PrepareBuilder();
        result.hasImageId = false;
        result.imageId_ = 0;
        return this;
      }
      
      public bool HasImageUrl {
        get { return result.hasImageUrl; }
      }
      public string ImageUrl {
        get { return result.ImageUrl; }
        set { SetImageUrl(value); }
      }
      public Builder SetImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageUrl = true;
        result.imageUrl_ = value;
        return this;
      }
      public Builder ClearImageUrl() {
        PrepareBuilder();
        result.hasImageUrl = false;
        result.imageUrl_ = "";
        return this;
      }
      
      public bool HasThumbImageUrl {
        get { return result.hasThumbImageUrl; }
      }
      public string ThumbImageUrl {
        get { return result.ThumbImageUrl; }
        set { SetThumbImageUrl(value); }
      }
      public Builder SetThumbImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThumbImageUrl = true;
        result.thumbImageUrl_ = value;
        return this;
      }
      public Builder ClearThumbImageUrl() {
        PrepareBuilder();
        result.hasThumbImageUrl = false;
        result.thumbImageUrl_ = "";
        return this;
      }
      
      public bool HasStartDate {
        get { return result.hasStartDate; }
      }
      public int StartDate {
        get { return result.StartDate; }
        set { SetStartDate(value); }
      }
      public Builder SetStartDate(int value) {
        PrepareBuilder();
        result.hasStartDate = true;
        result.startDate_ = value;
        return this;
      }
      public Builder ClearStartDate() {
        PrepareBuilder();
        result.hasStartDate = false;
        result.startDate_ = 0;
        return this;
      }
      
      public bool HasEndDate {
        get { return result.hasEndDate; }
      }
      public int EndDate {
        get { return result.EndDate; }
        set { SetEndDate(value); }
      }
      public Builder SetEndDate(int value) {
        PrepareBuilder();
        result.hasEndDate = true;
        result.endDate_ = value;
        return this;
      }
      public Builder ClearEndDate() {
        PrepareBuilder();
        result.hasEndDate = false;
        result.endDate_ = 0;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public float Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(float value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0F;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public float Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(float value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0F;
        return this;
      }
    }
    static PBBBSImages() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSContent : pb::GeneratedMessage<PBBBSContent, PBBBSContent.Builder> {
    private PBBBSContent() { }
    private static readonly PBBBSContent defaultInstance = new PBBBSContent().MakeReadOnly();
    private static readonly string[] _pBBBSContentFieldNames = new string[] { "dataUrl", "drawData", "drawImageUrl", "drawThumbUrl", "duration", "imageUrl", "images", "opusId", "text", "thumbImageUrl", "title", "type" };
    private static readonly uint[] _pBBBSContentFieldTags = new uint[] { 130, 178, 170, 162, 136, 90, 122, 242, 18, 82, 26, 8 };
    public static PBBBSContent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSContent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSContent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSContent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSContent, PBBBSContent.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSContent__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int TextFieldNumber = 2;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int TitleFieldNumber = 3;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int ThumbImageUrlFieldNumber = 10;
    private bool hasThumbImageUrl;
    private string thumbImageUrl_ = "";
    public bool HasThumbImageUrl {
      get { return hasThumbImageUrl; }
    }
    public string ThumbImageUrl {
      get { return thumbImageUrl_; }
    }
    
    public const int ImageUrlFieldNumber = 11;
    private bool hasImageUrl;
    private string imageUrl_ = "";
    public bool HasImageUrl {
      get { return hasImageUrl; }
    }
    public string ImageUrl {
      get { return imageUrl_; }
    }
    
    public const int ImagesFieldNumber = 15;
    private pbc::PopsicleList<global::hdsense.PBBBSImages> images_ = new pbc::PopsicleList<global::hdsense.PBBBSImages>();
    public scg::IList<global::hdsense.PBBBSImages> ImagesList {
      get { return images_; }
    }
    public int ImagesCount {
      get { return images_.Count; }
    }
    public global::hdsense.PBBBSImages GetImages(int index) {
      return images_[index];
    }
    
    public const int DataUrlFieldNumber = 16;
    private bool hasDataUrl;
    private string dataUrl_ = "";
    public bool HasDataUrl {
      get { return hasDataUrl; }
    }
    public string DataUrl {
      get { return dataUrl_; }
    }
    
    public const int DurationFieldNumber = 17;
    private bool hasDuration;
    private int duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public int Duration {
      get { return duration_; }
    }
    
    public const int DrawThumbUrlFieldNumber = 20;
    private bool hasDrawThumbUrl;
    private string drawThumbUrl_ = "";
    public bool HasDrawThumbUrl {
      get { return hasDrawThumbUrl; }
    }
    public string DrawThumbUrl {
      get { return drawThumbUrl_; }
    }
    
    public const int DrawImageUrlFieldNumber = 21;
    private bool hasDrawImageUrl;
    private string drawImageUrl_ = "";
    public bool HasDrawImageUrl {
      get { return hasDrawImageUrl; }
    }
    public string DrawImageUrl {
      get { return drawImageUrl_; }
    }
    
    public const int DrawDataFieldNumber = 22;
    private bool hasDrawData;
    private global::hdsense.PBBBSDraw drawData_;
    public bool HasDrawData {
      get { return hasDrawData; }
    }
    public global::hdsense.PBBBSDraw DrawData {
      get { return drawData_ ?? global::hdsense.PBBBSDraw.DefaultInstance; }
    }
    
    public const int OpusIdFieldNumber = 30;
    private bool hasOpusId;
    private string opusId_ = "";
    public bool HasOpusId {
      get { return hasOpusId; }
    }
    public string OpusId {
      get { return opusId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        foreach (global::hdsense.PBBBSImages element in ImagesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasDrawData) {
          if (!DrawData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSContentFieldNames;
      if (hasType) {
        output.WriteInt32(1, field_names[11], Type);
      }
      if (hasText) {
        output.WriteString(2, field_names[8], Text);
      }
      if (hasTitle) {
        output.WriteString(3, field_names[10], Title);
      }
      if (hasThumbImageUrl) {
        output.WriteString(10, field_names[9], ThumbImageUrl);
      }
      if (hasImageUrl) {
        output.WriteString(11, field_names[5], ImageUrl);
      }
      if (images_.Count > 0) {
        output.WriteMessageArray(15, field_names[6], images_);
      }
      if (hasDataUrl) {
        output.WriteString(16, field_names[0], DataUrl);
      }
      if (hasDuration) {
        output.WriteInt32(17, field_names[4], Duration);
      }
      if (hasDrawThumbUrl) {
        output.WriteString(20, field_names[3], DrawThumbUrl);
      }
      if (hasDrawImageUrl) {
        output.WriteString(21, field_names[2], DrawImageUrl);
      }
      if (hasDrawData) {
        output.WriteMessage(22, field_names[1], DrawData);
      }
      if (hasOpusId) {
        output.WriteString(30, field_names[7], OpusId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Text);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Title);
        }
        if (hasThumbImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(10, ThumbImageUrl);
        }
        if (hasImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ImageUrl);
        }
        foreach (global::hdsense.PBBBSImages element in ImagesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, element);
        }
        if (hasDataUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(16, DataUrl);
        }
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, Duration);
        }
        if (hasDrawThumbUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(20, DrawThumbUrl);
        }
        if (hasDrawImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(21, DrawImageUrl);
        }
        if (hasDrawData) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, DrawData);
        }
        if (hasOpusId) {
          size += pb::CodedOutputStream.ComputeStringSize(30, OpusId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSContent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSContent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSContent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSContent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSContent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSContent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSContent MakeReadOnly() {
      images_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSContent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSContent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSContent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSContent result;
      
      private PBBBSContent PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSContent original = result;
          result = new PBBBSContent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSContent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSContent.Descriptor; }
      }
      
      public override PBBBSContent DefaultInstanceForType {
        get { return global::hdsense.PBBBSContent.DefaultInstance; }
      }
      
      public override PBBBSContent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSContent) {
          return MergeFrom((PBBBSContent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSContent other) {
        if (other == global::hdsense.PBBBSContent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasThumbImageUrl) {
          ThumbImageUrl = other.ThumbImageUrl;
        }
        if (other.HasImageUrl) {
          ImageUrl = other.ImageUrl;
        }
        if (other.images_.Count != 0) {
          result.images_.Add(other.images_);
        }
        if (other.HasDataUrl) {
          DataUrl = other.DataUrl;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasDrawThumbUrl) {
          DrawThumbUrl = other.DrawThumbUrl;
        }
        if (other.HasDrawImageUrl) {
          DrawImageUrl = other.DrawImageUrl;
        }
        if (other.HasDrawData) {
          MergeDrawData(other.DrawData);
        }
        if (other.HasOpusId) {
          OpusId = other.OpusId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSContentFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSContentFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 18: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 26: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 82: {
              result.hasThumbImageUrl = input.ReadString(ref result.thumbImageUrl_);
              break;
            }
            case 90: {
              result.hasImageUrl = input.ReadString(ref result.imageUrl_);
              break;
            }
            case 122: {
              input.ReadMessageArray(tag, field_name, result.images_, global::hdsense.PBBBSImages.DefaultInstance, extensionRegistry);
              break;
            }
            case 130: {
              result.hasDataUrl = input.ReadString(ref result.dataUrl_);
              break;
            }
            case 136: {
              result.hasDuration = input.ReadInt32(ref result.duration_);
              break;
            }
            case 162: {
              result.hasDrawThumbUrl = input.ReadString(ref result.drawThumbUrl_);
              break;
            }
            case 170: {
              result.hasDrawImageUrl = input.ReadString(ref result.drawImageUrl_);
              break;
            }
            case 178: {
              global::hdsense.PBBBSDraw.Builder subBuilder = global::hdsense.PBBBSDraw.CreateBuilder();
              if (result.hasDrawData) {
                subBuilder.MergeFrom(DrawData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DrawData = subBuilder.BuildPartial();
              break;
            }
            case 242: {
              result.hasOpusId = input.ReadString(ref result.opusId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasThumbImageUrl {
        get { return result.hasThumbImageUrl; }
      }
      public string ThumbImageUrl {
        get { return result.ThumbImageUrl; }
        set { SetThumbImageUrl(value); }
      }
      public Builder SetThumbImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThumbImageUrl = true;
        result.thumbImageUrl_ = value;
        return this;
      }
      public Builder ClearThumbImageUrl() {
        PrepareBuilder();
        result.hasThumbImageUrl = false;
        result.thumbImageUrl_ = "";
        return this;
      }
      
      public bool HasImageUrl {
        get { return result.hasImageUrl; }
      }
      public string ImageUrl {
        get { return result.ImageUrl; }
        set { SetImageUrl(value); }
      }
      public Builder SetImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageUrl = true;
        result.imageUrl_ = value;
        return this;
      }
      public Builder ClearImageUrl() {
        PrepareBuilder();
        result.hasImageUrl = false;
        result.imageUrl_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBBSImages> ImagesList {
        get { return PrepareBuilder().images_; }
      }
      public int ImagesCount {
        get { return result.ImagesCount; }
      }
      public global::hdsense.PBBBSImages GetImages(int index) {
        return result.GetImages(index);
      }
      public Builder SetImages(int index, global::hdsense.PBBBSImages value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.images_[index] = value;
        return this;
      }
      public Builder SetImages(int index, global::hdsense.PBBBSImages.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.images_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddImages(global::hdsense.PBBBSImages value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.images_.Add(value);
        return this;
      }
      public Builder AddImages(global::hdsense.PBBBSImages.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.images_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeImages(scg::IEnumerable<global::hdsense.PBBBSImages> values) {
        PrepareBuilder();
        result.images_.Add(values);
        return this;
      }
      public Builder ClearImages() {
        PrepareBuilder();
        result.images_.Clear();
        return this;
      }
      
      public bool HasDataUrl {
        get { return result.hasDataUrl; }
      }
      public string DataUrl {
        get { return result.DataUrl; }
        set { SetDataUrl(value); }
      }
      public Builder SetDataUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDataUrl = true;
        result.dataUrl_ = value;
        return this;
      }
      public Builder ClearDataUrl() {
        PrepareBuilder();
        result.hasDataUrl = false;
        result.dataUrl_ = "";
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public int Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(int value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0;
        return this;
      }
      
      public bool HasDrawThumbUrl {
        get { return result.hasDrawThumbUrl; }
      }
      public string DrawThumbUrl {
        get { return result.DrawThumbUrl; }
        set { SetDrawThumbUrl(value); }
      }
      public Builder SetDrawThumbUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrawThumbUrl = true;
        result.drawThumbUrl_ = value;
        return this;
      }
      public Builder ClearDrawThumbUrl() {
        PrepareBuilder();
        result.hasDrawThumbUrl = false;
        result.drawThumbUrl_ = "";
        return this;
      }
      
      public bool HasDrawImageUrl {
        get { return result.hasDrawImageUrl; }
      }
      public string DrawImageUrl {
        get { return result.DrawImageUrl; }
        set { SetDrawImageUrl(value); }
      }
      public Builder SetDrawImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrawImageUrl = true;
        result.drawImageUrl_ = value;
        return this;
      }
      public Builder ClearDrawImageUrl() {
        PrepareBuilder();
        result.hasDrawImageUrl = false;
        result.drawImageUrl_ = "";
        return this;
      }
      
      public bool HasDrawData {
       get { return result.hasDrawData; }
      }
      public global::hdsense.PBBBSDraw DrawData {
        get { return result.DrawData; }
        set { SetDrawData(value); }
      }
      public Builder SetDrawData(global::hdsense.PBBBSDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDrawData = true;
        result.drawData_ = value;
        return this;
      }
      public Builder SetDrawData(global::hdsense.PBBBSDraw.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDrawData = true;
        result.drawData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDrawData(global::hdsense.PBBBSDraw value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDrawData &&
            result.drawData_ != global::hdsense.PBBBSDraw.DefaultInstance) {
            result.drawData_ = global::hdsense.PBBBSDraw.CreateBuilder(result.drawData_).MergeFrom(value).BuildPartial();
        } else {
          result.drawData_ = value;
        }
        result.hasDrawData = true;
        return this;
      }
      public Builder ClearDrawData() {
        PrepareBuilder();
        result.hasDrawData = false;
        result.drawData_ = null;
        return this;
      }
      
      public bool HasOpusId {
        get { return result.hasOpusId; }
      }
      public string OpusId {
        get { return result.OpusId; }
        set { SetOpusId(value); }
      }
      public Builder SetOpusId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusId = true;
        result.opusId_ = value;
        return this;
      }
      public Builder ClearOpusId() {
        PrepareBuilder();
        result.hasOpusId = false;
        result.opusId_ = "";
        return this;
      }
    }
    static PBBBSContent() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSReward : pb::GeneratedMessage<PBBBSReward, PBBBSReward.Builder> {
    private PBBBSReward() { }
    private static readonly PBBBSReward defaultInstance = new PBBBSReward().MakeReadOnly();
    private static readonly string[] _pBBBSRewardFieldNames = new string[] { "actionId", "awardDate", "bonus", "status", "winner" };
    private static readonly uint[] _pBBBSRewardFieldTags = new uint[] { 42, 32, 8, 16, 26 };
    public static PBBBSReward DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSReward DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSReward ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSReward__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSReward, PBBBSReward.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSReward__FieldAccessorTable; }
    }
    
    public const int BonusFieldNumber = 1;
    private bool hasBonus;
    private int bonus_;
    public bool HasBonus {
      get { return hasBonus; }
    }
    public int Bonus {
      get { return bonus_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int WinnerFieldNumber = 3;
    private bool hasWinner;
    private global::hdsense.PBBBSUser winner_;
    public bool HasWinner {
      get { return hasWinner; }
    }
    public global::hdsense.PBBBSUser Winner {
      get { return winner_ ?? global::hdsense.PBBBSUser.DefaultInstance; }
    }
    
    public const int AwardDateFieldNumber = 4;
    private bool hasAwardDate;
    private int awardDate_;
    public bool HasAwardDate {
      get { return hasAwardDate; }
    }
    public int AwardDate {
      get { return awardDate_; }
    }
    
    public const int ActionIdFieldNumber = 5;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBonus) return false;
        if (!hasStatus) return false;
        if (HasWinner) {
          if (!Winner.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSRewardFieldNames;
      if (hasBonus) {
        output.WriteInt32(1, field_names[2], Bonus);
      }
      if (hasStatus) {
        output.WriteInt32(2, field_names[3], Status);
      }
      if (hasWinner) {
        output.WriteMessage(3, field_names[4], Winner);
      }
      if (hasAwardDate) {
        output.WriteInt32(4, field_names[1], AwardDate);
      }
      if (hasActionId) {
        output.WriteString(5, field_names[0], ActionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBonus) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Bonus);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
        }
        if (hasWinner) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Winner);
        }
        if (hasAwardDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, AwardDate);
        }
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ActionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSReward ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSReward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSReward ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSReward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSReward ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSReward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSReward ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSReward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSReward ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSReward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSReward MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSReward prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSReward, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSReward cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSReward result;
      
      private PBBBSReward PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSReward original = result;
          result = new PBBBSReward();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSReward MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSReward.Descriptor; }
      }
      
      public override PBBBSReward DefaultInstanceForType {
        get { return global::hdsense.PBBBSReward.DefaultInstance; }
      }
      
      public override PBBBSReward BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSReward) {
          return MergeFrom((PBBBSReward) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSReward other) {
        if (other == global::hdsense.PBBBSReward.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBonus) {
          Bonus = other.Bonus;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasWinner) {
          MergeWinner(other.Winner);
        }
        if (other.HasAwardDate) {
          AwardDate = other.AwardDate;
        }
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSRewardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSRewardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBonus = input.ReadInt32(ref result.bonus_);
              break;
            }
            case 16: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 26: {
              global::hdsense.PBBBSUser.Builder subBuilder = global::hdsense.PBBBSUser.CreateBuilder();
              if (result.hasWinner) {
                subBuilder.MergeFrom(Winner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Winner = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasAwardDate = input.ReadInt32(ref result.awardDate_);
              break;
            }
            case 42: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBonus {
        get { return result.hasBonus; }
      }
      public int Bonus {
        get { return result.Bonus; }
        set { SetBonus(value); }
      }
      public Builder SetBonus(int value) {
        PrepareBuilder();
        result.hasBonus = true;
        result.bonus_ = value;
        return this;
      }
      public Builder ClearBonus() {
        PrepareBuilder();
        result.hasBonus = false;
        result.bonus_ = 0;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasWinner {
       get { return result.hasWinner; }
      }
      public global::hdsense.PBBBSUser Winner {
        get { return result.Winner; }
        set { SetWinner(value); }
      }
      public Builder SetWinner(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWinner = true;
        result.winner_ = value;
        return this;
      }
      public Builder SetWinner(global::hdsense.PBBBSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWinner = true;
        result.winner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWinner(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWinner &&
            result.winner_ != global::hdsense.PBBBSUser.DefaultInstance) {
            result.winner_ = global::hdsense.PBBBSUser.CreateBuilder(result.winner_).MergeFrom(value).BuildPartial();
        } else {
          result.winner_ = value;
        }
        result.hasWinner = true;
        return this;
      }
      public Builder ClearWinner() {
        PrepareBuilder();
        result.hasWinner = false;
        result.winner_ = null;
        return this;
      }
      
      public bool HasAwardDate {
        get { return result.hasAwardDate; }
      }
      public int AwardDate {
        get { return result.AwardDate; }
        set { SetAwardDate(value); }
      }
      public Builder SetAwardDate(int value) {
        PrepareBuilder();
        result.hasAwardDate = true;
        result.awardDate_ = value;
        return this;
      }
      public Builder ClearAwardDate() {
        PrepareBuilder();
        result.hasAwardDate = false;
        result.awardDate_ = 0;
        return this;
      }
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
    }
    static PBBBSReward() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSPost : pb::GeneratedMessage<PBBBSPost, PBBBSPost.Builder> {
    private PBBBSPost() { }
    private static readonly PBBBSPost defaultInstance = new PBBBSPost().MakeReadOnly();
    private static readonly string[] _pBBBSPostFieldNames = new string[] { "appId", "boardId", "content", "createDate", "createUser", "deviceType", "isPrivate", "marked", "modifyDate", "postId", "replyCount", "reward", "status", "supportCount" };
    private static readonly uint[] _pBBBSPostFieldTags = new uint[] { 26, 18, 82, 56, 74, 32, 112, 104, 64, 10, 40, 90, 96, 48 };
    public static PBBBSPost DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSPost DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSPost ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSPost__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSPost, PBBBSPost.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSPost__FieldAccessorTable; }
    }
    
    public const int PostIdFieldNumber = 1;
    private bool hasPostId;
    private string postId_ = "";
    public bool HasPostId {
      get { return hasPostId; }
    }
    public string PostId {
      get { return postId_; }
    }
    
    public const int BoardIdFieldNumber = 2;
    private bool hasBoardId;
    private string boardId_ = "";
    public bool HasBoardId {
      get { return hasBoardId; }
    }
    public string BoardId {
      get { return boardId_; }
    }
    
    public const int AppIdFieldNumber = 3;
    private bool hasAppId;
    private string appId_ = "";
    public bool HasAppId {
      get { return hasAppId; }
    }
    public string AppId {
      get { return appId_; }
    }
    
    public const int DeviceTypeFieldNumber = 4;
    private bool hasDeviceType;
    private int deviceType_;
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public int DeviceType {
      get { return deviceType_; }
    }
    
    public const int ReplyCountFieldNumber = 5;
    private bool hasReplyCount;
    private int replyCount_;
    public bool HasReplyCount {
      get { return hasReplyCount; }
    }
    public int ReplyCount {
      get { return replyCount_; }
    }
    
    public const int SupportCountFieldNumber = 6;
    private bool hasSupportCount;
    private int supportCount_;
    public bool HasSupportCount {
      get { return hasSupportCount; }
    }
    public int SupportCount {
      get { return supportCount_; }
    }
    
    public const int CreateDateFieldNumber = 7;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int ModifyDateFieldNumber = 8;
    private bool hasModifyDate;
    private int modifyDate_;
    public bool HasModifyDate {
      get { return hasModifyDate; }
    }
    public int ModifyDate {
      get { return modifyDate_; }
    }
    
    public const int CreateUserFieldNumber = 9;
    private bool hasCreateUser;
    private global::hdsense.PBBBSUser createUser_;
    public bool HasCreateUser {
      get { return hasCreateUser; }
    }
    public global::hdsense.PBBBSUser CreateUser {
      get { return createUser_ ?? global::hdsense.PBBBSUser.DefaultInstance; }
    }
    
    public const int ContentFieldNumber = 10;
    private bool hasContent;
    private global::hdsense.PBBBSContent content_;
    public bool HasContent {
      get { return hasContent; }
    }
    public global::hdsense.PBBBSContent Content {
      get { return content_ ?? global::hdsense.PBBBSContent.DefaultInstance; }
    }
    
    public const int RewardFieldNumber = 11;
    private bool hasReward;
    private global::hdsense.PBBBSReward reward_;
    public bool HasReward {
      get { return hasReward; }
    }
    public global::hdsense.PBBBSReward Reward {
      get { return reward_ ?? global::hdsense.PBBBSReward.DefaultInstance; }
    }
    
    public const int StatusFieldNumber = 12;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int MarkedFieldNumber = 13;
    private bool hasMarked;
    private bool marked_;
    public bool HasMarked {
      get { return hasMarked; }
    }
    public bool Marked {
      get { return marked_; }
    }
    
    public const int IsPrivateFieldNumber = 14;
    private bool hasIsPrivate;
    private bool isPrivate_;
    public bool HasIsPrivate {
      get { return hasIsPrivate; }
    }
    public bool IsPrivate {
      get { return isPrivate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPostId) return false;
        if (!hasBoardId) return false;
        if (!hasAppId) return false;
        if (!hasDeviceType) return false;
        if (!hasReplyCount) return false;
        if (!hasSupportCount) return false;
        if (!hasCreateDate) return false;
        if (!hasModifyDate) return false;
        if (!hasCreateUser) return false;
        if (!hasContent) return false;
        if (!CreateUser.IsInitialized) return false;
        if (!Content.IsInitialized) return false;
        if (HasReward) {
          if (!Reward.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSPostFieldNames;
      if (hasPostId) {
        output.WriteString(1, field_names[9], PostId);
      }
      if (hasBoardId) {
        output.WriteString(2, field_names[1], BoardId);
      }
      if (hasAppId) {
        output.WriteString(3, field_names[0], AppId);
      }
      if (hasDeviceType) {
        output.WriteInt32(4, field_names[5], DeviceType);
      }
      if (hasReplyCount) {
        output.WriteInt32(5, field_names[10], ReplyCount);
      }
      if (hasSupportCount) {
        output.WriteInt32(6, field_names[13], SupportCount);
      }
      if (hasCreateDate) {
        output.WriteInt32(7, field_names[3], CreateDate);
      }
      if (hasModifyDate) {
        output.WriteInt32(8, field_names[8], ModifyDate);
      }
      if (hasCreateUser) {
        output.WriteMessage(9, field_names[4], CreateUser);
      }
      if (hasContent) {
        output.WriteMessage(10, field_names[2], Content);
      }
      if (hasReward) {
        output.WriteMessage(11, field_names[11], Reward);
      }
      if (hasStatus) {
        output.WriteInt32(12, field_names[12], Status);
      }
      if (hasMarked) {
        output.WriteBool(13, field_names[7], Marked);
      }
      if (hasIsPrivate) {
        output.WriteBool(14, field_names[6], IsPrivate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPostId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PostId);
        }
        if (hasBoardId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BoardId);
        }
        if (hasAppId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, AppId);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, DeviceType);
        }
        if (hasReplyCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ReplyCount);
        }
        if (hasSupportCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, SupportCount);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, CreateDate);
        }
        if (hasModifyDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, ModifyDate);
        }
        if (hasCreateUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, CreateUser);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, Content);
        }
        if (hasReward) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, Reward);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, Status);
        }
        if (hasMarked) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, Marked);
        }
        if (hasIsPrivate) {
          size += pb::CodedOutputStream.ComputeBoolSize(14, IsPrivate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSPost ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSPost ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSPost ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSPost ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSPost ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSPost ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSPost ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSPost ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSPost ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSPost ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSPost MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSPost prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSPost, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSPost cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSPost result;
      
      private PBBBSPost PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSPost original = result;
          result = new PBBBSPost();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSPost MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSPost.Descriptor; }
      }
      
      public override PBBBSPost DefaultInstanceForType {
        get { return global::hdsense.PBBBSPost.DefaultInstance; }
      }
      
      public override PBBBSPost BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSPost) {
          return MergeFrom((PBBBSPost) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSPost other) {
        if (other == global::hdsense.PBBBSPost.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPostId) {
          PostId = other.PostId;
        }
        if (other.HasBoardId) {
          BoardId = other.BoardId;
        }
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasReplyCount) {
          ReplyCount = other.ReplyCount;
        }
        if (other.HasSupportCount) {
          SupportCount = other.SupportCount;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasModifyDate) {
          ModifyDate = other.ModifyDate;
        }
        if (other.HasCreateUser) {
          MergeCreateUser(other.CreateUser);
        }
        if (other.HasContent) {
          MergeContent(other.Content);
        }
        if (other.HasReward) {
          MergeReward(other.Reward);
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasMarked) {
          Marked = other.Marked;
        }
        if (other.HasIsPrivate) {
          IsPrivate = other.IsPrivate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSPostFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSPostFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPostId = input.ReadString(ref result.postId_);
              break;
            }
            case 18: {
              result.hasBoardId = input.ReadString(ref result.boardId_);
              break;
            }
            case 26: {
              result.hasAppId = input.ReadString(ref result.appId_);
              break;
            }
            case 32: {
              result.hasDeviceType = input.ReadInt32(ref result.deviceType_);
              break;
            }
            case 40: {
              result.hasReplyCount = input.ReadInt32(ref result.replyCount_);
              break;
            }
            case 48: {
              result.hasSupportCount = input.ReadInt32(ref result.supportCount_);
              break;
            }
            case 56: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 64: {
              result.hasModifyDate = input.ReadInt32(ref result.modifyDate_);
              break;
            }
            case 74: {
              global::hdsense.PBBBSUser.Builder subBuilder = global::hdsense.PBBBSUser.CreateBuilder();
              if (result.hasCreateUser) {
                subBuilder.MergeFrom(CreateUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreateUser = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::hdsense.PBBBSContent.Builder subBuilder = global::hdsense.PBBBSContent.CreateBuilder();
              if (result.hasContent) {
                subBuilder.MergeFrom(Content);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Content = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::hdsense.PBBBSReward.Builder subBuilder = global::hdsense.PBBBSReward.CreateBuilder();
              if (result.hasReward) {
                subBuilder.MergeFrom(Reward);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Reward = subBuilder.BuildPartial();
              break;
            }
            case 96: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 104: {
              result.hasMarked = input.ReadBool(ref result.marked_);
              break;
            }
            case 112: {
              result.hasIsPrivate = input.ReadBool(ref result.isPrivate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPostId {
        get { return result.hasPostId; }
      }
      public string PostId {
        get { return result.PostId; }
        set { SetPostId(value); }
      }
      public Builder SetPostId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPostId = true;
        result.postId_ = value;
        return this;
      }
      public Builder ClearPostId() {
        PrepareBuilder();
        result.hasPostId = false;
        result.postId_ = "";
        return this;
      }
      
      public bool HasBoardId {
        get { return result.hasBoardId; }
      }
      public string BoardId {
        get { return result.BoardId; }
        set { SetBoardId(value); }
      }
      public Builder SetBoardId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBoardId = true;
        result.boardId_ = value;
        return this;
      }
      public Builder ClearBoardId() {
        PrepareBuilder();
        result.hasBoardId = false;
        result.boardId_ = "";
        return this;
      }
      
      public bool HasAppId {
        get { return result.hasAppId; }
      }
      public string AppId {
        get { return result.AppId; }
        set { SetAppId(value); }
      }
      public Builder SetAppId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppId = true;
        result.appId_ = value;
        return this;
      }
      public Builder ClearAppId() {
        PrepareBuilder();
        result.hasAppId = false;
        result.appId_ = "";
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public int DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(int value) {
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = 0;
        return this;
      }
      
      public bool HasReplyCount {
        get { return result.hasReplyCount; }
      }
      public int ReplyCount {
        get { return result.ReplyCount; }
        set { SetReplyCount(value); }
      }
      public Builder SetReplyCount(int value) {
        PrepareBuilder();
        result.hasReplyCount = true;
        result.replyCount_ = value;
        return this;
      }
      public Builder ClearReplyCount() {
        PrepareBuilder();
        result.hasReplyCount = false;
        result.replyCount_ = 0;
        return this;
      }
      
      public bool HasSupportCount {
        get { return result.hasSupportCount; }
      }
      public int SupportCount {
        get { return result.SupportCount; }
        set { SetSupportCount(value); }
      }
      public Builder SetSupportCount(int value) {
        PrepareBuilder();
        result.hasSupportCount = true;
        result.supportCount_ = value;
        return this;
      }
      public Builder ClearSupportCount() {
        PrepareBuilder();
        result.hasSupportCount = false;
        result.supportCount_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasModifyDate {
        get { return result.hasModifyDate; }
      }
      public int ModifyDate {
        get { return result.ModifyDate; }
        set { SetModifyDate(value); }
      }
      public Builder SetModifyDate(int value) {
        PrepareBuilder();
        result.hasModifyDate = true;
        result.modifyDate_ = value;
        return this;
      }
      public Builder ClearModifyDate() {
        PrepareBuilder();
        result.hasModifyDate = false;
        result.modifyDate_ = 0;
        return this;
      }
      
      public bool HasCreateUser {
       get { return result.hasCreateUser; }
      }
      public global::hdsense.PBBBSUser CreateUser {
        get { return result.CreateUser; }
        set { SetCreateUser(value); }
      }
      public Builder SetCreateUser(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreateUser = true;
        result.createUser_ = value;
        return this;
      }
      public Builder SetCreateUser(global::hdsense.PBBBSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreateUser = true;
        result.createUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreateUser(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreateUser &&
            result.createUser_ != global::hdsense.PBBBSUser.DefaultInstance) {
            result.createUser_ = global::hdsense.PBBBSUser.CreateBuilder(result.createUser_).MergeFrom(value).BuildPartial();
        } else {
          result.createUser_ = value;
        }
        result.hasCreateUser = true;
        return this;
      }
      public Builder ClearCreateUser() {
        PrepareBuilder();
        result.hasCreateUser = false;
        result.createUser_ = null;
        return this;
      }
      
      public bool HasContent {
       get { return result.hasContent; }
      }
      public global::hdsense.PBBBSContent Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(global::hdsense.PBBBSContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder SetContent(global::hdsense.PBBBSContent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContent(global::hdsense.PBBBSContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContent &&
            result.content_ != global::hdsense.PBBBSContent.DefaultInstance) {
            result.content_ = global::hdsense.PBBBSContent.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
        } else {
          result.content_ = value;
        }
        result.hasContent = true;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = null;
        return this;
      }
      
      public bool HasReward {
       get { return result.hasReward; }
      }
      public global::hdsense.PBBBSReward Reward {
        get { return result.Reward; }
        set { SetReward(value); }
      }
      public Builder SetReward(global::hdsense.PBBBSReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = value;
        return this;
      }
      public Builder SetReward(global::hdsense.PBBBSReward.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReward = true;
        result.reward_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReward(global::hdsense.PBBBSReward value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReward &&
            result.reward_ != global::hdsense.PBBBSReward.DefaultInstance) {
            result.reward_ = global::hdsense.PBBBSReward.CreateBuilder(result.reward_).MergeFrom(value).BuildPartial();
        } else {
          result.reward_ = value;
        }
        result.hasReward = true;
        return this;
      }
      public Builder ClearReward() {
        PrepareBuilder();
        result.hasReward = false;
        result.reward_ = null;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasMarked {
        get { return result.hasMarked; }
      }
      public bool Marked {
        get { return result.Marked; }
        set { SetMarked(value); }
      }
      public Builder SetMarked(bool value) {
        PrepareBuilder();
        result.hasMarked = true;
        result.marked_ = value;
        return this;
      }
      public Builder ClearMarked() {
        PrepareBuilder();
        result.hasMarked = false;
        result.marked_ = false;
        return this;
      }
      
      public bool HasIsPrivate {
        get { return result.hasIsPrivate; }
      }
      public bool IsPrivate {
        get { return result.IsPrivate; }
        set { SetIsPrivate(value); }
      }
      public Builder SetIsPrivate(bool value) {
        PrepareBuilder();
        result.hasIsPrivate = true;
        result.isPrivate_ = value;
        return this;
      }
      public Builder ClearIsPrivate() {
        PrepareBuilder();
        result.hasIsPrivate = false;
        result.isPrivate_ = false;
        return this;
      }
    }
    static PBBBSPost() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSPrivilege : pb::GeneratedMessage<PBBBSPrivilege, PBBBSPrivilege.Builder> {
    private PBBBSPrivilege() { }
    private static readonly PBBBSPrivilege defaultInstance = new PBBBSPrivilege().MakeReadOnly();
    private static readonly string[] _pBBBSPrivilegeFieldNames = new string[] { "boardId", "permission" };
    private static readonly uint[] _pBBBSPrivilegeFieldTags = new uint[] { 10, 16 };
    public static PBBBSPrivilege DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSPrivilege DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSPrivilege ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSPrivilege__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSPrivilege, PBBBSPrivilege.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSPrivilege__FieldAccessorTable; }
    }
    
    public const int BoardIdFieldNumber = 1;
    private bool hasBoardId;
    private string boardId_ = "";
    public bool HasBoardId {
      get { return hasBoardId; }
    }
    public string BoardId {
      get { return boardId_; }
    }
    
    public const int PermissionFieldNumber = 2;
    private bool hasPermission;
    private int permission_;
    public bool HasPermission {
      get { return hasPermission; }
    }
    public int Permission {
      get { return permission_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBoardId) return false;
        if (!hasPermission) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSPrivilegeFieldNames;
      if (hasBoardId) {
        output.WriteString(1, field_names[0], BoardId);
      }
      if (hasPermission) {
        output.WriteInt32(2, field_names[1], Permission);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBoardId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BoardId);
        }
        if (hasPermission) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Permission);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSPrivilege ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSPrivilege ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSPrivilege ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSPrivilege ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSPrivilege ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSPrivilege ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSPrivilege ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSPrivilege ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSPrivilege ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSPrivilege ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSPrivilege MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSPrivilege prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSPrivilege, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSPrivilege cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSPrivilege result;
      
      private PBBBSPrivilege PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSPrivilege original = result;
          result = new PBBBSPrivilege();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSPrivilege MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSPrivilege.Descriptor; }
      }
      
      public override PBBBSPrivilege DefaultInstanceForType {
        get { return global::hdsense.PBBBSPrivilege.DefaultInstance; }
      }
      
      public override PBBBSPrivilege BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSPrivilege) {
          return MergeFrom((PBBBSPrivilege) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSPrivilege other) {
        if (other == global::hdsense.PBBBSPrivilege.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBoardId) {
          BoardId = other.BoardId;
        }
        if (other.HasPermission) {
          Permission = other.Permission;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSPrivilegeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSPrivilegeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBoardId = input.ReadString(ref result.boardId_);
              break;
            }
            case 16: {
              result.hasPermission = input.ReadInt32(ref result.permission_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBoardId {
        get { return result.hasBoardId; }
      }
      public string BoardId {
        get { return result.BoardId; }
        set { SetBoardId(value); }
      }
      public Builder SetBoardId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBoardId = true;
        result.boardId_ = value;
        return this;
      }
      public Builder ClearBoardId() {
        PrepareBuilder();
        result.hasBoardId = false;
        result.boardId_ = "";
        return this;
      }
      
      public bool HasPermission {
        get { return result.hasPermission; }
      }
      public int Permission {
        get { return result.Permission; }
        set { SetPermission(value); }
      }
      public Builder SetPermission(int value) {
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = value;
        return this;
      }
      public Builder ClearPermission() {
        PrepareBuilder();
        result.hasPermission = false;
        result.permission_ = 0;
        return this;
      }
    }
    static PBBBSPrivilege() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSActionSource : pb::GeneratedMessage<PBBBSActionSource, PBBBSActionSource.Builder> {
    private PBBBSActionSource() { }
    private static readonly PBBBSActionSource defaultInstance = new PBBBSActionSource().MakeReadOnly();
    private static readonly string[] _pBBBSActionSourceFieldNames = new string[] { "actionId", "actionNick", "actionType", "actionUid", "briefText", "postId", "postUid" };
    private static readonly uint[] _pBBBSActionSourceFieldTags = new uint[] { 26, 42, 48, 34, 58, 10, 18 };
    public static PBBBSActionSource DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSActionSource DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSActionSource ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSActionSource__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSActionSource, PBBBSActionSource.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSActionSource__FieldAccessorTable; }
    }
    
    public const int PostIdFieldNumber = 1;
    private bool hasPostId;
    private string postId_ = "";
    public bool HasPostId {
      get { return hasPostId; }
    }
    public string PostId {
      get { return postId_; }
    }
    
    public const int PostUidFieldNumber = 2;
    private bool hasPostUid;
    private string postUid_ = "";
    public bool HasPostUid {
      get { return hasPostUid; }
    }
    public string PostUid {
      get { return postUid_; }
    }
    
    public const int ActionIdFieldNumber = 3;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public const int ActionUidFieldNumber = 4;
    private bool hasActionUid;
    private string actionUid_ = "";
    public bool HasActionUid {
      get { return hasActionUid; }
    }
    public string ActionUid {
      get { return actionUid_; }
    }
    
    public const int ActionNickFieldNumber = 5;
    private bool hasActionNick;
    private string actionNick_ = "";
    public bool HasActionNick {
      get { return hasActionNick; }
    }
    public string ActionNick {
      get { return actionNick_; }
    }
    
    public const int ActionTypeFieldNumber = 6;
    private bool hasActionType;
    private int actionType_;
    public bool HasActionType {
      get { return hasActionType; }
    }
    public int ActionType {
      get { return actionType_; }
    }
    
    public const int BriefTextFieldNumber = 7;
    private bool hasBriefText;
    private string briefText_ = "";
    public bool HasBriefText {
      get { return hasBriefText; }
    }
    public string BriefText {
      get { return briefText_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPostId) return false;
        if (!hasPostUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSActionSourceFieldNames;
      if (hasPostId) {
        output.WriteString(1, field_names[5], PostId);
      }
      if (hasPostUid) {
        output.WriteString(2, field_names[6], PostUid);
      }
      if (hasActionId) {
        output.WriteString(3, field_names[0], ActionId);
      }
      if (hasActionUid) {
        output.WriteString(4, field_names[3], ActionUid);
      }
      if (hasActionNick) {
        output.WriteString(5, field_names[1], ActionNick);
      }
      if (hasActionType) {
        output.WriteInt32(6, field_names[2], ActionType);
      }
      if (hasBriefText) {
        output.WriteString(7, field_names[4], BriefText);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPostId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, PostId);
        }
        if (hasPostUid) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PostUid);
        }
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ActionId);
        }
        if (hasActionUid) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ActionUid);
        }
        if (hasActionNick) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ActionNick);
        }
        if (hasActionType) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, ActionType);
        }
        if (hasBriefText) {
          size += pb::CodedOutputStream.ComputeStringSize(7, BriefText);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSActionSource ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSActionSource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSActionSource ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSActionSource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSActionSource ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSActionSource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSActionSource ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSActionSource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSActionSource ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSActionSource ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSActionSource MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSActionSource prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSActionSource, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSActionSource cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSActionSource result;
      
      private PBBBSActionSource PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSActionSource original = result;
          result = new PBBBSActionSource();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSActionSource MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSActionSource.Descriptor; }
      }
      
      public override PBBBSActionSource DefaultInstanceForType {
        get { return global::hdsense.PBBBSActionSource.DefaultInstance; }
      }
      
      public override PBBBSActionSource BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSActionSource) {
          return MergeFrom((PBBBSActionSource) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSActionSource other) {
        if (other == global::hdsense.PBBBSActionSource.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPostId) {
          PostId = other.PostId;
        }
        if (other.HasPostUid) {
          PostUid = other.PostUid;
        }
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        if (other.HasActionUid) {
          ActionUid = other.ActionUid;
        }
        if (other.HasActionNick) {
          ActionNick = other.ActionNick;
        }
        if (other.HasActionType) {
          ActionType = other.ActionType;
        }
        if (other.HasBriefText) {
          BriefText = other.BriefText;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSActionSourceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSActionSourceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasPostId = input.ReadString(ref result.postId_);
              break;
            }
            case 18: {
              result.hasPostUid = input.ReadString(ref result.postUid_);
              break;
            }
            case 26: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
            case 34: {
              result.hasActionUid = input.ReadString(ref result.actionUid_);
              break;
            }
            case 42: {
              result.hasActionNick = input.ReadString(ref result.actionNick_);
              break;
            }
            case 48: {
              result.hasActionType = input.ReadInt32(ref result.actionType_);
              break;
            }
            case 58: {
              result.hasBriefText = input.ReadString(ref result.briefText_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPostId {
        get { return result.hasPostId; }
      }
      public string PostId {
        get { return result.PostId; }
        set { SetPostId(value); }
      }
      public Builder SetPostId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPostId = true;
        result.postId_ = value;
        return this;
      }
      public Builder ClearPostId() {
        PrepareBuilder();
        result.hasPostId = false;
        result.postId_ = "";
        return this;
      }
      
      public bool HasPostUid {
        get { return result.hasPostUid; }
      }
      public string PostUid {
        get { return result.PostUid; }
        set { SetPostUid(value); }
      }
      public Builder SetPostUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPostUid = true;
        result.postUid_ = value;
        return this;
      }
      public Builder ClearPostUid() {
        PrepareBuilder();
        result.hasPostUid = false;
        result.postUid_ = "";
        return this;
      }
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
      
      public bool HasActionUid {
        get { return result.hasActionUid; }
      }
      public string ActionUid {
        get { return result.ActionUid; }
        set { SetActionUid(value); }
      }
      public Builder SetActionUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionUid = true;
        result.actionUid_ = value;
        return this;
      }
      public Builder ClearActionUid() {
        PrepareBuilder();
        result.hasActionUid = false;
        result.actionUid_ = "";
        return this;
      }
      
      public bool HasActionNick {
        get { return result.hasActionNick; }
      }
      public string ActionNick {
        get { return result.ActionNick; }
        set { SetActionNick(value); }
      }
      public Builder SetActionNick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionNick = true;
        result.actionNick_ = value;
        return this;
      }
      public Builder ClearActionNick() {
        PrepareBuilder();
        result.hasActionNick = false;
        result.actionNick_ = "";
        return this;
      }
      
      public bool HasActionType {
        get { return result.hasActionType; }
      }
      public int ActionType {
        get { return result.ActionType; }
        set { SetActionType(value); }
      }
      public Builder SetActionType(int value) {
        PrepareBuilder();
        result.hasActionType = true;
        result.actionType_ = value;
        return this;
      }
      public Builder ClearActionType() {
        PrepareBuilder();
        result.hasActionType = false;
        result.actionType_ = 0;
        return this;
      }
      
      public bool HasBriefText {
        get { return result.hasBriefText; }
      }
      public string BriefText {
        get { return result.BriefText; }
        set { SetBriefText(value); }
      }
      public Builder SetBriefText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBriefText = true;
        result.briefText_ = value;
        return this;
      }
      public Builder ClearBriefText() {
        PrepareBuilder();
        result.hasBriefText = false;
        result.briefText_ = "";
        return this;
      }
    }
    static PBBBSActionSource() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSAction : pb::GeneratedMessage<PBBBSAction, PBBBSAction.Builder> {
    private PBBBSAction() { }
    private static readonly PBBBSAction defaultInstance = new PBBBSAction().MakeReadOnly();
    private static readonly string[] _pBBBSActionFieldNames = new string[] { "actionId", "content", "createDate", "createUser", "deviceType", "replyCount", "source", "type" };
    private static readonly uint[] _pBBBSActionFieldTags = new uint[] { 10, 66, 48, 26, 40, 56, 74, 16 };
    public static PBBBSAction DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSAction ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSAction__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSAction, PBBBSAction.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSAction__FieldAccessorTable; }
    }
    
    public const int ActionIdFieldNumber = 1;
    private bool hasActionId;
    private string actionId_ = "";
    public bool HasActionId {
      get { return hasActionId; }
    }
    public string ActionId {
      get { return actionId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int CreateUserFieldNumber = 3;
    private bool hasCreateUser;
    private global::hdsense.PBBBSUser createUser_;
    public bool HasCreateUser {
      get { return hasCreateUser; }
    }
    public global::hdsense.PBBBSUser CreateUser {
      get { return createUser_ ?? global::hdsense.PBBBSUser.DefaultInstance; }
    }
    
    public const int DeviceTypeFieldNumber = 5;
    private bool hasDeviceType;
    private int deviceType_;
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public int DeviceType {
      get { return deviceType_; }
    }
    
    public const int CreateDateFieldNumber = 6;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int ReplyCountFieldNumber = 7;
    private bool hasReplyCount;
    private int replyCount_;
    public bool HasReplyCount {
      get { return hasReplyCount; }
    }
    public int ReplyCount {
      get { return replyCount_; }
    }
    
    public const int ContentFieldNumber = 8;
    private bool hasContent;
    private global::hdsense.PBBBSContent content_;
    public bool HasContent {
      get { return hasContent; }
    }
    public global::hdsense.PBBBSContent Content {
      get { return content_ ?? global::hdsense.PBBBSContent.DefaultInstance; }
    }
    
    public const int SourceFieldNumber = 9;
    private bool hasSource;
    private global::hdsense.PBBBSActionSource source_;
    public bool HasSource {
      get { return hasSource; }
    }
    public global::hdsense.PBBBSActionSource Source {
      get { return source_ ?? global::hdsense.PBBBSActionSource.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasActionId) return false;
        if (!hasType) return false;
        if (!hasCreateUser) return false;
        if (!hasDeviceType) return false;
        if (!hasCreateDate) return false;
        if (!CreateUser.IsInitialized) return false;
        if (HasContent) {
          if (!Content.IsInitialized) return false;
        }
        if (HasSource) {
          if (!Source.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSActionFieldNames;
      if (hasActionId) {
        output.WriteString(1, field_names[0], ActionId);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[7], Type);
      }
      if (hasCreateUser) {
        output.WriteMessage(3, field_names[3], CreateUser);
      }
      if (hasDeviceType) {
        output.WriteInt32(5, field_names[4], DeviceType);
      }
      if (hasCreateDate) {
        output.WriteInt32(6, field_names[2], CreateDate);
      }
      if (hasReplyCount) {
        output.WriteInt32(7, field_names[5], ReplyCount);
      }
      if (hasContent) {
        output.WriteMessage(8, field_names[1], Content);
      }
      if (hasSource) {
        output.WriteMessage(9, field_names[6], Source);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasActionId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ActionId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasCreateUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CreateUser);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, DeviceType);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, CreateDate);
        }
        if (hasReplyCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, ReplyCount);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Content);
        }
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, Source);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSAction MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSAction prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSAction result;
      
      private PBBBSAction PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSAction original = result;
          result = new PBBBSAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSAction.Descriptor; }
      }
      
      public override PBBBSAction DefaultInstanceForType {
        get { return global::hdsense.PBBBSAction.DefaultInstance; }
      }
      
      public override PBBBSAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSAction) {
          return MergeFrom((PBBBSAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSAction other) {
        if (other == global::hdsense.PBBBSAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasActionId) {
          ActionId = other.ActionId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasCreateUser) {
          MergeCreateUser(other.CreateUser);
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasReplyCount) {
          ReplyCount = other.ReplyCount;
        }
        if (other.HasContent) {
          MergeContent(other.Content);
        }
        if (other.HasSource) {
          MergeSource(other.Source);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSActionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasActionId = input.ReadString(ref result.actionId_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 26: {
              global::hdsense.PBBBSUser.Builder subBuilder = global::hdsense.PBBBSUser.CreateBuilder();
              if (result.hasCreateUser) {
                subBuilder.MergeFrom(CreateUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CreateUser = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasDeviceType = input.ReadInt32(ref result.deviceType_);
              break;
            }
            case 48: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 56: {
              result.hasReplyCount = input.ReadInt32(ref result.replyCount_);
              break;
            }
            case 66: {
              global::hdsense.PBBBSContent.Builder subBuilder = global::hdsense.PBBBSContent.CreateBuilder();
              if (result.hasContent) {
                subBuilder.MergeFrom(Content);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Content = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::hdsense.PBBBSActionSource.Builder subBuilder = global::hdsense.PBBBSActionSource.CreateBuilder();
              if (result.hasSource) {
                subBuilder.MergeFrom(Source);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Source = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasActionId {
        get { return result.hasActionId; }
      }
      public string ActionId {
        get { return result.ActionId; }
        set { SetActionId(value); }
      }
      public Builder SetActionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActionId = true;
        result.actionId_ = value;
        return this;
      }
      public Builder ClearActionId() {
        PrepareBuilder();
        result.hasActionId = false;
        result.actionId_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasCreateUser {
       get { return result.hasCreateUser; }
      }
      public global::hdsense.PBBBSUser CreateUser {
        get { return result.CreateUser; }
        set { SetCreateUser(value); }
      }
      public Builder SetCreateUser(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCreateUser = true;
        result.createUser_ = value;
        return this;
      }
      public Builder SetCreateUser(global::hdsense.PBBBSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCreateUser = true;
        result.createUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCreateUser(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCreateUser &&
            result.createUser_ != global::hdsense.PBBBSUser.DefaultInstance) {
            result.createUser_ = global::hdsense.PBBBSUser.CreateBuilder(result.createUser_).MergeFrom(value).BuildPartial();
        } else {
          result.createUser_ = value;
        }
        result.hasCreateUser = true;
        return this;
      }
      public Builder ClearCreateUser() {
        PrepareBuilder();
        result.hasCreateUser = false;
        result.createUser_ = null;
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public int DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(int value) {
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = 0;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasReplyCount {
        get { return result.hasReplyCount; }
      }
      public int ReplyCount {
        get { return result.ReplyCount; }
        set { SetReplyCount(value); }
      }
      public Builder SetReplyCount(int value) {
        PrepareBuilder();
        result.hasReplyCount = true;
        result.replyCount_ = value;
        return this;
      }
      public Builder ClearReplyCount() {
        PrepareBuilder();
        result.hasReplyCount = false;
        result.replyCount_ = 0;
        return this;
      }
      
      public bool HasContent {
       get { return result.hasContent; }
      }
      public global::hdsense.PBBBSContent Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(global::hdsense.PBBBSContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder SetContent(global::hdsense.PBBBSContent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContent(global::hdsense.PBBBSContent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContent &&
            result.content_ != global::hdsense.PBBBSContent.DefaultInstance) {
            result.content_ = global::hdsense.PBBBSContent.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
        } else {
          result.content_ = value;
        }
        result.hasContent = true;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = null;
        return this;
      }
      
      public bool HasSource {
       get { return result.hasSource; }
      }
      public global::hdsense.PBBBSActionSource Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(global::hdsense.PBBBSActionSource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder SetSource(global::hdsense.PBBBSActionSource.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSource(global::hdsense.PBBBSActionSource value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSource &&
            result.source_ != global::hdsense.PBBBSActionSource.DefaultInstance) {
            result.source_ = global::hdsense.PBBBSActionSource.CreateBuilder(result.source_).MergeFrom(value).BuildPartial();
        } else {
          result.source_ = value;
        }
        result.hasSource = true;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = null;
        return this;
      }
    }
    static PBBBSAction() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBBBSBoard : pb::GeneratedMessage<PBBBSBoard, PBBBSBoard.Builder> {
    private PBBBSBoard() { }
    private static readonly PBBBSBoard defaultInstance = new PBBBSBoard().MakeReadOnly();
    private static readonly string[] _pBBBSBoardFieldNames = new string[] { "actionCount", "adminList", "boardId", "desc", "icon", "index", "lastPost", "name", "parentBoardId", "postCount", "type" };
    private static readonly uint[] _pBBBSBoardFieldTags = new uint[] { 40, 82, 10, 74, 34, 88, 66, 26, 58, 48, 16 };
    public static PBBBSBoard DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBBBSBoard DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBBBSBoard ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSBoard__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBBBSBoard, PBBBSBoard.Builder> InternalFieldAccessors {
      get { return global::hdsense.BBS.internal__static_hdsense_PBBBSBoard__FieldAccessorTable; }
    }
    
    public const int BoardIdFieldNumber = 1;
    private bool hasBoardId;
    private string boardId_ = "";
    public bool HasBoardId {
      get { return hasBoardId; }
    }
    public string BoardId {
      get { return boardId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ActionCountFieldNumber = 5;
    private bool hasActionCount;
    private int actionCount_;
    public bool HasActionCount {
      get { return hasActionCount; }
    }
    public int ActionCount {
      get { return actionCount_; }
    }
    
    public const int PostCountFieldNumber = 6;
    private bool hasPostCount;
    private int postCount_;
    public bool HasPostCount {
      get { return hasPostCount; }
    }
    public int PostCount {
      get { return postCount_; }
    }
    
    public const int IconFieldNumber = 4;
    private bool hasIcon;
    private string icon_ = "";
    public bool HasIcon {
      get { return hasIcon; }
    }
    public string Icon {
      get { return icon_; }
    }
    
    public const int ParentBoardIdFieldNumber = 7;
    private bool hasParentBoardId;
    private string parentBoardId_ = "";
    public bool HasParentBoardId {
      get { return hasParentBoardId; }
    }
    public string ParentBoardId {
      get { return parentBoardId_; }
    }
    
    public const int LastPostFieldNumber = 8;
    private bool hasLastPost;
    private global::hdsense.PBBBSPost lastPost_;
    public bool HasLastPost {
      get { return hasLastPost; }
    }
    public global::hdsense.PBBBSPost LastPost {
      get { return lastPost_ ?? global::hdsense.PBBBSPost.DefaultInstance; }
    }
    
    public const int DescFieldNumber = 9;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int AdminListFieldNumber = 10;
    private pbc::PopsicleList<global::hdsense.PBBBSUser> adminList_ = new pbc::PopsicleList<global::hdsense.PBBBSUser>();
    public scg::IList<global::hdsense.PBBBSUser> AdminListList {
      get { return adminList_; }
    }
    public int AdminListCount {
      get { return adminList_.Count; }
    }
    public global::hdsense.PBBBSUser GetAdminList(int index) {
      return adminList_[index];
    }
    
    public const int IndexFieldNumber = 11;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBoardId) return false;
        if (!hasType) return false;
        if (!hasName) return false;
        if (!hasActionCount) return false;
        if (!hasPostCount) return false;
        if (HasLastPost) {
          if (!LastPost.IsInitialized) return false;
        }
        foreach (global::hdsense.PBBBSUser element in AdminListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBBBSBoardFieldNames;
      if (hasBoardId) {
        output.WriteString(1, field_names[2], BoardId);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[10], Type);
      }
      if (hasName) {
        output.WriteString(3, field_names[7], Name);
      }
      if (hasIcon) {
        output.WriteString(4, field_names[4], Icon);
      }
      if (hasActionCount) {
        output.WriteInt32(5, field_names[0], ActionCount);
      }
      if (hasPostCount) {
        output.WriteInt32(6, field_names[9], PostCount);
      }
      if (hasParentBoardId) {
        output.WriteString(7, field_names[8], ParentBoardId);
      }
      if (hasLastPost) {
        output.WriteMessage(8, field_names[6], LastPost);
      }
      if (hasDesc) {
        output.WriteString(9, field_names[3], Desc);
      }
      if (adminList_.Count > 0) {
        output.WriteMessageArray(10, field_names[1], adminList_);
      }
      if (hasIndex) {
        output.WriteInt32(11, field_names[5], Index);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBoardId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, BoardId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasActionCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ActionCount);
        }
        if (hasPostCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, PostCount);
        }
        if (hasIcon) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Icon);
        }
        if (hasParentBoardId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ParentBoardId);
        }
        if (hasLastPost) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, LastPost);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Desc);
        }
        foreach (global::hdsense.PBBBSUser element in AdminListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, Index);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBBBSBoard ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSBoard ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSBoard ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBBBSBoard ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBBBSBoard ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSBoard ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBBBSBoard ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBBBSBoard ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBBBSBoard ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBBBSBoard ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBBBSBoard MakeReadOnly() {
      adminList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBBBSBoard prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBBBSBoard, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBBBSBoard cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBBBSBoard result;
      
      private PBBBSBoard PrepareBuilder() {
        if (resultIsReadOnly) {
          PBBBSBoard original = result;
          result = new PBBBSBoard();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBBBSBoard MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBBBSBoard.Descriptor; }
      }
      
      public override PBBBSBoard DefaultInstanceForType {
        get { return global::hdsense.PBBBSBoard.DefaultInstance; }
      }
      
      public override PBBBSBoard BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBBBSBoard) {
          return MergeFrom((PBBBSBoard) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBBBSBoard other) {
        if (other == global::hdsense.PBBBSBoard.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBoardId) {
          BoardId = other.BoardId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasActionCount) {
          ActionCount = other.ActionCount;
        }
        if (other.HasPostCount) {
          PostCount = other.PostCount;
        }
        if (other.HasIcon) {
          Icon = other.Icon;
        }
        if (other.HasParentBoardId) {
          ParentBoardId = other.ParentBoardId;
        }
        if (other.HasLastPost) {
          MergeLastPost(other.LastPost);
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.adminList_.Count != 0) {
          result.adminList_.Add(other.adminList_);
        }
        if (other.HasIndex) {
          Index = other.Index;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBBBSBoardFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBBBSBoardFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBoardId = input.ReadString(ref result.boardId_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              result.hasIcon = input.ReadString(ref result.icon_);
              break;
            }
            case 40: {
              result.hasActionCount = input.ReadInt32(ref result.actionCount_);
              break;
            }
            case 48: {
              result.hasPostCount = input.ReadInt32(ref result.postCount_);
              break;
            }
            case 58: {
              result.hasParentBoardId = input.ReadString(ref result.parentBoardId_);
              break;
            }
            case 66: {
              global::hdsense.PBBBSPost.Builder subBuilder = global::hdsense.PBBBSPost.CreateBuilder();
              if (result.hasLastPost) {
                subBuilder.MergeFrom(LastPost);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastPost = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.adminList_, global::hdsense.PBBBSUser.DefaultInstance, extensionRegistry);
              break;
            }
            case 88: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBoardId {
        get { return result.hasBoardId; }
      }
      public string BoardId {
        get { return result.BoardId; }
        set { SetBoardId(value); }
      }
      public Builder SetBoardId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBoardId = true;
        result.boardId_ = value;
        return this;
      }
      public Builder ClearBoardId() {
        PrepareBuilder();
        result.hasBoardId = false;
        result.boardId_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasActionCount {
        get { return result.hasActionCount; }
      }
      public int ActionCount {
        get { return result.ActionCount; }
        set { SetActionCount(value); }
      }
      public Builder SetActionCount(int value) {
        PrepareBuilder();
        result.hasActionCount = true;
        result.actionCount_ = value;
        return this;
      }
      public Builder ClearActionCount() {
        PrepareBuilder();
        result.hasActionCount = false;
        result.actionCount_ = 0;
        return this;
      }
      
      public bool HasPostCount {
        get { return result.hasPostCount; }
      }
      public int PostCount {
        get { return result.PostCount; }
        set { SetPostCount(value); }
      }
      public Builder SetPostCount(int value) {
        PrepareBuilder();
        result.hasPostCount = true;
        result.postCount_ = value;
        return this;
      }
      public Builder ClearPostCount() {
        PrepareBuilder();
        result.hasPostCount = false;
        result.postCount_ = 0;
        return this;
      }
      
      public bool HasIcon {
        get { return result.hasIcon; }
      }
      public string Icon {
        get { return result.Icon; }
        set { SetIcon(value); }
      }
      public Builder SetIcon(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIcon = true;
        result.icon_ = value;
        return this;
      }
      public Builder ClearIcon() {
        PrepareBuilder();
        result.hasIcon = false;
        result.icon_ = "";
        return this;
      }
      
      public bool HasParentBoardId {
        get { return result.hasParentBoardId; }
      }
      public string ParentBoardId {
        get { return result.ParentBoardId; }
        set { SetParentBoardId(value); }
      }
      public Builder SetParentBoardId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasParentBoardId = true;
        result.parentBoardId_ = value;
        return this;
      }
      public Builder ClearParentBoardId() {
        PrepareBuilder();
        result.hasParentBoardId = false;
        result.parentBoardId_ = "";
        return this;
      }
      
      public bool HasLastPost {
       get { return result.hasLastPost; }
      }
      public global::hdsense.PBBBSPost LastPost {
        get { return result.LastPost; }
        set { SetLastPost(value); }
      }
      public Builder SetLastPost(global::hdsense.PBBBSPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastPost = true;
        result.lastPost_ = value;
        return this;
      }
      public Builder SetLastPost(global::hdsense.PBBBSPost.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLastPost = true;
        result.lastPost_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastPost(global::hdsense.PBBBSPost value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLastPost &&
            result.lastPost_ != global::hdsense.PBBBSPost.DefaultInstance) {
            result.lastPost_ = global::hdsense.PBBBSPost.CreateBuilder(result.lastPost_).MergeFrom(value).BuildPartial();
        } else {
          result.lastPost_ = value;
        }
        result.hasLastPost = true;
        return this;
      }
      public Builder ClearLastPost() {
        PrepareBuilder();
        result.hasLastPost = false;
        result.lastPost_ = null;
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBBBSUser> AdminListList {
        get { return PrepareBuilder().adminList_; }
      }
      public int AdminListCount {
        get { return result.AdminListCount; }
      }
      public global::hdsense.PBBBSUser GetAdminList(int index) {
        return result.GetAdminList(index);
      }
      public Builder SetAdminList(int index, global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adminList_[index] = value;
        return this;
      }
      public Builder SetAdminList(int index, global::hdsense.PBBBSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adminList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAdminList(global::hdsense.PBBBSUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.adminList_.Add(value);
        return this;
      }
      public Builder AddAdminList(global::hdsense.PBBBSUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.adminList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAdminList(scg::IEnumerable<global::hdsense.PBBBSUser> values) {
        PrepareBuilder();
        result.adminList_.Add(values);
        return this;
      }
      public Builder ClearAdminList() {
        PrepareBuilder();
        result.adminList_.Clear();
        return this;
      }
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
    }
    static PBBBSBoard() {
      object.ReferenceEquals(global::hdsense.BBS.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
