// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Opus {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBDrawOpus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawOpus, global::hdsense.PBDrawOpus.Builder> internal__static_hdsense_PBDrawOpus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBAskPs__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAskPs, global::hdsense.PBAskPs.Builder> internal__static_hdsense_PBAskPs__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBAskPsOpus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAskPsOpus, global::hdsense.PBAskPsOpus.Builder> internal__static_hdsense_PBAskPsOpus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBOpus__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpus, global::hdsense.PBOpus.Builder> internal__static_hdsense_PBOpus__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBOpusList__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpusList, global::hdsense.PBOpusList.Builder> internal__static_hdsense_PBOpusList__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBOpusGuess__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpusGuess, global::hdsense.PBOpusGuess.Builder> internal__static_hdsense_PBOpusGuess__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGuessRank__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGuessRank, global::hdsense.PBGuessRank.Builder> internal__static_hdsense_PBGuessRank__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBGuessContest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGuessContest, global::hdsense.PBGuessContest.Builder> internal__static_hdsense_PBGuessContest__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Opus() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgpPcHVzLnByb3RvEgdoZHNlbnNlGg9HYW1lQmFzaWMucHJvdG8aE0dhbWVD" + 
          "b25zdGFudHMucHJvdG8aClNpbmcucHJvdG8aCkRyYXcucHJvdG8iGwoKUEJE" + 
          "cmF3T3B1cxINCgVsZXZlbBgBIAEoBSKKAQoHUEJBc2tQcxITCgtyZXF1aXJl" + 
          "bWVudBgBIAMoCRIZChFhd2FyZENvaW5zUGVyVXNlchgeIAEoBRIaChJhd2Fy" + 
          "ZENvaW5zTWF4VG90YWwYHyABKAUSGgoSYXdhcmRJbmdvdEJlc3RVc2VyGCAg" + 
          "ASgFEhcKD2F3YXJkQmVzdFVzZXJJZBgyIAEoCSIeCgtQQkFza1BzT3B1cxIP" + 
          "Cgdhc2tQc0lkGAEgAigJIq4ICgZQQk9wdXMSDgoGb3B1c0lkGAEgAigJEiEK" + 
          "BHR5cGUYAiABKA4yEy5oZHNlbnNlLlBCT3B1c1R5cGUSDAoEbmFtZRgDIAEo" + 
          "CRIMCgRkZXNjGAQgASgJEg0KBWltYWdlGAUgASgJEhIKCnRodW1iSW1hZ2UY" + 
          "BiABKAkSDwoHZGF0YVVybBgJIAEoCRIlCghsYW5ndWFnZRgKIAEoDjITLmhk" + 
          "c2Vuc2UuUEJMYW5ndWFnZRItCghjYXRlZ29yeRgLIAEoDjIbLmhkc2Vuc2Uu" + 
          "UEJPcHVzQ2F0ZWdvcnlUeXBlEikKCHNvZG9UeXBlGAwgASgOMhcuaGRzZW5z" + 
          "ZS5QQk9wdXNTb2RvVHlwZRISCgpjcmVhdGVEYXRlGA8gASgFEhYKDmlzV2l0" + 
          "aEFwcEltYWdlGBAgASgIEhEKBnN0YXR1cxgUIAEoBToBMBIMCgR0YWdzGBUg" + 
          "AygJEhEKCXNwZW5kVGltZRgWIAEoBRISCgpkZXZpY2VUeXBlGBkgASgFEhIK" + 
          "CmRldmljZU5hbWUYGiABKAkSDQoFYXBwSWQYHCABKAkSIwoGYXV0aG9yGCMg" + 
          "ASgLMhMuaGRzZW5zZS5QQkdhbWVVc2VyEicKCnRhcmdldFVzZXIYKSABKAsy" + 
          "Ey5oZHNlbnNlLlBCR2FtZVVzZXISEQoJY29udGVzdElkGCogASgJEicKCWZl" + 
          "ZWRUaW1lcxgtIAMoCzIULmhkc2Vuc2UuUEJGZWVkVGltZXMSIQoEZHJhdxhl" + 
          "IAEoCzITLmhkc2Vuc2UuUEJEcmF3T3B1cxIhCgRzaW5nGGYgASgLMhMuaGRz" + 
          "ZW5zZS5QQlNpbmdPcHVzEh8KBWFza1BzGGcgASgLMhAuaGRzZW5zZS5QQkFz" + 
          "a1BzEicKCWFza1BzT3B1cxhoIAEoCzIULmhkc2Vuc2UuUEJBc2tQc09wdXMS" + 
          "LgoKY2FtZXJhUGFyYRhpIAEoCzIaLmhkc2Vuc2UuUEJDYW1lcmFQYXJhbWV0" + 
          "ZXISFgoOb3JpZ2luYWxTdGF0dXMYaiABKAUSEwoLcHJpbnRTdGF0dXMYayAB" + 
          "KAUSFQoMbG9jYWxEYXRhVXJsGJYBIAEoCRIWCg1sb2NhbEltYWdlVXJsGJcB" + 
          "IAEoCRIbChJsb2NhbFRodW1iSW1hZ2VVcmwYmAEgASgJEhoKCmlzUmVjb3Zl" + 
          "cnkYmQEgASgIOgVmYWxzZRIsCglzdG9yZVR5cGUYyAEgASgOMhguaGRzZW5z" + 
          "ZS5QQk9wdXNTdG9yZVR5cGUSLAoNZGVzY0xhYmVsSW5mbxjJASABKAsyFC5o" + 
          "ZHNlbnNlLlBCTGFiZWxJbmZvEiQKCmNhbnZhc1NpemUYygEgASgLMg8uaGRz" + 
          "ZW5zZS5QQlNpemUSKAoJZ3Vlc3NJbmZvGPoBIAEoCzIULmhkc2Vuc2UuUEJP" + 
          "cHVzR3Vlc3MiLQoKUEJPcHVzTGlzdBIfCgZvcHVzZXMYASADKAsyDy5oZHNl" + 
          "bnNlLlBCT3B1cyInCgtQQk9wdXNHdWVzcxIYCglpc0NvcnJlY3QYAiABKAg6" + 
          "BWZhbHNlIuMBCgtQQkd1ZXNzUmFuaxIhCgR1c2VyGAEgASgLMhMuaGRzZW5z" + 
          "ZS5QQkdhbWVVc2VyEg0KBWd1ZXNzGAUgASgFEgwKBHBhc3MYBiABKAUSEQoJ" + 
          "c3BlbmRUaW1lGAcgASgFEgwKBGVhcm4YCyABKAUSKQoIY3VycmVuY3kYDCAB" + 
          "KA4yFy5oZHNlbnNlLlBCR2FtZUN1cnJlbmN5Eg8KB3JhbmtpbmcYGSABKAUS" + 
          "EwoLdG90YWxQbGF5ZXIYHyABKAUSEQoJc3RhcnRUaW1lGCMgASgFEg8KB2Vu" + 
          "ZFRpbWUYJCABKAUiZAoOUEJHdWVzc0NvbnRlc3QSEQoJY29udGVzdElkGAEg" + 
          "AigJEgwKBG5hbWUYAiABKAkSDQoFc3RhdGUYAyABKAUSEQoJc3RhcnRUaW1l" + 
          "GAUgASgFEg8KB2VuZFRpbWUYBiABKAUqJgoKUEJMYW5ndWFnZRILCgdDSElO" + 
          "RVNFEAESCwoHRU5HTElTSBACKswCCgpQQk9wdXNUeXBlEgsKB1VOS05PV04Q" + 
          "ABIICgREUkFXEAESCQoFR1VFU1MQAhILCgdDT01NRU5UEAMSCgoGUkVQT1NU" + 
          "EAQSEAoMRFJBV19UT19VU0VSEAUSCgoGRkxPV0VSEAYSCgoGVE9NQVRPEAcS" + 
          "EAoMT05MWV9DT01NRU5UEAgSEAoMRFJBV19DT05URVNUEAkSEQoNRFJBV19Q" + 
          "UkFDVElDRRAKEhAKDERSQVdfQ09OUVVFUhALEggKBFZPVEUQDBIICgRWSUVX" + 
          "EA0SDwoKU0hPVF9JTUFHRRCgBhIbChZTSE9UX0lNQUdFX0ZPUl9DT05URVNU" + 
          "EKEGEgkKBFNJTkcQ6AcSEQoMU0lOR19UT19VU0VSEOkHEhEKDFNJTkdfQ09O" + 
          "VEVTVBDqBxILCgZBU0tfUFMQ3AsSEAoLQVNLX1BTX09QVVMQ3QsqUwoPUEJP" + 
          "cHVzU3RvcmVUeXBlEg8KC05PUk1BTF9PUFVTEAASDgoKRFJBRlRfT1BVUxAB" + 
          "Eg8KC1NVQk1JVF9PUFVTEAISDgoKU0FWRURfT1BVUxADKj4KDFBCT3B1c1N0" + 
          "YXR1cxIWChJPUFVTX1NUQVRVU19OT1JNQUwQABIWChJPUFVTX1NUQVRVU19E" + 
          "RUxFVEUQASrtAQoPUEJGZWVkVGltZXNUeXBlEhkKFUZFRURfVElNRVNfVFlQ" + 
          "RV9NQVRDSBABEhkKFUZFRURfVElNRVNfVFlQRV9HVUVTUxACEhsKF0ZFRURf" + 
          "VElNRVNfVFlQRV9DT1JSRUNUEAMSGwoXRkVFRF9USU1FU19UWVBFX0NPTU1F" + 
          "TlQQBBIaChZGRUVEX1RJTUVTX1RZUEVfRkxPV0VSEAUSGgoWRkVFRF9USU1F" + 
          "U19UWVBFX1RPTUFUTxAGEhgKFEZFRURfVElNRVNfVFlQRV9TQVZFEAcSGAoU" + 
          "RkVFRF9USU1FU19UWVBFX1ZPVEUQCCotCgpQQlJhbmtUeXBlEgwKCEhPVF9S" + 
          "QU5LEAESEQoNQUxMX1RJTUVfUkFOSxACKlYKD1BCVXNlckd1ZXNzTW9kZRIU" + 
          "ChBHVUVTU19NT0RFX0hBUFBZEAESFQoRR1VFU1NfTU9ERV9HRU5JVVMQAhIW" + 
          "ChJHVUVTU19NT0RFX0NPTlRFU1QQAypyChNQQkd1ZXNzQ29udGVzdFN0YXRl" + 
          "EhsKF0dVRVNTX0NPTlRFU1RfU1RBVEVfRU5EEAASGwoXR1VFU1NfQ09OVEVT" + 
          "VF9TVEFURV9JTkcQARIhCh1HVUVTU19DT05URVNUX1NUQVRFX05PVF9TVEFS" + 
          "VBACQjUKJ2NvbS5oZHNlbnNlLm5ldHdvcmsuZ2FtZS5wcm90b2NvbC5tb2Rl" + 
          "bEIKT3B1c1Byb3Rvcw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBDrawOpus__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBDrawOpus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBDrawOpus, global::hdsense.PBDrawOpus.Builder>(internal__static_hdsense_PBDrawOpus__Descriptor,
                new string[] { "Level", });
        internal__static_hdsense_PBAskPs__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBAskPs__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAskPs, global::hdsense.PBAskPs.Builder>(internal__static_hdsense_PBAskPs__Descriptor,
                new string[] { "Requirement", "AwardCoinsPerUser", "AwardCoinsMaxTotal", "AwardIngotBestUser", "AwardBestUserId", });
        internal__static_hdsense_PBAskPsOpus__Descriptor = Descriptor.MessageTypes[2];
        internal__static_hdsense_PBAskPsOpus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAskPsOpus, global::hdsense.PBAskPsOpus.Builder>(internal__static_hdsense_PBAskPsOpus__Descriptor,
                new string[] { "AskPsId", });
        internal__static_hdsense_PBOpus__Descriptor = Descriptor.MessageTypes[3];
        internal__static_hdsense_PBOpus__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpus, global::hdsense.PBOpus.Builder>(internal__static_hdsense_PBOpus__Descriptor,
                new string[] { "OpusId", "Type", "Name", "Desc", "Image", "ThumbImage", "DataUrl", "Language", "Category", "SodoType", "CreateDate", "IsWithAppImage", "Status", "Tags", "SpendTime", "DeviceType", "DeviceName", "AppId", "Author", "TargetUser", "ContestId", "FeedTimes", "Draw", "Sing", "AskPs", "AskPsOpus", "CameraPara", "OriginalStatus", "PrintStatus", "LocalDataUrl", "LocalImageUrl", "LocalThumbImageUrl", "IsRecovery", "StoreType", "DescLabelInfo", "CanvasSize", "GuessInfo", });
        internal__static_hdsense_PBOpusList__Descriptor = Descriptor.MessageTypes[4];
        internal__static_hdsense_PBOpusList__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpusList, global::hdsense.PBOpusList.Builder>(internal__static_hdsense_PBOpusList__Descriptor,
                new string[] { "Opuses", });
        internal__static_hdsense_PBOpusGuess__Descriptor = Descriptor.MessageTypes[5];
        internal__static_hdsense_PBOpusGuess__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBOpusGuess, global::hdsense.PBOpusGuess.Builder>(internal__static_hdsense_PBOpusGuess__Descriptor,
                new string[] { "IsCorrect", });
        internal__static_hdsense_PBGuessRank__Descriptor = Descriptor.MessageTypes[6];
        internal__static_hdsense_PBGuessRank__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGuessRank, global::hdsense.PBGuessRank.Builder>(internal__static_hdsense_PBGuessRank__Descriptor,
                new string[] { "User", "Guess", "Pass", "SpendTime", "Earn", "Currency", "Ranking", "TotalPlayer", "StartTime", "EndTime", });
        internal__static_hdsense_PBGuessContest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_hdsense_PBGuessContest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBGuessContest, global::hdsense.PBGuessContest.Builder>(internal__static_hdsense_PBGuessContest__Descriptor,
                new string[] { "ContestId", "Name", "State", "StartTime", "EndTime", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::hdsense.GameBasic.Descriptor, 
          global::hdsense.GameConstants.Descriptor, 
          global::hdsense.Sing.Descriptor, 
          global::hdsense.Draw.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PBLanguage {
    CHINESE = 1,
    ENGLISH = 2,
  }
  
  public enum PBOpusType {
    UNKNOWN = 0,
    DRAW = 1,
    GUESS = 2,
    COMMENT = 3,
    REPOST = 4,
    DRAW_TO_USER = 5,
    FLOWER = 6,
    TOMATO = 7,
    ONLY_COMMENT = 8,
    DRAW_CONTEST = 9,
    DRAW_PRACTICE = 10,
    DRAW_CONQUER = 11,
    VOTE = 12,
    VIEW = 13,
    SHOT_IMAGE = 800,
    SHOT_IMAGE_FOR_CONTEST = 801,
    SING = 1000,
    SING_TO_USER = 1001,
    SING_CONTEST = 1002,
    ASK_PS = 1500,
    ASK_PS_OPUS = 1501,
  }
  
  public enum PBOpusStoreType {
    NORMAL_OPUS = 0,
    DRAFT_OPUS = 1,
    SUBMIT_OPUS = 2,
    SAVED_OPUS = 3,
  }
  
  public enum PBOpusStatus {
    OPUS_STATUS_NORMAL = 0,
    OPUS_STATUS_DELETE = 1,
  }
  
  public enum PBFeedTimesType {
    FEED_TIMES_TYPE_MATCH = 1,
    FEED_TIMES_TYPE_GUESS = 2,
    FEED_TIMES_TYPE_CORRECT = 3,
    FEED_TIMES_TYPE_COMMENT = 4,
    FEED_TIMES_TYPE_FLOWER = 5,
    FEED_TIMES_TYPE_TOMATO = 6,
    FEED_TIMES_TYPE_SAVE = 7,
    FEED_TIMES_TYPE_VOTE = 8,
  }
  
  public enum PBRankType {
    HOT_RANK = 1,
    ALL_TIME_RANK = 2,
  }
  
  public enum PBUserGuessMode {
    GUESS_MODE_HAPPY = 1,
    GUESS_MODE_GENIUS = 2,
    GUESS_MODE_CONTEST = 3,
  }
  
  public enum PBGuessContestState {
    GUESS_CONTEST_STATE_END = 0,
    GUESS_CONTEST_STATE_ING = 1,
    GUESS_CONTEST_STATE_NOT_START = 2,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBDrawOpus : pb::GeneratedMessage<PBDrawOpus, PBDrawOpus.Builder> {
    private PBDrawOpus() { }
    private static readonly PBDrawOpus defaultInstance = new PBDrawOpus().MakeReadOnly();
    private static readonly string[] _pBDrawOpusFieldNames = new string[] { "level" };
    private static readonly uint[] _pBDrawOpusFieldTags = new uint[] { 8 };
    public static PBDrawOpus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBDrawOpus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBDrawOpus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBDrawOpus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBDrawOpus, PBDrawOpus.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBDrawOpus__FieldAccessorTable; }
    }
    
    public const int LevelFieldNumber = 1;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBDrawOpusFieldNames;
      if (hasLevel) {
        output.WriteInt32(1, field_names[0], Level);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Level);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBDrawOpus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawOpus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawOpus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBDrawOpus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBDrawOpus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawOpus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBDrawOpus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBDrawOpus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBDrawOpus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBDrawOpus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBDrawOpus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBDrawOpus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBDrawOpus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBDrawOpus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBDrawOpus result;
      
      private PBDrawOpus PrepareBuilder() {
        if (resultIsReadOnly) {
          PBDrawOpus original = result;
          result = new PBDrawOpus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBDrawOpus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBDrawOpus.Descriptor; }
      }
      
      public override PBDrawOpus DefaultInstanceForType {
        get { return global::hdsense.PBDrawOpus.DefaultInstance; }
      }
      
      public override PBDrawOpus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBDrawOpus) {
          return MergeFrom((PBDrawOpus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBDrawOpus other) {
        if (other == global::hdsense.PBDrawOpus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLevel) {
          Level = other.Level;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBDrawOpusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBDrawOpusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
    }
    static PBDrawOpus() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBAskPs : pb::GeneratedMessage<PBAskPs, PBAskPs.Builder> {
    private PBAskPs() { }
    private static readonly PBAskPs defaultInstance = new PBAskPs().MakeReadOnly();
    private static readonly string[] _pBAskPsFieldNames = new string[] { "awardBestUserId", "awardCoinsMaxTotal", "awardCoinsPerUser", "awardIngotBestUser", "requirement" };
    private static readonly uint[] _pBAskPsFieldTags = new uint[] { 402, 248, 240, 256, 10 };
    public static PBAskPs DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBAskPs DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBAskPs ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBAskPs__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBAskPs, PBAskPs.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBAskPs__FieldAccessorTable; }
    }
    
    public const int RequirementFieldNumber = 1;
    private pbc::PopsicleList<string> requirement_ = new pbc::PopsicleList<string>();
    public scg::IList<string> RequirementList {
      get { return pbc::Lists.AsReadOnly(requirement_); }
    }
    public int RequirementCount {
      get { return requirement_.Count; }
    }
    public string GetRequirement(int index) {
      return requirement_[index];
    }
    
    public const int AwardCoinsPerUserFieldNumber = 30;
    private bool hasAwardCoinsPerUser;
    private int awardCoinsPerUser_;
    public bool HasAwardCoinsPerUser {
      get { return hasAwardCoinsPerUser; }
    }
    public int AwardCoinsPerUser {
      get { return awardCoinsPerUser_; }
    }
    
    public const int AwardCoinsMaxTotalFieldNumber = 31;
    private bool hasAwardCoinsMaxTotal;
    private int awardCoinsMaxTotal_;
    public bool HasAwardCoinsMaxTotal {
      get { return hasAwardCoinsMaxTotal; }
    }
    public int AwardCoinsMaxTotal {
      get { return awardCoinsMaxTotal_; }
    }
    
    public const int AwardIngotBestUserFieldNumber = 32;
    private bool hasAwardIngotBestUser;
    private int awardIngotBestUser_;
    public bool HasAwardIngotBestUser {
      get { return hasAwardIngotBestUser; }
    }
    public int AwardIngotBestUser {
      get { return awardIngotBestUser_; }
    }
    
    public const int AwardBestUserIdFieldNumber = 50;
    private bool hasAwardBestUserId;
    private string awardBestUserId_ = "";
    public bool HasAwardBestUserId {
      get { return hasAwardBestUserId; }
    }
    public string AwardBestUserId {
      get { return awardBestUserId_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBAskPsFieldNames;
      if (requirement_.Count > 0) {
        output.WriteStringArray(1, field_names[4], requirement_);
      }
      if (hasAwardCoinsPerUser) {
        output.WriteInt32(30, field_names[2], AwardCoinsPerUser);
      }
      if (hasAwardCoinsMaxTotal) {
        output.WriteInt32(31, field_names[1], AwardCoinsMaxTotal);
      }
      if (hasAwardIngotBestUser) {
        output.WriteInt32(32, field_names[3], AwardIngotBestUser);
      }
      if (hasAwardBestUserId) {
        output.WriteString(50, field_names[0], AwardBestUserId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (string element in RequirementList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * requirement_.Count;
        }
        if (hasAwardCoinsPerUser) {
          size += pb::CodedOutputStream.ComputeInt32Size(30, AwardCoinsPerUser);
        }
        if (hasAwardCoinsMaxTotal) {
          size += pb::CodedOutputStream.ComputeInt32Size(31, AwardCoinsMaxTotal);
        }
        if (hasAwardIngotBestUser) {
          size += pb::CodedOutputStream.ComputeInt32Size(32, AwardIngotBestUser);
        }
        if (hasAwardBestUserId) {
          size += pb::CodedOutputStream.ComputeStringSize(50, AwardBestUserId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBAskPs ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAskPs ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAskPs ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAskPs ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAskPs ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAskPs ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBAskPs ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBAskPs ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBAskPs ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAskPs ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBAskPs MakeReadOnly() {
      requirement_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBAskPs prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBAskPs, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBAskPs cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBAskPs result;
      
      private PBAskPs PrepareBuilder() {
        if (resultIsReadOnly) {
          PBAskPs original = result;
          result = new PBAskPs();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBAskPs MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBAskPs.Descriptor; }
      }
      
      public override PBAskPs DefaultInstanceForType {
        get { return global::hdsense.PBAskPs.DefaultInstance; }
      }
      
      public override PBAskPs BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBAskPs) {
          return MergeFrom((PBAskPs) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBAskPs other) {
        if (other == global::hdsense.PBAskPs.DefaultInstance) return this;
        PrepareBuilder();
        if (other.requirement_.Count != 0) {
          result.requirement_.Add(other.requirement_);
        }
        if (other.HasAwardCoinsPerUser) {
          AwardCoinsPerUser = other.AwardCoinsPerUser;
        }
        if (other.HasAwardCoinsMaxTotal) {
          AwardCoinsMaxTotal = other.AwardCoinsMaxTotal;
        }
        if (other.HasAwardIngotBestUser) {
          AwardIngotBestUser = other.AwardIngotBestUser;
        }
        if (other.HasAwardBestUserId) {
          AwardBestUserId = other.AwardBestUserId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBAskPsFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBAskPsFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadStringArray(tag, field_name, result.requirement_);
              break;
            }
            case 240: {
              result.hasAwardCoinsPerUser = input.ReadInt32(ref result.awardCoinsPerUser_);
              break;
            }
            case 248: {
              result.hasAwardCoinsMaxTotal = input.ReadInt32(ref result.awardCoinsMaxTotal_);
              break;
            }
            case 256: {
              result.hasAwardIngotBestUser = input.ReadInt32(ref result.awardIngotBestUser_);
              break;
            }
            case 402: {
              result.hasAwardBestUserId = input.ReadString(ref result.awardBestUserId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<string> RequirementList {
        get { return PrepareBuilder().requirement_; }
      }
      public int RequirementCount {
        get { return result.RequirementCount; }
      }
      public string GetRequirement(int index) {
        return result.GetRequirement(index);
      }
      public Builder SetRequirement(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.requirement_[index] = value;
        return this;
      }
      public Builder AddRequirement(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.requirement_.Add(value);
        return this;
      }
      public Builder AddRangeRequirement(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.requirement_.Add(values);
        return this;
      }
      public Builder ClearRequirement() {
        PrepareBuilder();
        result.requirement_.Clear();
        return this;
      }
      
      public bool HasAwardCoinsPerUser {
        get { return result.hasAwardCoinsPerUser; }
      }
      public int AwardCoinsPerUser {
        get { return result.AwardCoinsPerUser; }
        set { SetAwardCoinsPerUser(value); }
      }
      public Builder SetAwardCoinsPerUser(int value) {
        PrepareBuilder();
        result.hasAwardCoinsPerUser = true;
        result.awardCoinsPerUser_ = value;
        return this;
      }
      public Builder ClearAwardCoinsPerUser() {
        PrepareBuilder();
        result.hasAwardCoinsPerUser = false;
        result.awardCoinsPerUser_ = 0;
        return this;
      }
      
      public bool HasAwardCoinsMaxTotal {
        get { return result.hasAwardCoinsMaxTotal; }
      }
      public int AwardCoinsMaxTotal {
        get { return result.AwardCoinsMaxTotal; }
        set { SetAwardCoinsMaxTotal(value); }
      }
      public Builder SetAwardCoinsMaxTotal(int value) {
        PrepareBuilder();
        result.hasAwardCoinsMaxTotal = true;
        result.awardCoinsMaxTotal_ = value;
        return this;
      }
      public Builder ClearAwardCoinsMaxTotal() {
        PrepareBuilder();
        result.hasAwardCoinsMaxTotal = false;
        result.awardCoinsMaxTotal_ = 0;
        return this;
      }
      
      public bool HasAwardIngotBestUser {
        get { return result.hasAwardIngotBestUser; }
      }
      public int AwardIngotBestUser {
        get { return result.AwardIngotBestUser; }
        set { SetAwardIngotBestUser(value); }
      }
      public Builder SetAwardIngotBestUser(int value) {
        PrepareBuilder();
        result.hasAwardIngotBestUser = true;
        result.awardIngotBestUser_ = value;
        return this;
      }
      public Builder ClearAwardIngotBestUser() {
        PrepareBuilder();
        result.hasAwardIngotBestUser = false;
        result.awardIngotBestUser_ = 0;
        return this;
      }
      
      public bool HasAwardBestUserId {
        get { return result.hasAwardBestUserId; }
      }
      public string AwardBestUserId {
        get { return result.AwardBestUserId; }
        set { SetAwardBestUserId(value); }
      }
      public Builder SetAwardBestUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAwardBestUserId = true;
        result.awardBestUserId_ = value;
        return this;
      }
      public Builder ClearAwardBestUserId() {
        PrepareBuilder();
        result.hasAwardBestUserId = false;
        result.awardBestUserId_ = "";
        return this;
      }
    }
    static PBAskPs() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBAskPsOpus : pb::GeneratedMessage<PBAskPsOpus, PBAskPsOpus.Builder> {
    private PBAskPsOpus() { }
    private static readonly PBAskPsOpus defaultInstance = new PBAskPsOpus().MakeReadOnly();
    private static readonly string[] _pBAskPsOpusFieldNames = new string[] { "askPsId" };
    private static readonly uint[] _pBAskPsOpusFieldTags = new uint[] { 10 };
    public static PBAskPsOpus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBAskPsOpus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBAskPsOpus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBAskPsOpus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBAskPsOpus, PBAskPsOpus.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBAskPsOpus__FieldAccessorTable; }
    }
    
    public const int AskPsIdFieldNumber = 1;
    private bool hasAskPsId;
    private string askPsId_ = "";
    public bool HasAskPsId {
      get { return hasAskPsId; }
    }
    public string AskPsId {
      get { return askPsId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAskPsId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBAskPsOpusFieldNames;
      if (hasAskPsId) {
        output.WriteString(1, field_names[0], AskPsId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAskPsId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AskPsId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBAskPsOpus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAskPsOpus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAskPsOpus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAskPsOpus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAskPsOpus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAskPsOpus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBAskPsOpus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBAskPsOpus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBAskPsOpus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAskPsOpus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBAskPsOpus MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBAskPsOpus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBAskPsOpus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBAskPsOpus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBAskPsOpus result;
      
      private PBAskPsOpus PrepareBuilder() {
        if (resultIsReadOnly) {
          PBAskPsOpus original = result;
          result = new PBAskPsOpus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBAskPsOpus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBAskPsOpus.Descriptor; }
      }
      
      public override PBAskPsOpus DefaultInstanceForType {
        get { return global::hdsense.PBAskPsOpus.DefaultInstance; }
      }
      
      public override PBAskPsOpus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBAskPsOpus) {
          return MergeFrom((PBAskPsOpus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBAskPsOpus other) {
        if (other == global::hdsense.PBAskPsOpus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAskPsId) {
          AskPsId = other.AskPsId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBAskPsOpusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBAskPsOpusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAskPsId = input.ReadString(ref result.askPsId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAskPsId {
        get { return result.hasAskPsId; }
      }
      public string AskPsId {
        get { return result.AskPsId; }
        set { SetAskPsId(value); }
      }
      public Builder SetAskPsId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAskPsId = true;
        result.askPsId_ = value;
        return this;
      }
      public Builder ClearAskPsId() {
        PrepareBuilder();
        result.hasAskPsId = false;
        result.askPsId_ = "";
        return this;
      }
    }
    static PBAskPsOpus() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBOpus : pb::GeneratedMessage<PBOpus, PBOpus.Builder> {
    private PBOpus() { }
    private static readonly PBOpus defaultInstance = new PBOpus().MakeReadOnly();
    private static readonly string[] _pBOpusFieldNames = new string[] { "appId", "askPs", "askPsOpus", "author", "cameraPara", "canvasSize", "category", "contestId", "createDate", "dataUrl", "desc", "descLabelInfo", "deviceName", "deviceType", "draw", "feedTimes", "guessInfo", "image", "isRecovery", "isWithAppImage", "language", "localDataUrl", "localImageUrl", "localThumbImageUrl", "name", "opusId", "originalStatus", "printStatus", "sing", "sodoType", "spendTime", "status", "storeType", "tags", "targetUser", "thumbImage", "type" };
    private static readonly uint[] _pBOpusFieldTags = new uint[] { 226, 826, 834, 282, 842, 1618, 88, 338, 120, 74, 34, 1610, 210, 200, 810, 362, 2002, 42, 1224, 128, 80, 1202, 1210, 1218, 26, 10, 848, 856, 818, 96, 176, 160, 1600, 170, 330, 50, 16 };
    public static PBOpus DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBOpus DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBOpus ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBOpus__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBOpus, PBOpus.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBOpus__FieldAccessorTable; }
    }
    
    public const int OpusIdFieldNumber = 1;
    private bool hasOpusId;
    private string opusId_ = "";
    public bool HasOpusId {
      get { return hasOpusId; }
    }
    public string OpusId {
      get { return opusId_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::hdsense.PBOpusType type_ = global::hdsense.PBOpusType.UNKNOWN;
    public bool HasType {
      get { return hasType; }
    }
    public global::hdsense.PBOpusType Type {
      get { return type_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescFieldNumber = 4;
    private bool hasDesc;
    private string desc_ = "";
    public bool HasDesc {
      get { return hasDesc; }
    }
    public string Desc {
      get { return desc_; }
    }
    
    public const int ImageFieldNumber = 5;
    private bool hasImage;
    private string image_ = "";
    public bool HasImage {
      get { return hasImage; }
    }
    public string Image {
      get { return image_; }
    }
    
    public const int ThumbImageFieldNumber = 6;
    private bool hasThumbImage;
    private string thumbImage_ = "";
    public bool HasThumbImage {
      get { return hasThumbImage; }
    }
    public string ThumbImage {
      get { return thumbImage_; }
    }
    
    public const int DataUrlFieldNumber = 9;
    private bool hasDataUrl;
    private string dataUrl_ = "";
    public bool HasDataUrl {
      get { return hasDataUrl; }
    }
    public string DataUrl {
      get { return dataUrl_; }
    }
    
    public const int LanguageFieldNumber = 10;
    private bool hasLanguage;
    private global::hdsense.PBLanguage language_ = global::hdsense.PBLanguage.CHINESE;
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public global::hdsense.PBLanguage Language {
      get { return language_; }
    }
    
    public const int CategoryFieldNumber = 11;
    private bool hasCategory;
    private global::hdsense.PBOpusCategoryType category_ = global::hdsense.PBOpusCategoryType.DRAW_CATEGORY;
    public bool HasCategory {
      get { return hasCategory; }
    }
    public global::hdsense.PBOpusCategoryType Category {
      get { return category_; }
    }
    
    public const int SodoTypeFieldNumber = 12;
    private bool hasSodoType;
    private global::hdsense.PBOpusSodoType sodoType_ = global::hdsense.PBOpusSodoType.SODO_RENXIANG;
    public bool HasSodoType {
      get { return hasSodoType; }
    }
    public global::hdsense.PBOpusSodoType SodoType {
      get { return sodoType_; }
    }
    
    public const int CreateDateFieldNumber = 15;
    private bool hasCreateDate;
    private int createDate_;
    public bool HasCreateDate {
      get { return hasCreateDate; }
    }
    public int CreateDate {
      get { return createDate_; }
    }
    
    public const int IsWithAppImageFieldNumber = 16;
    private bool hasIsWithAppImage;
    private bool isWithAppImage_;
    public bool HasIsWithAppImage {
      get { return hasIsWithAppImage; }
    }
    public bool IsWithAppImage {
      get { return isWithAppImage_; }
    }
    
    public const int StatusFieldNumber = 20;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int TagsFieldNumber = 21;
    private pbc::PopsicleList<string> tags_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TagsList {
      get { return pbc::Lists.AsReadOnly(tags_); }
    }
    public int TagsCount {
      get { return tags_.Count; }
    }
    public string GetTags(int index) {
      return tags_[index];
    }
    
    public const int SpendTimeFieldNumber = 22;
    private bool hasSpendTime;
    private int spendTime_;
    public bool HasSpendTime {
      get { return hasSpendTime; }
    }
    public int SpendTime {
      get { return spendTime_; }
    }
    
    public const int DeviceTypeFieldNumber = 25;
    private bool hasDeviceType;
    private int deviceType_;
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public int DeviceType {
      get { return deviceType_; }
    }
    
    public const int DeviceNameFieldNumber = 26;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public const int AppIdFieldNumber = 28;
    private bool hasAppId;
    private string appId_ = "";
    public bool HasAppId {
      get { return hasAppId; }
    }
    public string AppId {
      get { return appId_; }
    }
    
    public const int AuthorFieldNumber = 35;
    private bool hasAuthor;
    private global::hdsense.PBGameUser author_;
    public bool HasAuthor {
      get { return hasAuthor; }
    }
    public global::hdsense.PBGameUser Author {
      get { return author_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int TargetUserFieldNumber = 41;
    private bool hasTargetUser;
    private global::hdsense.PBGameUser targetUser_;
    public bool HasTargetUser {
      get { return hasTargetUser; }
    }
    public global::hdsense.PBGameUser TargetUser {
      get { return targetUser_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int ContestIdFieldNumber = 42;
    private bool hasContestId;
    private string contestId_ = "";
    public bool HasContestId {
      get { return hasContestId; }
    }
    public string ContestId {
      get { return contestId_; }
    }
    
    public const int FeedTimesFieldNumber = 45;
    private pbc::PopsicleList<global::hdsense.PBFeedTimes> feedTimes_ = new pbc::PopsicleList<global::hdsense.PBFeedTimes>();
    public scg::IList<global::hdsense.PBFeedTimes> FeedTimesList {
      get { return feedTimes_; }
    }
    public int FeedTimesCount {
      get { return feedTimes_.Count; }
    }
    public global::hdsense.PBFeedTimes GetFeedTimes(int index) {
      return feedTimes_[index];
    }
    
    public const int DrawFieldNumber = 101;
    private bool hasDraw;
    private global::hdsense.PBDrawOpus draw_;
    public bool HasDraw {
      get { return hasDraw; }
    }
    public global::hdsense.PBDrawOpus Draw {
      get { return draw_ ?? global::hdsense.PBDrawOpus.DefaultInstance; }
    }
    
    public const int SingFieldNumber = 102;
    private bool hasSing;
    private global::hdsense.PBSingOpus sing_;
    public bool HasSing {
      get { return hasSing; }
    }
    public global::hdsense.PBSingOpus Sing {
      get { return sing_ ?? global::hdsense.PBSingOpus.DefaultInstance; }
    }
    
    public const int AskPsFieldNumber = 103;
    private bool hasAskPs;
    private global::hdsense.PBAskPs askPs_;
    public bool HasAskPs {
      get { return hasAskPs; }
    }
    public global::hdsense.PBAskPs AskPs {
      get { return askPs_ ?? global::hdsense.PBAskPs.DefaultInstance; }
    }
    
    public const int AskPsOpusFieldNumber = 104;
    private bool hasAskPsOpus;
    private global::hdsense.PBAskPsOpus askPsOpus_;
    public bool HasAskPsOpus {
      get { return hasAskPsOpus; }
    }
    public global::hdsense.PBAskPsOpus AskPsOpus {
      get { return askPsOpus_ ?? global::hdsense.PBAskPsOpus.DefaultInstance; }
    }
    
    public const int CameraParaFieldNumber = 105;
    private bool hasCameraPara;
    private global::hdsense.PBCameraParameter cameraPara_;
    public bool HasCameraPara {
      get { return hasCameraPara; }
    }
    public global::hdsense.PBCameraParameter CameraPara {
      get { return cameraPara_ ?? global::hdsense.PBCameraParameter.DefaultInstance; }
    }
    
    public const int OriginalStatusFieldNumber = 106;
    private bool hasOriginalStatus;
    private int originalStatus_;
    public bool HasOriginalStatus {
      get { return hasOriginalStatus; }
    }
    public int OriginalStatus {
      get { return originalStatus_; }
    }
    
    public const int PrintStatusFieldNumber = 107;
    private bool hasPrintStatus;
    private int printStatus_;
    public bool HasPrintStatus {
      get { return hasPrintStatus; }
    }
    public int PrintStatus {
      get { return printStatus_; }
    }
    
    public const int LocalDataUrlFieldNumber = 150;
    private bool hasLocalDataUrl;
    private string localDataUrl_ = "";
    public bool HasLocalDataUrl {
      get { return hasLocalDataUrl; }
    }
    public string LocalDataUrl {
      get { return localDataUrl_; }
    }
    
    public const int LocalImageUrlFieldNumber = 151;
    private bool hasLocalImageUrl;
    private string localImageUrl_ = "";
    public bool HasLocalImageUrl {
      get { return hasLocalImageUrl; }
    }
    public string LocalImageUrl {
      get { return localImageUrl_; }
    }
    
    public const int LocalThumbImageUrlFieldNumber = 152;
    private bool hasLocalThumbImageUrl;
    private string localThumbImageUrl_ = "";
    public bool HasLocalThumbImageUrl {
      get { return hasLocalThumbImageUrl; }
    }
    public string LocalThumbImageUrl {
      get { return localThumbImageUrl_; }
    }
    
    public const int IsRecoveryFieldNumber = 153;
    private bool hasIsRecovery;
    private bool isRecovery_;
    public bool HasIsRecovery {
      get { return hasIsRecovery; }
    }
    public bool IsRecovery {
      get { return isRecovery_; }
    }
    
    public const int StoreTypeFieldNumber = 200;
    private bool hasStoreType;
    private global::hdsense.PBOpusStoreType storeType_ = global::hdsense.PBOpusStoreType.NORMAL_OPUS;
    public bool HasStoreType {
      get { return hasStoreType; }
    }
    public global::hdsense.PBOpusStoreType StoreType {
      get { return storeType_; }
    }
    
    public const int DescLabelInfoFieldNumber = 201;
    private bool hasDescLabelInfo;
    private global::hdsense.PBLabelInfo descLabelInfo_;
    public bool HasDescLabelInfo {
      get { return hasDescLabelInfo; }
    }
    public global::hdsense.PBLabelInfo DescLabelInfo {
      get { return descLabelInfo_ ?? global::hdsense.PBLabelInfo.DefaultInstance; }
    }
    
    public const int CanvasSizeFieldNumber = 202;
    private bool hasCanvasSize;
    private global::hdsense.PBSize canvasSize_;
    public bool HasCanvasSize {
      get { return hasCanvasSize; }
    }
    public global::hdsense.PBSize CanvasSize {
      get { return canvasSize_ ?? global::hdsense.PBSize.DefaultInstance; }
    }
    
    public const int GuessInfoFieldNumber = 250;
    private bool hasGuessInfo;
    private global::hdsense.PBOpusGuess guessInfo_;
    public bool HasGuessInfo {
      get { return hasGuessInfo; }
    }
    public global::hdsense.PBOpusGuess GuessInfo {
      get { return guessInfo_ ?? global::hdsense.PBOpusGuess.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOpusId) return false;
        if (HasAuthor) {
          if (!Author.IsInitialized) return false;
        }
        if (HasTargetUser) {
          if (!TargetUser.IsInitialized) return false;
        }
        foreach (global::hdsense.PBFeedTimes element in FeedTimesList) {
          if (!element.IsInitialized) return false;
        }
        if (HasSing) {
          if (!Sing.IsInitialized) return false;
        }
        if (HasAskPsOpus) {
          if (!AskPsOpus.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBOpusFieldNames;
      if (hasOpusId) {
        output.WriteString(1, field_names[25], OpusId);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[36], (int) Type, Type);
      }
      if (hasName) {
        output.WriteString(3, field_names[24], Name);
      }
      if (hasDesc) {
        output.WriteString(4, field_names[10], Desc);
      }
      if (hasImage) {
        output.WriteString(5, field_names[17], Image);
      }
      if (hasThumbImage) {
        output.WriteString(6, field_names[35], ThumbImage);
      }
      if (hasDataUrl) {
        output.WriteString(9, field_names[9], DataUrl);
      }
      if (hasLanguage) {
        output.WriteEnum(10, field_names[20], (int) Language, Language);
      }
      if (hasCategory) {
        output.WriteEnum(11, field_names[6], (int) Category, Category);
      }
      if (hasSodoType) {
        output.WriteEnum(12, field_names[29], (int) SodoType, SodoType);
      }
      if (hasCreateDate) {
        output.WriteInt32(15, field_names[8], CreateDate);
      }
      if (hasIsWithAppImage) {
        output.WriteBool(16, field_names[19], IsWithAppImage);
      }
      if (hasStatus) {
        output.WriteInt32(20, field_names[31], Status);
      }
      if (tags_.Count > 0) {
        output.WriteStringArray(21, field_names[33], tags_);
      }
      if (hasSpendTime) {
        output.WriteInt32(22, field_names[30], SpendTime);
      }
      if (hasDeviceType) {
        output.WriteInt32(25, field_names[13], DeviceType);
      }
      if (hasDeviceName) {
        output.WriteString(26, field_names[12], DeviceName);
      }
      if (hasAppId) {
        output.WriteString(28, field_names[0], AppId);
      }
      if (hasAuthor) {
        output.WriteMessage(35, field_names[3], Author);
      }
      if (hasTargetUser) {
        output.WriteMessage(41, field_names[34], TargetUser);
      }
      if (hasContestId) {
        output.WriteString(42, field_names[7], ContestId);
      }
      if (feedTimes_.Count > 0) {
        output.WriteMessageArray(45, field_names[15], feedTimes_);
      }
      if (hasDraw) {
        output.WriteMessage(101, field_names[14], Draw);
      }
      if (hasSing) {
        output.WriteMessage(102, field_names[28], Sing);
      }
      if (hasAskPs) {
        output.WriteMessage(103, field_names[1], AskPs);
      }
      if (hasAskPsOpus) {
        output.WriteMessage(104, field_names[2], AskPsOpus);
      }
      if (hasCameraPara) {
        output.WriteMessage(105, field_names[4], CameraPara);
      }
      if (hasOriginalStatus) {
        output.WriteInt32(106, field_names[26], OriginalStatus);
      }
      if (hasPrintStatus) {
        output.WriteInt32(107, field_names[27], PrintStatus);
      }
      if (hasLocalDataUrl) {
        output.WriteString(150, field_names[21], LocalDataUrl);
      }
      if (hasLocalImageUrl) {
        output.WriteString(151, field_names[22], LocalImageUrl);
      }
      if (hasLocalThumbImageUrl) {
        output.WriteString(152, field_names[23], LocalThumbImageUrl);
      }
      if (hasIsRecovery) {
        output.WriteBool(153, field_names[18], IsRecovery);
      }
      if (hasStoreType) {
        output.WriteEnum(200, field_names[32], (int) StoreType, StoreType);
      }
      if (hasDescLabelInfo) {
        output.WriteMessage(201, field_names[11], DescLabelInfo);
      }
      if (hasCanvasSize) {
        output.WriteMessage(202, field_names[5], CanvasSize);
      }
      if (hasGuessInfo) {
        output.WriteMessage(250, field_names[16], GuessInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOpusId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, OpusId);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        if (hasDesc) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Desc);
        }
        if (hasImage) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Image);
        }
        if (hasThumbImage) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ThumbImage);
        }
        if (hasDataUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(9, DataUrl);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeEnumSize(10, (int) Language);
        }
        if (hasCategory) {
          size += pb::CodedOutputStream.ComputeEnumSize(11, (int) Category);
        }
        if (hasSodoType) {
          size += pb::CodedOutputStream.ComputeEnumSize(12, (int) SodoType);
        }
        if (hasCreateDate) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, CreateDate);
        }
        if (hasIsWithAppImage) {
          size += pb::CodedOutputStream.ComputeBoolSize(16, IsWithAppImage);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, Status);
        }
        {
          int dataSize = 0;
          foreach (string element in TagsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 2 * tags_.Count;
        }
        if (hasSpendTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, SpendTime);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, DeviceType);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(26, DeviceName);
        }
        if (hasAppId) {
          size += pb::CodedOutputStream.ComputeStringSize(28, AppId);
        }
        if (hasAuthor) {
          size += pb::CodedOutputStream.ComputeMessageSize(35, Author);
        }
        if (hasTargetUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(41, TargetUser);
        }
        if (hasContestId) {
          size += pb::CodedOutputStream.ComputeStringSize(42, ContestId);
        }
        foreach (global::hdsense.PBFeedTimes element in FeedTimesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(45, element);
        }
        if (hasDraw) {
          size += pb::CodedOutputStream.ComputeMessageSize(101, Draw);
        }
        if (hasSing) {
          size += pb::CodedOutputStream.ComputeMessageSize(102, Sing);
        }
        if (hasAskPs) {
          size += pb::CodedOutputStream.ComputeMessageSize(103, AskPs);
        }
        if (hasAskPsOpus) {
          size += pb::CodedOutputStream.ComputeMessageSize(104, AskPsOpus);
        }
        if (hasCameraPara) {
          size += pb::CodedOutputStream.ComputeMessageSize(105, CameraPara);
        }
        if (hasOriginalStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(106, OriginalStatus);
        }
        if (hasPrintStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(107, PrintStatus);
        }
        if (hasLocalDataUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(150, LocalDataUrl);
        }
        if (hasLocalImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(151, LocalImageUrl);
        }
        if (hasLocalThumbImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(152, LocalThumbImageUrl);
        }
        if (hasIsRecovery) {
          size += pb::CodedOutputStream.ComputeBoolSize(153, IsRecovery);
        }
        if (hasStoreType) {
          size += pb::CodedOutputStream.ComputeEnumSize(200, (int) StoreType);
        }
        if (hasDescLabelInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(201, DescLabelInfo);
        }
        if (hasCanvasSize) {
          size += pb::CodedOutputStream.ComputeMessageSize(202, CanvasSize);
        }
        if (hasGuessInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(250, GuessInfo);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBOpus ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpus ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpus ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBOpus ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBOpus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBOpus ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBOpus MakeReadOnly() {
      tags_.MakeReadOnly();
      feedTimes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBOpus prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBOpus, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBOpus cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBOpus result;
      
      private PBOpus PrepareBuilder() {
        if (resultIsReadOnly) {
          PBOpus original = result;
          result = new PBOpus();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBOpus MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBOpus.Descriptor; }
      }
      
      public override PBOpus DefaultInstanceForType {
        get { return global::hdsense.PBOpus.DefaultInstance; }
      }
      
      public override PBOpus BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBOpus) {
          return MergeFrom((PBOpus) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBOpus other) {
        if (other == global::hdsense.PBOpus.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOpusId) {
          OpusId = other.OpusId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDesc) {
          Desc = other.Desc;
        }
        if (other.HasImage) {
          Image = other.Image;
        }
        if (other.HasThumbImage) {
          ThumbImage = other.ThumbImage;
        }
        if (other.HasDataUrl) {
          DataUrl = other.DataUrl;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasCategory) {
          Category = other.Category;
        }
        if (other.HasSodoType) {
          SodoType = other.SodoType;
        }
        if (other.HasCreateDate) {
          CreateDate = other.CreateDate;
        }
        if (other.HasIsWithAppImage) {
          IsWithAppImage = other.IsWithAppImage;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.tags_.Count != 0) {
          result.tags_.Add(other.tags_);
        }
        if (other.HasSpendTime) {
          SpendTime = other.SpendTime;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasAuthor) {
          MergeAuthor(other.Author);
        }
        if (other.HasTargetUser) {
          MergeTargetUser(other.TargetUser);
        }
        if (other.HasContestId) {
          ContestId = other.ContestId;
        }
        if (other.feedTimes_.Count != 0) {
          result.feedTimes_.Add(other.feedTimes_);
        }
        if (other.HasDraw) {
          MergeDraw(other.Draw);
        }
        if (other.HasSing) {
          MergeSing(other.Sing);
        }
        if (other.HasAskPs) {
          MergeAskPs(other.AskPs);
        }
        if (other.HasAskPsOpus) {
          MergeAskPsOpus(other.AskPsOpus);
        }
        if (other.HasCameraPara) {
          MergeCameraPara(other.CameraPara);
        }
        if (other.HasOriginalStatus) {
          OriginalStatus = other.OriginalStatus;
        }
        if (other.HasPrintStatus) {
          PrintStatus = other.PrintStatus;
        }
        if (other.HasLocalDataUrl) {
          LocalDataUrl = other.LocalDataUrl;
        }
        if (other.HasLocalImageUrl) {
          LocalImageUrl = other.LocalImageUrl;
        }
        if (other.HasLocalThumbImageUrl) {
          LocalThumbImageUrl = other.LocalThumbImageUrl;
        }
        if (other.HasIsRecovery) {
          IsRecovery = other.IsRecovery;
        }
        if (other.HasStoreType) {
          StoreType = other.StoreType;
        }
        if (other.HasDescLabelInfo) {
          MergeDescLabelInfo(other.DescLabelInfo);
        }
        if (other.HasCanvasSize) {
          MergeCanvasSize(other.CanvasSize);
        }
        if (other.HasGuessInfo) {
          MergeGuessInfo(other.GuessInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBOpusFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBOpusFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasOpusId = input.ReadString(ref result.opusId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 34: {
              result.hasDesc = input.ReadString(ref result.desc_);
              break;
            }
            case 42: {
              result.hasImage = input.ReadString(ref result.image_);
              break;
            }
            case 50: {
              result.hasThumbImage = input.ReadString(ref result.thumbImage_);
              break;
            }
            case 74: {
              result.hasDataUrl = input.ReadString(ref result.dataUrl_);
              break;
            }
            case 80: {
              object unknown;
              if(input.ReadEnum(ref result.language_, out unknown)) {
                result.hasLanguage = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(10, (ulong)(int)unknown);
              }
              break;
            }
            case 88: {
              object unknown;
              if(input.ReadEnum(ref result.category_, out unknown)) {
                result.hasCategory = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(11, (ulong)(int)unknown);
              }
              break;
            }
            case 96: {
              object unknown;
              if(input.ReadEnum(ref result.sodoType_, out unknown)) {
                result.hasSodoType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(12, (ulong)(int)unknown);
              }
              break;
            }
            case 120: {
              result.hasCreateDate = input.ReadInt32(ref result.createDate_);
              break;
            }
            case 128: {
              result.hasIsWithAppImage = input.ReadBool(ref result.isWithAppImage_);
              break;
            }
            case 160: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 170: {
              input.ReadStringArray(tag, field_name, result.tags_);
              break;
            }
            case 176: {
              result.hasSpendTime = input.ReadInt32(ref result.spendTime_);
              break;
            }
            case 200: {
              result.hasDeviceType = input.ReadInt32(ref result.deviceType_);
              break;
            }
            case 210: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
            case 226: {
              result.hasAppId = input.ReadString(ref result.appId_);
              break;
            }
            case 282: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasAuthor) {
                subBuilder.MergeFrom(Author);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Author = subBuilder.BuildPartial();
              break;
            }
            case 330: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasTargetUser) {
                subBuilder.MergeFrom(TargetUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetUser = subBuilder.BuildPartial();
              break;
            }
            case 338: {
              result.hasContestId = input.ReadString(ref result.contestId_);
              break;
            }
            case 362: {
              input.ReadMessageArray(tag, field_name, result.feedTimes_, global::hdsense.PBFeedTimes.DefaultInstance, extensionRegistry);
              break;
            }
            case 810: {
              global::hdsense.PBDrawOpus.Builder subBuilder = global::hdsense.PBDrawOpus.CreateBuilder();
              if (result.hasDraw) {
                subBuilder.MergeFrom(Draw);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Draw = subBuilder.BuildPartial();
              break;
            }
            case 818: {
              global::hdsense.PBSingOpus.Builder subBuilder = global::hdsense.PBSingOpus.CreateBuilder();
              if (result.hasSing) {
                subBuilder.MergeFrom(Sing);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Sing = subBuilder.BuildPartial();
              break;
            }
            case 826: {
              global::hdsense.PBAskPs.Builder subBuilder = global::hdsense.PBAskPs.CreateBuilder();
              if (result.hasAskPs) {
                subBuilder.MergeFrom(AskPs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AskPs = subBuilder.BuildPartial();
              break;
            }
            case 834: {
              global::hdsense.PBAskPsOpus.Builder subBuilder = global::hdsense.PBAskPsOpus.CreateBuilder();
              if (result.hasAskPsOpus) {
                subBuilder.MergeFrom(AskPsOpus);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AskPsOpus = subBuilder.BuildPartial();
              break;
            }
            case 842: {
              global::hdsense.PBCameraParameter.Builder subBuilder = global::hdsense.PBCameraParameter.CreateBuilder();
              if (result.hasCameraPara) {
                subBuilder.MergeFrom(CameraPara);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CameraPara = subBuilder.BuildPartial();
              break;
            }
            case 848: {
              result.hasOriginalStatus = input.ReadInt32(ref result.originalStatus_);
              break;
            }
            case 856: {
              result.hasPrintStatus = input.ReadInt32(ref result.printStatus_);
              break;
            }
            case 1202: {
              result.hasLocalDataUrl = input.ReadString(ref result.localDataUrl_);
              break;
            }
            case 1210: {
              result.hasLocalImageUrl = input.ReadString(ref result.localImageUrl_);
              break;
            }
            case 1218: {
              result.hasLocalThumbImageUrl = input.ReadString(ref result.localThumbImageUrl_);
              break;
            }
            case 1224: {
              result.hasIsRecovery = input.ReadBool(ref result.isRecovery_);
              break;
            }
            case 1600: {
              object unknown;
              if(input.ReadEnum(ref result.storeType_, out unknown)) {
                result.hasStoreType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(200, (ulong)(int)unknown);
              }
              break;
            }
            case 1610: {
              global::hdsense.PBLabelInfo.Builder subBuilder = global::hdsense.PBLabelInfo.CreateBuilder();
              if (result.hasDescLabelInfo) {
                subBuilder.MergeFrom(DescLabelInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DescLabelInfo = subBuilder.BuildPartial();
              break;
            }
            case 1618: {
              global::hdsense.PBSize.Builder subBuilder = global::hdsense.PBSize.CreateBuilder();
              if (result.hasCanvasSize) {
                subBuilder.MergeFrom(CanvasSize);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CanvasSize = subBuilder.BuildPartial();
              break;
            }
            case 2002: {
              global::hdsense.PBOpusGuess.Builder subBuilder = global::hdsense.PBOpusGuess.CreateBuilder();
              if (result.hasGuessInfo) {
                subBuilder.MergeFrom(GuessInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuessInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOpusId {
        get { return result.hasOpusId; }
      }
      public string OpusId {
        get { return result.OpusId; }
        set { SetOpusId(value); }
      }
      public Builder SetOpusId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOpusId = true;
        result.opusId_ = value;
        return this;
      }
      public Builder ClearOpusId() {
        PrepareBuilder();
        result.hasOpusId = false;
        result.opusId_ = "";
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::hdsense.PBOpusType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::hdsense.PBOpusType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::hdsense.PBOpusType.UNKNOWN;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDesc {
        get { return result.hasDesc; }
      }
      public string Desc {
        get { return result.Desc; }
        set { SetDesc(value); }
      }
      public Builder SetDesc(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDesc = true;
        result.desc_ = value;
        return this;
      }
      public Builder ClearDesc() {
        PrepareBuilder();
        result.hasDesc = false;
        result.desc_ = "";
        return this;
      }
      
      public bool HasImage {
        get { return result.hasImage; }
      }
      public string Image {
        get { return result.Image; }
        set { SetImage(value); }
      }
      public Builder SetImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImage = true;
        result.image_ = value;
        return this;
      }
      public Builder ClearImage() {
        PrepareBuilder();
        result.hasImage = false;
        result.image_ = "";
        return this;
      }
      
      public bool HasThumbImage {
        get { return result.hasThumbImage; }
      }
      public string ThumbImage {
        get { return result.ThumbImage; }
        set { SetThumbImage(value); }
      }
      public Builder SetThumbImage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThumbImage = true;
        result.thumbImage_ = value;
        return this;
      }
      public Builder ClearThumbImage() {
        PrepareBuilder();
        result.hasThumbImage = false;
        result.thumbImage_ = "";
        return this;
      }
      
      public bool HasDataUrl {
        get { return result.hasDataUrl; }
      }
      public string DataUrl {
        get { return result.DataUrl; }
        set { SetDataUrl(value); }
      }
      public Builder SetDataUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDataUrl = true;
        result.dataUrl_ = value;
        return this;
      }
      public Builder ClearDataUrl() {
        PrepareBuilder();
        result.hasDataUrl = false;
        result.dataUrl_ = "";
        return this;
      }
      
      public bool HasLanguage {
       get { return result.hasLanguage; }
      }
      public global::hdsense.PBLanguage Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(global::hdsense.PBLanguage value) {
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = global::hdsense.PBLanguage.CHINESE;
        return this;
      }
      
      public bool HasCategory {
       get { return result.hasCategory; }
      }
      public global::hdsense.PBOpusCategoryType Category {
        get { return result.Category; }
        set { SetCategory(value); }
      }
      public Builder SetCategory(global::hdsense.PBOpusCategoryType value) {
        PrepareBuilder();
        result.hasCategory = true;
        result.category_ = value;
        return this;
      }
      public Builder ClearCategory() {
        PrepareBuilder();
        result.hasCategory = false;
        result.category_ = global::hdsense.PBOpusCategoryType.DRAW_CATEGORY;
        return this;
      }
      
      public bool HasSodoType {
       get { return result.hasSodoType; }
      }
      public global::hdsense.PBOpusSodoType SodoType {
        get { return result.SodoType; }
        set { SetSodoType(value); }
      }
      public Builder SetSodoType(global::hdsense.PBOpusSodoType value) {
        PrepareBuilder();
        result.hasSodoType = true;
        result.sodoType_ = value;
        return this;
      }
      public Builder ClearSodoType() {
        PrepareBuilder();
        result.hasSodoType = false;
        result.sodoType_ = global::hdsense.PBOpusSodoType.SODO_RENXIANG;
        return this;
      }
      
      public bool HasCreateDate {
        get { return result.hasCreateDate; }
      }
      public int CreateDate {
        get { return result.CreateDate; }
        set { SetCreateDate(value); }
      }
      public Builder SetCreateDate(int value) {
        PrepareBuilder();
        result.hasCreateDate = true;
        result.createDate_ = value;
        return this;
      }
      public Builder ClearCreateDate() {
        PrepareBuilder();
        result.hasCreateDate = false;
        result.createDate_ = 0;
        return this;
      }
      
      public bool HasIsWithAppImage {
        get { return result.hasIsWithAppImage; }
      }
      public bool IsWithAppImage {
        get { return result.IsWithAppImage; }
        set { SetIsWithAppImage(value); }
      }
      public Builder SetIsWithAppImage(bool value) {
        PrepareBuilder();
        result.hasIsWithAppImage = true;
        result.isWithAppImage_ = value;
        return this;
      }
      public Builder ClearIsWithAppImage() {
        PrepareBuilder();
        result.hasIsWithAppImage = false;
        result.isWithAppImage_ = false;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> TagsList {
        get { return PrepareBuilder().tags_; }
      }
      public int TagsCount {
        get { return result.TagsCount; }
      }
      public string GetTags(int index) {
        return result.GetTags(index);
      }
      public Builder SetTags(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tags_[index] = value;
        return this;
      }
      public Builder AddTags(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.tags_.Add(value);
        return this;
      }
      public Builder AddRangeTags(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.tags_.Add(values);
        return this;
      }
      public Builder ClearTags() {
        PrepareBuilder();
        result.tags_.Clear();
        return this;
      }
      
      public bool HasSpendTime {
        get { return result.hasSpendTime; }
      }
      public int SpendTime {
        get { return result.SpendTime; }
        set { SetSpendTime(value); }
      }
      public Builder SetSpendTime(int value) {
        PrepareBuilder();
        result.hasSpendTime = true;
        result.spendTime_ = value;
        return this;
      }
      public Builder ClearSpendTime() {
        PrepareBuilder();
        result.hasSpendTime = false;
        result.spendTime_ = 0;
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public int DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(int value) {
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = 0;
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
      
      public bool HasAppId {
        get { return result.hasAppId; }
      }
      public string AppId {
        get { return result.AppId; }
        set { SetAppId(value); }
      }
      public Builder SetAppId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppId = true;
        result.appId_ = value;
        return this;
      }
      public Builder ClearAppId() {
        PrepareBuilder();
        result.hasAppId = false;
        result.appId_ = "";
        return this;
      }
      
      public bool HasAuthor {
       get { return result.hasAuthor; }
      }
      public global::hdsense.PBGameUser Author {
        get { return result.Author; }
        set { SetAuthor(value); }
      }
      public Builder SetAuthor(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthor = true;
        result.author_ = value;
        return this;
      }
      public Builder SetAuthor(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuthor = true;
        result.author_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuthor(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuthor &&
            result.author_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.author_ = global::hdsense.PBGameUser.CreateBuilder(result.author_).MergeFrom(value).BuildPartial();
        } else {
          result.author_ = value;
        }
        result.hasAuthor = true;
        return this;
      }
      public Builder ClearAuthor() {
        PrepareBuilder();
        result.hasAuthor = false;
        result.author_ = null;
        return this;
      }
      
      public bool HasTargetUser {
       get { return result.hasTargetUser; }
      }
      public global::hdsense.PBGameUser TargetUser {
        get { return result.TargetUser; }
        set { SetTargetUser(value); }
      }
      public Builder SetTargetUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetUser = true;
        result.targetUser_ = value;
        return this;
      }
      public Builder SetTargetUser(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetUser = true;
        result.targetUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetUser &&
            result.targetUser_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.targetUser_ = global::hdsense.PBGameUser.CreateBuilder(result.targetUser_).MergeFrom(value).BuildPartial();
        } else {
          result.targetUser_ = value;
        }
        result.hasTargetUser = true;
        return this;
      }
      public Builder ClearTargetUser() {
        PrepareBuilder();
        result.hasTargetUser = false;
        result.targetUser_ = null;
        return this;
      }
      
      public bool HasContestId {
        get { return result.hasContestId; }
      }
      public string ContestId {
        get { return result.ContestId; }
        set { SetContestId(value); }
      }
      public Builder SetContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestId = true;
        result.contestId_ = value;
        return this;
      }
      public Builder ClearContestId() {
        PrepareBuilder();
        result.hasContestId = false;
        result.contestId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::hdsense.PBFeedTimes> FeedTimesList {
        get { return PrepareBuilder().feedTimes_; }
      }
      public int FeedTimesCount {
        get { return result.FeedTimesCount; }
      }
      public global::hdsense.PBFeedTimes GetFeedTimes(int index) {
        return result.GetFeedTimes(index);
      }
      public Builder SetFeedTimes(int index, global::hdsense.PBFeedTimes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.feedTimes_[index] = value;
        return this;
      }
      public Builder SetFeedTimes(int index, global::hdsense.PBFeedTimes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.feedTimes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFeedTimes(global::hdsense.PBFeedTimes value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.feedTimes_.Add(value);
        return this;
      }
      public Builder AddFeedTimes(global::hdsense.PBFeedTimes.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.feedTimes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFeedTimes(scg::IEnumerable<global::hdsense.PBFeedTimes> values) {
        PrepareBuilder();
        result.feedTimes_.Add(values);
        return this;
      }
      public Builder ClearFeedTimes() {
        PrepareBuilder();
        result.feedTimes_.Clear();
        return this;
      }
      
      public bool HasDraw {
       get { return result.hasDraw; }
      }
      public global::hdsense.PBDrawOpus Draw {
        get { return result.Draw; }
        set { SetDraw(value); }
      }
      public Builder SetDraw(global::hdsense.PBDrawOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDraw = true;
        result.draw_ = value;
        return this;
      }
      public Builder SetDraw(global::hdsense.PBDrawOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDraw = true;
        result.draw_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDraw(global::hdsense.PBDrawOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDraw &&
            result.draw_ != global::hdsense.PBDrawOpus.DefaultInstance) {
            result.draw_ = global::hdsense.PBDrawOpus.CreateBuilder(result.draw_).MergeFrom(value).BuildPartial();
        } else {
          result.draw_ = value;
        }
        result.hasDraw = true;
        return this;
      }
      public Builder ClearDraw() {
        PrepareBuilder();
        result.hasDraw = false;
        result.draw_ = null;
        return this;
      }
      
      public bool HasSing {
       get { return result.hasSing; }
      }
      public global::hdsense.PBSingOpus Sing {
        get { return result.Sing; }
        set { SetSing(value); }
      }
      public Builder SetSing(global::hdsense.PBSingOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSing = true;
        result.sing_ = value;
        return this;
      }
      public Builder SetSing(global::hdsense.PBSingOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSing = true;
        result.sing_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSing(global::hdsense.PBSingOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSing &&
            result.sing_ != global::hdsense.PBSingOpus.DefaultInstance) {
            result.sing_ = global::hdsense.PBSingOpus.CreateBuilder(result.sing_).MergeFrom(value).BuildPartial();
        } else {
          result.sing_ = value;
        }
        result.hasSing = true;
        return this;
      }
      public Builder ClearSing() {
        PrepareBuilder();
        result.hasSing = false;
        result.sing_ = null;
        return this;
      }
      
      public bool HasAskPs {
       get { return result.hasAskPs; }
      }
      public global::hdsense.PBAskPs AskPs {
        get { return result.AskPs; }
        set { SetAskPs(value); }
      }
      public Builder SetAskPs(global::hdsense.PBAskPs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAskPs = true;
        result.askPs_ = value;
        return this;
      }
      public Builder SetAskPs(global::hdsense.PBAskPs.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAskPs = true;
        result.askPs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAskPs(global::hdsense.PBAskPs value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAskPs &&
            result.askPs_ != global::hdsense.PBAskPs.DefaultInstance) {
            result.askPs_ = global::hdsense.PBAskPs.CreateBuilder(result.askPs_).MergeFrom(value).BuildPartial();
        } else {
          result.askPs_ = value;
        }
        result.hasAskPs = true;
        return this;
      }
      public Builder ClearAskPs() {
        PrepareBuilder();
        result.hasAskPs = false;
        result.askPs_ = null;
        return this;
      }
      
      public bool HasAskPsOpus {
       get { return result.hasAskPsOpus; }
      }
      public global::hdsense.PBAskPsOpus AskPsOpus {
        get { return result.AskPsOpus; }
        set { SetAskPsOpus(value); }
      }
      public Builder SetAskPsOpus(global::hdsense.PBAskPsOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAskPsOpus = true;
        result.askPsOpus_ = value;
        return this;
      }
      public Builder SetAskPsOpus(global::hdsense.PBAskPsOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAskPsOpus = true;
        result.askPsOpus_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAskPsOpus(global::hdsense.PBAskPsOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAskPsOpus &&
            result.askPsOpus_ != global::hdsense.PBAskPsOpus.DefaultInstance) {
            result.askPsOpus_ = global::hdsense.PBAskPsOpus.CreateBuilder(result.askPsOpus_).MergeFrom(value).BuildPartial();
        } else {
          result.askPsOpus_ = value;
        }
        result.hasAskPsOpus = true;
        return this;
      }
      public Builder ClearAskPsOpus() {
        PrepareBuilder();
        result.hasAskPsOpus = false;
        result.askPsOpus_ = null;
        return this;
      }
      
      public bool HasCameraPara {
       get { return result.hasCameraPara; }
      }
      public global::hdsense.PBCameraParameter CameraPara {
        get { return result.CameraPara; }
        set { SetCameraPara(value); }
      }
      public Builder SetCameraPara(global::hdsense.PBCameraParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraPara = true;
        result.cameraPara_ = value;
        return this;
      }
      public Builder SetCameraPara(global::hdsense.PBCameraParameter.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCameraPara = true;
        result.cameraPara_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCameraPara(global::hdsense.PBCameraParameter value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCameraPara &&
            result.cameraPara_ != global::hdsense.PBCameraParameter.DefaultInstance) {
            result.cameraPara_ = global::hdsense.PBCameraParameter.CreateBuilder(result.cameraPara_).MergeFrom(value).BuildPartial();
        } else {
          result.cameraPara_ = value;
        }
        result.hasCameraPara = true;
        return this;
      }
      public Builder ClearCameraPara() {
        PrepareBuilder();
        result.hasCameraPara = false;
        result.cameraPara_ = null;
        return this;
      }
      
      public bool HasOriginalStatus {
        get { return result.hasOriginalStatus; }
      }
      public int OriginalStatus {
        get { return result.OriginalStatus; }
        set { SetOriginalStatus(value); }
      }
      public Builder SetOriginalStatus(int value) {
        PrepareBuilder();
        result.hasOriginalStatus = true;
        result.originalStatus_ = value;
        return this;
      }
      public Builder ClearOriginalStatus() {
        PrepareBuilder();
        result.hasOriginalStatus = false;
        result.originalStatus_ = 0;
        return this;
      }
      
      public bool HasPrintStatus {
        get { return result.hasPrintStatus; }
      }
      public int PrintStatus {
        get { return result.PrintStatus; }
        set { SetPrintStatus(value); }
      }
      public Builder SetPrintStatus(int value) {
        PrepareBuilder();
        result.hasPrintStatus = true;
        result.printStatus_ = value;
        return this;
      }
      public Builder ClearPrintStatus() {
        PrepareBuilder();
        result.hasPrintStatus = false;
        result.printStatus_ = 0;
        return this;
      }
      
      public bool HasLocalDataUrl {
        get { return result.hasLocalDataUrl; }
      }
      public string LocalDataUrl {
        get { return result.LocalDataUrl; }
        set { SetLocalDataUrl(value); }
      }
      public Builder SetLocalDataUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalDataUrl = true;
        result.localDataUrl_ = value;
        return this;
      }
      public Builder ClearLocalDataUrl() {
        PrepareBuilder();
        result.hasLocalDataUrl = false;
        result.localDataUrl_ = "";
        return this;
      }
      
      public bool HasLocalImageUrl {
        get { return result.hasLocalImageUrl; }
      }
      public string LocalImageUrl {
        get { return result.LocalImageUrl; }
        set { SetLocalImageUrl(value); }
      }
      public Builder SetLocalImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalImageUrl = true;
        result.localImageUrl_ = value;
        return this;
      }
      public Builder ClearLocalImageUrl() {
        PrepareBuilder();
        result.hasLocalImageUrl = false;
        result.localImageUrl_ = "";
        return this;
      }
      
      public bool HasLocalThumbImageUrl {
        get { return result.hasLocalThumbImageUrl; }
      }
      public string LocalThumbImageUrl {
        get { return result.LocalThumbImageUrl; }
        set { SetLocalThumbImageUrl(value); }
      }
      public Builder SetLocalThumbImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocalThumbImageUrl = true;
        result.localThumbImageUrl_ = value;
        return this;
      }
      public Builder ClearLocalThumbImageUrl() {
        PrepareBuilder();
        result.hasLocalThumbImageUrl = false;
        result.localThumbImageUrl_ = "";
        return this;
      }
      
      public bool HasIsRecovery {
        get { return result.hasIsRecovery; }
      }
      public bool IsRecovery {
        get { return result.IsRecovery; }
        set { SetIsRecovery(value); }
      }
      public Builder SetIsRecovery(bool value) {
        PrepareBuilder();
        result.hasIsRecovery = true;
        result.isRecovery_ = value;
        return this;
      }
      public Builder ClearIsRecovery() {
        PrepareBuilder();
        result.hasIsRecovery = false;
        result.isRecovery_ = false;
        return this;
      }
      
      public bool HasStoreType {
       get { return result.hasStoreType; }
      }
      public global::hdsense.PBOpusStoreType StoreType {
        get { return result.StoreType; }
        set { SetStoreType(value); }
      }
      public Builder SetStoreType(global::hdsense.PBOpusStoreType value) {
        PrepareBuilder();
        result.hasStoreType = true;
        result.storeType_ = value;
        return this;
      }
      public Builder ClearStoreType() {
        PrepareBuilder();
        result.hasStoreType = false;
        result.storeType_ = global::hdsense.PBOpusStoreType.NORMAL_OPUS;
        return this;
      }
      
      public bool HasDescLabelInfo {
       get { return result.hasDescLabelInfo; }
      }
      public global::hdsense.PBLabelInfo DescLabelInfo {
        get { return result.DescLabelInfo; }
        set { SetDescLabelInfo(value); }
      }
      public Builder SetDescLabelInfo(global::hdsense.PBLabelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescLabelInfo = true;
        result.descLabelInfo_ = value;
        return this;
      }
      public Builder SetDescLabelInfo(global::hdsense.PBLabelInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDescLabelInfo = true;
        result.descLabelInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDescLabelInfo(global::hdsense.PBLabelInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDescLabelInfo &&
            result.descLabelInfo_ != global::hdsense.PBLabelInfo.DefaultInstance) {
            result.descLabelInfo_ = global::hdsense.PBLabelInfo.CreateBuilder(result.descLabelInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.descLabelInfo_ = value;
        }
        result.hasDescLabelInfo = true;
        return this;
      }
      public Builder ClearDescLabelInfo() {
        PrepareBuilder();
        result.hasDescLabelInfo = false;
        result.descLabelInfo_ = null;
        return this;
      }
      
      public bool HasCanvasSize {
       get { return result.hasCanvasSize; }
      }
      public global::hdsense.PBSize CanvasSize {
        get { return result.CanvasSize; }
        set { SetCanvasSize(value); }
      }
      public Builder SetCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = value;
        return this;
      }
      public Builder SetCanvasSize(global::hdsense.PBSize.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCanvasSize = true;
        result.canvasSize_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCanvasSize(global::hdsense.PBSize value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCanvasSize &&
            result.canvasSize_ != global::hdsense.PBSize.DefaultInstance) {
            result.canvasSize_ = global::hdsense.PBSize.CreateBuilder(result.canvasSize_).MergeFrom(value).BuildPartial();
        } else {
          result.canvasSize_ = value;
        }
        result.hasCanvasSize = true;
        return this;
      }
      public Builder ClearCanvasSize() {
        PrepareBuilder();
        result.hasCanvasSize = false;
        result.canvasSize_ = null;
        return this;
      }
      
      public bool HasGuessInfo {
       get { return result.hasGuessInfo; }
      }
      public global::hdsense.PBOpusGuess GuessInfo {
        get { return result.GuessInfo; }
        set { SetGuessInfo(value); }
      }
      public Builder SetGuessInfo(global::hdsense.PBOpusGuess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuessInfo = true;
        result.guessInfo_ = value;
        return this;
      }
      public Builder SetGuessInfo(global::hdsense.PBOpusGuess.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuessInfo = true;
        result.guessInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuessInfo(global::hdsense.PBOpusGuess value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuessInfo &&
            result.guessInfo_ != global::hdsense.PBOpusGuess.DefaultInstance) {
            result.guessInfo_ = global::hdsense.PBOpusGuess.CreateBuilder(result.guessInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.guessInfo_ = value;
        }
        result.hasGuessInfo = true;
        return this;
      }
      public Builder ClearGuessInfo() {
        PrepareBuilder();
        result.hasGuessInfo = false;
        result.guessInfo_ = null;
        return this;
      }
    }
    static PBOpus() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBOpusList : pb::GeneratedMessage<PBOpusList, PBOpusList.Builder> {
    private PBOpusList() { }
    private static readonly PBOpusList defaultInstance = new PBOpusList().MakeReadOnly();
    private static readonly string[] _pBOpusListFieldNames = new string[] { "opuses" };
    private static readonly uint[] _pBOpusListFieldTags = new uint[] { 10 };
    public static PBOpusList DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBOpusList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBOpusList ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBOpusList__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBOpusList, PBOpusList.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBOpusList__FieldAccessorTable; }
    }
    
    public const int OpusesFieldNumber = 1;
    private pbc::PopsicleList<global::hdsense.PBOpus> opuses_ = new pbc::PopsicleList<global::hdsense.PBOpus>();
    public scg::IList<global::hdsense.PBOpus> OpusesList {
      get { return opuses_; }
    }
    public int OpusesCount {
      get { return opuses_.Count; }
    }
    public global::hdsense.PBOpus GetOpuses(int index) {
      return opuses_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::hdsense.PBOpus element in OpusesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBOpusListFieldNames;
      if (opuses_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], opuses_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::hdsense.PBOpus element in OpusesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBOpusList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpusList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpusList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpusList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpusList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpusList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBOpusList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBOpusList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBOpusList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpusList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBOpusList MakeReadOnly() {
      opuses_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBOpusList prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBOpusList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBOpusList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBOpusList result;
      
      private PBOpusList PrepareBuilder() {
        if (resultIsReadOnly) {
          PBOpusList original = result;
          result = new PBOpusList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBOpusList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBOpusList.Descriptor; }
      }
      
      public override PBOpusList DefaultInstanceForType {
        get { return global::hdsense.PBOpusList.DefaultInstance; }
      }
      
      public override PBOpusList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBOpusList) {
          return MergeFrom((PBOpusList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBOpusList other) {
        if (other == global::hdsense.PBOpusList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.opuses_.Count != 0) {
          result.opuses_.Add(other.opuses_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBOpusListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBOpusListFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.opuses_, global::hdsense.PBOpus.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::hdsense.PBOpus> OpusesList {
        get { return PrepareBuilder().opuses_; }
      }
      public int OpusesCount {
        get { return result.OpusesCount; }
      }
      public global::hdsense.PBOpus GetOpuses(int index) {
        return result.GetOpuses(index);
      }
      public Builder SetOpuses(int index, global::hdsense.PBOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opuses_[index] = value;
        return this;
      }
      public Builder SetOpuses(int index, global::hdsense.PBOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.opuses_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOpuses(global::hdsense.PBOpus value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.opuses_.Add(value);
        return this;
      }
      public Builder AddOpuses(global::hdsense.PBOpus.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.opuses_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOpuses(scg::IEnumerable<global::hdsense.PBOpus> values) {
        PrepareBuilder();
        result.opuses_.Add(values);
        return this;
      }
      public Builder ClearOpuses() {
        PrepareBuilder();
        result.opuses_.Clear();
        return this;
      }
    }
    static PBOpusList() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBOpusGuess : pb::GeneratedMessage<PBOpusGuess, PBOpusGuess.Builder> {
    private PBOpusGuess() { }
    private static readonly PBOpusGuess defaultInstance = new PBOpusGuess().MakeReadOnly();
    private static readonly string[] _pBOpusGuessFieldNames = new string[] { "isCorrect" };
    private static readonly uint[] _pBOpusGuessFieldTags = new uint[] { 16 };
    public static PBOpusGuess DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBOpusGuess DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBOpusGuess ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBOpusGuess__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBOpusGuess, PBOpusGuess.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBOpusGuess__FieldAccessorTable; }
    }
    
    public const int IsCorrectFieldNumber = 2;
    private bool hasIsCorrect;
    private bool isCorrect_;
    public bool HasIsCorrect {
      get { return hasIsCorrect; }
    }
    public bool IsCorrect {
      get { return isCorrect_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBOpusGuessFieldNames;
      if (hasIsCorrect) {
        output.WriteBool(2, field_names[0], IsCorrect);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsCorrect) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsCorrect);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBOpusGuess ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpusGuess ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpusGuess ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBOpusGuess ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBOpusGuess ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpusGuess ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBOpusGuess ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBOpusGuess ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBOpusGuess ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBOpusGuess ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBOpusGuess MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBOpusGuess prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBOpusGuess, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBOpusGuess cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBOpusGuess result;
      
      private PBOpusGuess PrepareBuilder() {
        if (resultIsReadOnly) {
          PBOpusGuess original = result;
          result = new PBOpusGuess();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBOpusGuess MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBOpusGuess.Descriptor; }
      }
      
      public override PBOpusGuess DefaultInstanceForType {
        get { return global::hdsense.PBOpusGuess.DefaultInstance; }
      }
      
      public override PBOpusGuess BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBOpusGuess) {
          return MergeFrom((PBOpusGuess) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBOpusGuess other) {
        if (other == global::hdsense.PBOpusGuess.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsCorrect) {
          IsCorrect = other.IsCorrect;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBOpusGuessFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBOpusGuessFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 16: {
              result.hasIsCorrect = input.ReadBool(ref result.isCorrect_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIsCorrect {
        get { return result.hasIsCorrect; }
      }
      public bool IsCorrect {
        get { return result.IsCorrect; }
        set { SetIsCorrect(value); }
      }
      public Builder SetIsCorrect(bool value) {
        PrepareBuilder();
        result.hasIsCorrect = true;
        result.isCorrect_ = value;
        return this;
      }
      public Builder ClearIsCorrect() {
        PrepareBuilder();
        result.hasIsCorrect = false;
        result.isCorrect_ = false;
        return this;
      }
    }
    static PBOpusGuess() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGuessRank : pb::GeneratedMessage<PBGuessRank, PBGuessRank.Builder> {
    private PBGuessRank() { }
    private static readonly PBGuessRank defaultInstance = new PBGuessRank().MakeReadOnly();
    private static readonly string[] _pBGuessRankFieldNames = new string[] { "currency", "earn", "endTime", "guess", "pass", "ranking", "spendTime", "startTime", "totalPlayer", "user" };
    private static readonly uint[] _pBGuessRankFieldTags = new uint[] { 96, 88, 288, 40, 48, 200, 56, 280, 248, 10 };
    public static PBGuessRank DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGuessRank DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGuessRank ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBGuessRank__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGuessRank, PBGuessRank.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBGuessRank__FieldAccessorTable; }
    }
    
    public const int UserFieldNumber = 1;
    private bool hasUser;
    private global::hdsense.PBGameUser user_;
    public bool HasUser {
      get { return hasUser; }
    }
    public global::hdsense.PBGameUser User {
      get { return user_ ?? global::hdsense.PBGameUser.DefaultInstance; }
    }
    
    public const int GuessFieldNumber = 5;
    private bool hasGuess;
    private int guess_;
    public bool HasGuess {
      get { return hasGuess; }
    }
    public int Guess {
      get { return guess_; }
    }
    
    public const int PassFieldNumber = 6;
    private bool hasPass;
    private int pass_;
    public bool HasPass {
      get { return hasPass; }
    }
    public int Pass {
      get { return pass_; }
    }
    
    public const int SpendTimeFieldNumber = 7;
    private bool hasSpendTime;
    private int spendTime_;
    public bool HasSpendTime {
      get { return hasSpendTime; }
    }
    public int SpendTime {
      get { return spendTime_; }
    }
    
    public const int EarnFieldNumber = 11;
    private bool hasEarn;
    private int earn_;
    public bool HasEarn {
      get { return hasEarn; }
    }
    public int Earn {
      get { return earn_; }
    }
    
    public const int CurrencyFieldNumber = 12;
    private bool hasCurrency;
    private global::hdsense.PBGameCurrency currency_ = global::hdsense.PBGameCurrency.Coin;
    public bool HasCurrency {
      get { return hasCurrency; }
    }
    public global::hdsense.PBGameCurrency Currency {
      get { return currency_; }
    }
    
    public const int RankingFieldNumber = 25;
    private bool hasRanking;
    private int ranking_;
    public bool HasRanking {
      get { return hasRanking; }
    }
    public int Ranking {
      get { return ranking_; }
    }
    
    public const int TotalPlayerFieldNumber = 31;
    private bool hasTotalPlayer;
    private int totalPlayer_;
    public bool HasTotalPlayer {
      get { return hasTotalPlayer; }
    }
    public int TotalPlayer {
      get { return totalPlayer_; }
    }
    
    public const int StartTimeFieldNumber = 35;
    private bool hasStartTime;
    private int startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public int StartTime {
      get { return startTime_; }
    }
    
    public const int EndTimeFieldNumber = 36;
    private bool hasEndTime;
    private int endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public int EndTime {
      get { return endTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasUser) {
          if (!User.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGuessRankFieldNames;
      if (hasUser) {
        output.WriteMessage(1, field_names[9], User);
      }
      if (hasGuess) {
        output.WriteInt32(5, field_names[3], Guess);
      }
      if (hasPass) {
        output.WriteInt32(6, field_names[4], Pass);
      }
      if (hasSpendTime) {
        output.WriteInt32(7, field_names[6], SpendTime);
      }
      if (hasEarn) {
        output.WriteInt32(11, field_names[1], Earn);
      }
      if (hasCurrency) {
        output.WriteEnum(12, field_names[0], (int) Currency, Currency);
      }
      if (hasRanking) {
        output.WriteInt32(25, field_names[5], Ranking);
      }
      if (hasTotalPlayer) {
        output.WriteInt32(31, field_names[8], TotalPlayer);
      }
      if (hasStartTime) {
        output.WriteInt32(35, field_names[7], StartTime);
      }
      if (hasEndTime) {
        output.WriteInt32(36, field_names[2], EndTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, User);
        }
        if (hasGuess) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Guess);
        }
        if (hasPass) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Pass);
        }
        if (hasSpendTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, SpendTime);
        }
        if (hasEarn) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, Earn);
        }
        if (hasCurrency) {
          size += pb::CodedOutputStream.ComputeEnumSize(12, (int) Currency);
        }
        if (hasRanking) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, Ranking);
        }
        if (hasTotalPlayer) {
          size += pb::CodedOutputStream.ComputeInt32Size(31, TotalPlayer);
        }
        if (hasStartTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(35, StartTime);
        }
        if (hasEndTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(36, EndTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGuessRank ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGuessRank ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGuessRank ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGuessRank ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGuessRank ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGuessRank ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGuessRank ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGuessRank ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGuessRank ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGuessRank ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGuessRank MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGuessRank prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGuessRank, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGuessRank cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGuessRank result;
      
      private PBGuessRank PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGuessRank original = result;
          result = new PBGuessRank();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGuessRank MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGuessRank.Descriptor; }
      }
      
      public override PBGuessRank DefaultInstanceForType {
        get { return global::hdsense.PBGuessRank.DefaultInstance; }
      }
      
      public override PBGuessRank BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGuessRank) {
          return MergeFrom((PBGuessRank) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGuessRank other) {
        if (other == global::hdsense.PBGuessRank.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUser) {
          MergeUser(other.User);
        }
        if (other.HasGuess) {
          Guess = other.Guess;
        }
        if (other.HasPass) {
          Pass = other.Pass;
        }
        if (other.HasSpendTime) {
          SpendTime = other.SpendTime;
        }
        if (other.HasEarn) {
          Earn = other.Earn;
        }
        if (other.HasCurrency) {
          Currency = other.Currency;
        }
        if (other.HasRanking) {
          Ranking = other.Ranking;
        }
        if (other.HasTotalPlayer) {
          TotalPlayer = other.TotalPlayer;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGuessRankFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGuessRankFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::hdsense.PBGameUser.Builder subBuilder = global::hdsense.PBGameUser.CreateBuilder();
              if (result.hasUser) {
                subBuilder.MergeFrom(User);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              User = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasGuess = input.ReadInt32(ref result.guess_);
              break;
            }
            case 48: {
              result.hasPass = input.ReadInt32(ref result.pass_);
              break;
            }
            case 56: {
              result.hasSpendTime = input.ReadInt32(ref result.spendTime_);
              break;
            }
            case 88: {
              result.hasEarn = input.ReadInt32(ref result.earn_);
              break;
            }
            case 96: {
              object unknown;
              if(input.ReadEnum(ref result.currency_, out unknown)) {
                result.hasCurrency = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(12, (ulong)(int)unknown);
              }
              break;
            }
            case 200: {
              result.hasRanking = input.ReadInt32(ref result.ranking_);
              break;
            }
            case 248: {
              result.hasTotalPlayer = input.ReadInt32(ref result.totalPlayer_);
              break;
            }
            case 280: {
              result.hasStartTime = input.ReadInt32(ref result.startTime_);
              break;
            }
            case 288: {
              result.hasEndTime = input.ReadInt32(ref result.endTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUser {
       get { return result.hasUser; }
      }
      public global::hdsense.PBGameUser User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder SetUser(global::hdsense.PBGameUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUser(global::hdsense.PBGameUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUser &&
            result.user_ != global::hdsense.PBGameUser.DefaultInstance) {
            result.user_ = global::hdsense.PBGameUser.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
        } else {
          result.user_ = value;
        }
        result.hasUser = true;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = null;
        return this;
      }
      
      public bool HasGuess {
        get { return result.hasGuess; }
      }
      public int Guess {
        get { return result.Guess; }
        set { SetGuess(value); }
      }
      public Builder SetGuess(int value) {
        PrepareBuilder();
        result.hasGuess = true;
        result.guess_ = value;
        return this;
      }
      public Builder ClearGuess() {
        PrepareBuilder();
        result.hasGuess = false;
        result.guess_ = 0;
        return this;
      }
      
      public bool HasPass {
        get { return result.hasPass; }
      }
      public int Pass {
        get { return result.Pass; }
        set { SetPass(value); }
      }
      public Builder SetPass(int value) {
        PrepareBuilder();
        result.hasPass = true;
        result.pass_ = value;
        return this;
      }
      public Builder ClearPass() {
        PrepareBuilder();
        result.hasPass = false;
        result.pass_ = 0;
        return this;
      }
      
      public bool HasSpendTime {
        get { return result.hasSpendTime; }
      }
      public int SpendTime {
        get { return result.SpendTime; }
        set { SetSpendTime(value); }
      }
      public Builder SetSpendTime(int value) {
        PrepareBuilder();
        result.hasSpendTime = true;
        result.spendTime_ = value;
        return this;
      }
      public Builder ClearSpendTime() {
        PrepareBuilder();
        result.hasSpendTime = false;
        result.spendTime_ = 0;
        return this;
      }
      
      public bool HasEarn {
        get { return result.hasEarn; }
      }
      public int Earn {
        get { return result.Earn; }
        set { SetEarn(value); }
      }
      public Builder SetEarn(int value) {
        PrepareBuilder();
        result.hasEarn = true;
        result.earn_ = value;
        return this;
      }
      public Builder ClearEarn() {
        PrepareBuilder();
        result.hasEarn = false;
        result.earn_ = 0;
        return this;
      }
      
      public bool HasCurrency {
       get { return result.hasCurrency; }
      }
      public global::hdsense.PBGameCurrency Currency {
        get { return result.Currency; }
        set { SetCurrency(value); }
      }
      public Builder SetCurrency(global::hdsense.PBGameCurrency value) {
        PrepareBuilder();
        result.hasCurrency = true;
        result.currency_ = value;
        return this;
      }
      public Builder ClearCurrency() {
        PrepareBuilder();
        result.hasCurrency = false;
        result.currency_ = global::hdsense.PBGameCurrency.Coin;
        return this;
      }
      
      public bool HasRanking {
        get { return result.hasRanking; }
      }
      public int Ranking {
        get { return result.Ranking; }
        set { SetRanking(value); }
      }
      public Builder SetRanking(int value) {
        PrepareBuilder();
        result.hasRanking = true;
        result.ranking_ = value;
        return this;
      }
      public Builder ClearRanking() {
        PrepareBuilder();
        result.hasRanking = false;
        result.ranking_ = 0;
        return this;
      }
      
      public bool HasTotalPlayer {
        get { return result.hasTotalPlayer; }
      }
      public int TotalPlayer {
        get { return result.TotalPlayer; }
        set { SetTotalPlayer(value); }
      }
      public Builder SetTotalPlayer(int value) {
        PrepareBuilder();
        result.hasTotalPlayer = true;
        result.totalPlayer_ = value;
        return this;
      }
      public Builder ClearTotalPlayer() {
        PrepareBuilder();
        result.hasTotalPlayer = false;
        result.totalPlayer_ = 0;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public int StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(int value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public int EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(int value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0;
        return this;
      }
    }
    static PBGuessRank() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBGuessContest : pb::GeneratedMessage<PBGuessContest, PBGuessContest.Builder> {
    private PBGuessContest() { }
    private static readonly PBGuessContest defaultInstance = new PBGuessContest().MakeReadOnly();
    private static readonly string[] _pBGuessContestFieldNames = new string[] { "contestId", "endTime", "name", "startTime", "state" };
    private static readonly uint[] _pBGuessContestFieldTags = new uint[] { 10, 48, 18, 40, 24 };
    public static PBGuessContest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBGuessContest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBGuessContest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.Opus.internal__static_hdsense_PBGuessContest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBGuessContest, PBGuessContest.Builder> InternalFieldAccessors {
      get { return global::hdsense.Opus.internal__static_hdsense_PBGuessContest__FieldAccessorTable; }
    }
    
    public const int ContestIdFieldNumber = 1;
    private bool hasContestId;
    private string contestId_ = "";
    public bool HasContestId {
      get { return hasContestId; }
    }
    public string ContestId {
      get { return contestId_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int StartTimeFieldNumber = 5;
    private bool hasStartTime;
    private int startTime_;
    public bool HasStartTime {
      get { return hasStartTime; }
    }
    public int StartTime {
      get { return startTime_; }
    }
    
    public const int EndTimeFieldNumber = 6;
    private bool hasEndTime;
    private int endTime_;
    public bool HasEndTime {
      get { return hasEndTime; }
    }
    public int EndTime {
      get { return endTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasContestId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBGuessContestFieldNames;
      if (hasContestId) {
        output.WriteString(1, field_names[0], ContestId);
      }
      if (hasName) {
        output.WriteString(2, field_names[2], Name);
      }
      if (hasState) {
        output.WriteInt32(3, field_names[4], State);
      }
      if (hasStartTime) {
        output.WriteInt32(5, field_names[3], StartTime);
      }
      if (hasEndTime) {
        output.WriteInt32(6, field_names[1], EndTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContestId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ContestId);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, State);
        }
        if (hasStartTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, StartTime);
        }
        if (hasEndTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, EndTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBGuessContest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGuessContest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGuessContest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBGuessContest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBGuessContest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGuessContest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBGuessContest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBGuessContest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBGuessContest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBGuessContest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBGuessContest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBGuessContest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBGuessContest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBGuessContest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBGuessContest result;
      
      private PBGuessContest PrepareBuilder() {
        if (resultIsReadOnly) {
          PBGuessContest original = result;
          result = new PBGuessContest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBGuessContest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBGuessContest.Descriptor; }
      }
      
      public override PBGuessContest DefaultInstanceForType {
        get { return global::hdsense.PBGuessContest.DefaultInstance; }
      }
      
      public override PBGuessContest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBGuessContest) {
          return MergeFrom((PBGuessContest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBGuessContest other) {
        if (other == global::hdsense.PBGuessContest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContestId) {
          ContestId = other.ContestId;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasStartTime) {
          StartTime = other.StartTime;
        }
        if (other.HasEndTime) {
          EndTime = other.EndTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBGuessContestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBGuessContestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasContestId = input.ReadString(ref result.contestId_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 40: {
              result.hasStartTime = input.ReadInt32(ref result.startTime_);
              break;
            }
            case 48: {
              result.hasEndTime = input.ReadInt32(ref result.endTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasContestId {
        get { return result.hasContestId; }
      }
      public string ContestId {
        get { return result.ContestId; }
        set { SetContestId(value); }
      }
      public Builder SetContestId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContestId = true;
        result.contestId_ = value;
        return this;
      }
      public Builder ClearContestId() {
        PrepareBuilder();
        result.hasContestId = false;
        result.contestId_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasStartTime {
        get { return result.hasStartTime; }
      }
      public int StartTime {
        get { return result.StartTime; }
        set { SetStartTime(value); }
      }
      public Builder SetStartTime(int value) {
        PrepareBuilder();
        result.hasStartTime = true;
        result.startTime_ = value;
        return this;
      }
      public Builder ClearStartTime() {
        PrepareBuilder();
        result.hasStartTime = false;
        result.startTime_ = 0;
        return this;
      }
      
      public bool HasEndTime {
        get { return result.hasEndTime; }
      }
      public int EndTime {
        get { return result.EndTime; }
        set { SetEndTime(value); }
      }
      public Builder SetEndTime(int value) {
        PrepareBuilder();
        result.hasEndTime = true;
        result.endTime_ = value;
        return this;
      }
      public Builder ClearEndTime() {
        PrepareBuilder();
        result.hasEndTime = false;
        result.endTime_ = 0;
        return this;
      }
    }
    static PBGuessContest() {
      object.ReferenceEquals(global::hdsense.Opus.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
