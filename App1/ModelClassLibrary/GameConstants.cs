// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace hdsense {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GameConstants {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_hdsense_PBCameraParameter__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBCameraParameter, global::hdsense.PBCameraParameter.Builder> internal__static_hdsense_PBCameraParameter__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_hdsense_PBAdditionalImages__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAdditionalImages, global::hdsense.PBAdditionalImages.Builder> internal__static_hdsense_PBAdditionalImages__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GameConstants() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNHYW1lQ29uc3RhbnRzLnByb3RvEgdoZHNlbnNlIsIDChFQQkNhbWVyYVBh" + 
          "cmFtZXRlchIQCghleHBvc3VyZRgBIAEoCRIQCghhcGVydHVyZRgCIAEoCRIP" + 
          "CgdzaHV0dGVyGAMgASgJEgsKA2lzbxgEIAEoCRIWCg5lY2NvbXBlbnNhdGlv" + 
          "bhgFIAEoCRIRCglsb25naXR1ZGUYBiABKAESEAoIbGF0aXR1ZGUYByABKAES" + 
          "EQoJc2hvb3RNb2RlGAggASgJEhQKDG1ldGVyaW5nTW9kZRgJIAEoCRIMCgRs" + 
          "ZW5zGAogASgJEg0KBWZvY2FsGAsgASgJEg0KBWZsYXNoGAwgASgJEhQKDHdo" + 
          "aXRlQmFsYW5jZRgNIAEoCRIRCglmb2N1c01vZGUYDiABKAkSEAoIY29udHJh" + 
          "c3QYDyABKAkSEQoJc2hhcnBuZXNzGBAgASgJEhIKCnNhdHVyYXRpb24YESAB" + 
          "KAkSEQoJY29sb3JUb25lGBIgASgJEhEKCWRyaXZlTW9kZRgTIAEoCRIRCglt" + 
          "b2RlbE5hbWUYHiABKAkSFwoPY2FtZXJhTW9kZWxOYW1lGB8gASgJEhAKCGxv" + 
          "Y2F0aW9uGCAgASgJEhMKC2lzUGhvbmVUeXBlGCEgASgIIlwKElBCQWRkaXRp" + 
          "b25hbEltYWdlcxIQCghpbWFnZVVybBgBIAIoCRIVCg10aHVtYkltYWdlVXJs" + 
          "GAIgASgJEg0KBXdpZHRoGAogASgCEg4KBmhlaWdodBgLIAEoAiotCgpQQldv" + 
          "cmRUeXBlEgoKBlNZU1RFTRABEgoKBkNVU1RPTRACEgcKA0hPVBADKhgKClBC" + 
          "V2FsbFR5cGUSCgoGT3B1c2VzEAEqbwoNUEJNZXNzYWdlVHlwZRIICgRUZXh0" + 
          "EAASEwoPTG9jYXRpb25SZXF1ZXN0EAESFAoQTG9jYXRpb25SZXNwb25zZRAC" + 
          "EggKBERyYXcQBBIJCgVJbWFnZRAFEgkKBVZvaWNlEAYSCQoFdmlkZW8QBypQ" + 
          "Cg9QQkNvbnRlc3RTdGF0dXMSCwoHUGVuZGluZxABEgsKB1J1bm5pbmcQAhIK" + 
          "CgZQYXNzZWQQAxIKCgZSZXN1bHQQBBILCgdEZWxldGVkEAoqMAoMR2FtZUNo" + 
          "YXRUeXBlEg4KCkNIQVRfR1JPVVAQABIQCgxDSEFUX1BSSVZBVEUQASpjChJQ" + 
          "Qk9wdXNDYXRlZ29yeVR5cGUSEQoNRFJBV19DQVRFR09SWRAAEhEKDVNJTkdf" + 
          "Q0FURUdPUlkQARITCg9BU0tfUFNfQ0FURUdPUlkQAhISCg5JTUFHRV9DQVRF" + 
          "R09SWRADKoECCg5QQk9wdXNTb2RvVHlwZRIRCg1TT0RPX1JFTlhJQU5HEAAS" + 
          "EQoNU09ET19GRU5HR1VBThABEg4KClNPRE9fSklTSEkQAhIPCgtTT0RPX0pJ" + 
          "TkdXVRADEg8KC1NPRE9fTFZYSU5HEAQSEQoNU09ET19TSEVOR0hVTxAFEg8K" + 
          "C1NPRE9fRE9OR1dVEAYSDgoKU09ET19aSElXVRAHEg4KClNPRE9fWUlTSFUQ" + 
          "CBIPCgtTT0RPX1NIT1VKSRAJEhEKDVNPRE9fQ0hVQU5HWUkQChIOCgpTT0RP" + 
          "X1dFSUpVEAsSDgoKU09ET19IVU5MSRAMEg8KC1NPRE9fSklFUEFJEA1CQgor" + 
          "Y29tLmhkc2Vuc2UubmV0d29yay5nYW1lLnByb3RvY29sLmNvbnN0YW50c0IT" + 
          "R2FtZUNvbnN0YW50c1Byb3Rvcw==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_hdsense_PBCameraParameter__Descriptor = Descriptor.MessageTypes[0];
        internal__static_hdsense_PBCameraParameter__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBCameraParameter, global::hdsense.PBCameraParameter.Builder>(internal__static_hdsense_PBCameraParameter__Descriptor,
                new string[] { "Exposure", "Aperture", "Shutter", "Iso", "Eccompensation", "Longitude", "Latitude", "ShootMode", "MeteringMode", "Lens", "Focal", "Flash", "WhiteBalance", "FocusMode", "Contrast", "Sharpness", "Saturation", "ColorTone", "DriveMode", "ModelName", "CameraModelName", "Location", "IsPhoneType", });
        internal__static_hdsense_PBAdditionalImages__Descriptor = Descriptor.MessageTypes[1];
        internal__static_hdsense_PBAdditionalImages__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::hdsense.PBAdditionalImages, global::hdsense.PBAdditionalImages.Builder>(internal__static_hdsense_PBAdditionalImages__Descriptor,
                new string[] { "ImageUrl", "ThumbImageUrl", "Width", "Height", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum PBWordType {
    SYSTEM = 1,
    CUSTOM = 2,
    HOT = 3,
  }
  
  public enum PBWallType {
    Opuses = 1,
  }
  
  public enum PBMessageType {
    Text = 0,
    LocationRequest = 1,
    LocationResponse = 2,
    Draw = 4,
    Image = 5,
    Voice = 6,
    video = 7,
  }
  
  public enum PBContestStatus {
    Pending = 1,
    Running = 2,
    Passed = 3,
    Result = 4,
    Deleted = 10,
  }
  
  public enum GameChatType {
    CHAT_GROUP = 0,
    CHAT_PRIVATE = 1,
  }
  
  public enum PBOpusCategoryType {
    DRAW_CATEGORY = 0,
    SING_CATEGORY = 1,
    ASK_PS_CATEGORY = 2,
    IMAGE_CATEGORY = 3,
  }
  
  public enum PBOpusSodoType {
    SODO_RENXIANG = 0,
    SODO_FENGGUAN = 1,
    SODO_JISHI = 2,
    SODO_JINGWU = 3,
    SODO_LVXING = 4,
    SODO_SHENGHUO = 5,
    SODO_DONGWU = 6,
    SODO_ZHIWU = 7,
    SODO_YISHU = 8,
    SODO_SHOUJI = 9,
    SODO_CHUANGYI = 10,
    SODO_WEIJU = 11,
    SODO_HUNLI = 12,
    SODO_JIEPAI = 13,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBCameraParameter : pb::GeneratedMessage<PBCameraParameter, PBCameraParameter.Builder> {
    private PBCameraParameter() { }
    private static readonly PBCameraParameter defaultInstance = new PBCameraParameter().MakeReadOnly();
    private static readonly string[] _pBCameraParameterFieldNames = new string[] { "aperture", "cameraModelName", "colorTone", "contrast", "driveMode", "eccompensation", "exposure", "flash", "focal", "focusMode", "isPhoneType", "iso", "latitude", "lens", "location", "longitude", "meteringMode", "modelName", "saturation", "sharpness", "shootMode", "shutter", "whiteBalance" };
    private static readonly uint[] _pBCameraParameterFieldTags = new uint[] { 18, 250, 146, 122, 154, 42, 10, 98, 90, 114, 264, 34, 57, 82, 258, 49, 74, 242, 138, 130, 66, 26, 106 };
    public static PBCameraParameter DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBCameraParameter DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBCameraParameter ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameConstants.internal__static_hdsense_PBCameraParameter__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBCameraParameter, PBCameraParameter.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameConstants.internal__static_hdsense_PBCameraParameter__FieldAccessorTable; }
    }
    
    public const int ExposureFieldNumber = 1;
    private bool hasExposure;
    private string exposure_ = "";
    public bool HasExposure {
      get { return hasExposure; }
    }
    public string Exposure {
      get { return exposure_; }
    }
    
    public const int ApertureFieldNumber = 2;
    private bool hasAperture;
    private string aperture_ = "";
    public bool HasAperture {
      get { return hasAperture; }
    }
    public string Aperture {
      get { return aperture_; }
    }
    
    public const int ShutterFieldNumber = 3;
    private bool hasShutter;
    private string shutter_ = "";
    public bool HasShutter {
      get { return hasShutter; }
    }
    public string Shutter {
      get { return shutter_; }
    }
    
    public const int IsoFieldNumber = 4;
    private bool hasIso;
    private string iso_ = "";
    public bool HasIso {
      get { return hasIso; }
    }
    public string Iso {
      get { return iso_; }
    }
    
    public const int EccompensationFieldNumber = 5;
    private bool hasEccompensation;
    private string eccompensation_ = "";
    public bool HasEccompensation {
      get { return hasEccompensation; }
    }
    public string Eccompensation {
      get { return eccompensation_; }
    }
    
    public const int LongitudeFieldNumber = 6;
    private bool hasLongitude;
    private double longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public double Longitude {
      get { return longitude_; }
    }
    
    public const int LatitudeFieldNumber = 7;
    private bool hasLatitude;
    private double latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public double Latitude {
      get { return latitude_; }
    }
    
    public const int ShootModeFieldNumber = 8;
    private bool hasShootMode;
    private string shootMode_ = "";
    public bool HasShootMode {
      get { return hasShootMode; }
    }
    public string ShootMode {
      get { return shootMode_; }
    }
    
    public const int MeteringModeFieldNumber = 9;
    private bool hasMeteringMode;
    private string meteringMode_ = "";
    public bool HasMeteringMode {
      get { return hasMeteringMode; }
    }
    public string MeteringMode {
      get { return meteringMode_; }
    }
    
    public const int LensFieldNumber = 10;
    private bool hasLens;
    private string lens_ = "";
    public bool HasLens {
      get { return hasLens; }
    }
    public string Lens {
      get { return lens_; }
    }
    
    public const int FocalFieldNumber = 11;
    private bool hasFocal;
    private string focal_ = "";
    public bool HasFocal {
      get { return hasFocal; }
    }
    public string Focal {
      get { return focal_; }
    }
    
    public const int FlashFieldNumber = 12;
    private bool hasFlash;
    private string flash_ = "";
    public bool HasFlash {
      get { return hasFlash; }
    }
    public string Flash {
      get { return flash_; }
    }
    
    public const int WhiteBalanceFieldNumber = 13;
    private bool hasWhiteBalance;
    private string whiteBalance_ = "";
    public bool HasWhiteBalance {
      get { return hasWhiteBalance; }
    }
    public string WhiteBalance {
      get { return whiteBalance_; }
    }
    
    public const int FocusModeFieldNumber = 14;
    private bool hasFocusMode;
    private string focusMode_ = "";
    public bool HasFocusMode {
      get { return hasFocusMode; }
    }
    public string FocusMode {
      get { return focusMode_; }
    }
    
    public const int ContrastFieldNumber = 15;
    private bool hasContrast;
    private string contrast_ = "";
    public bool HasContrast {
      get { return hasContrast; }
    }
    public string Contrast {
      get { return contrast_; }
    }
    
    public const int SharpnessFieldNumber = 16;
    private bool hasSharpness;
    private string sharpness_ = "";
    public bool HasSharpness {
      get { return hasSharpness; }
    }
    public string Sharpness {
      get { return sharpness_; }
    }
    
    public const int SaturationFieldNumber = 17;
    private bool hasSaturation;
    private string saturation_ = "";
    public bool HasSaturation {
      get { return hasSaturation; }
    }
    public string Saturation {
      get { return saturation_; }
    }
    
    public const int ColorToneFieldNumber = 18;
    private bool hasColorTone;
    private string colorTone_ = "";
    public bool HasColorTone {
      get { return hasColorTone; }
    }
    public string ColorTone {
      get { return colorTone_; }
    }
    
    public const int DriveModeFieldNumber = 19;
    private bool hasDriveMode;
    private string driveMode_ = "";
    public bool HasDriveMode {
      get { return hasDriveMode; }
    }
    public string DriveMode {
      get { return driveMode_; }
    }
    
    public const int ModelNameFieldNumber = 30;
    private bool hasModelName;
    private string modelName_ = "";
    public bool HasModelName {
      get { return hasModelName; }
    }
    public string ModelName {
      get { return modelName_; }
    }
    
    public const int CameraModelNameFieldNumber = 31;
    private bool hasCameraModelName;
    private string cameraModelName_ = "";
    public bool HasCameraModelName {
      get { return hasCameraModelName; }
    }
    public string CameraModelName {
      get { return cameraModelName_; }
    }
    
    public const int LocationFieldNumber = 32;
    private bool hasLocation;
    private string location_ = "";
    public bool HasLocation {
      get { return hasLocation; }
    }
    public string Location {
      get { return location_; }
    }
    
    public const int IsPhoneTypeFieldNumber = 33;
    private bool hasIsPhoneType;
    private bool isPhoneType_;
    public bool HasIsPhoneType {
      get { return hasIsPhoneType; }
    }
    public bool IsPhoneType {
      get { return isPhoneType_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBCameraParameterFieldNames;
      if (hasExposure) {
        output.WriteString(1, field_names[6], Exposure);
      }
      if (hasAperture) {
        output.WriteString(2, field_names[0], Aperture);
      }
      if (hasShutter) {
        output.WriteString(3, field_names[21], Shutter);
      }
      if (hasIso) {
        output.WriteString(4, field_names[11], Iso);
      }
      if (hasEccompensation) {
        output.WriteString(5, field_names[5], Eccompensation);
      }
      if (hasLongitude) {
        output.WriteDouble(6, field_names[15], Longitude);
      }
      if (hasLatitude) {
        output.WriteDouble(7, field_names[12], Latitude);
      }
      if (hasShootMode) {
        output.WriteString(8, field_names[20], ShootMode);
      }
      if (hasMeteringMode) {
        output.WriteString(9, field_names[16], MeteringMode);
      }
      if (hasLens) {
        output.WriteString(10, field_names[13], Lens);
      }
      if (hasFocal) {
        output.WriteString(11, field_names[8], Focal);
      }
      if (hasFlash) {
        output.WriteString(12, field_names[7], Flash);
      }
      if (hasWhiteBalance) {
        output.WriteString(13, field_names[22], WhiteBalance);
      }
      if (hasFocusMode) {
        output.WriteString(14, field_names[9], FocusMode);
      }
      if (hasContrast) {
        output.WriteString(15, field_names[3], Contrast);
      }
      if (hasSharpness) {
        output.WriteString(16, field_names[19], Sharpness);
      }
      if (hasSaturation) {
        output.WriteString(17, field_names[18], Saturation);
      }
      if (hasColorTone) {
        output.WriteString(18, field_names[2], ColorTone);
      }
      if (hasDriveMode) {
        output.WriteString(19, field_names[4], DriveMode);
      }
      if (hasModelName) {
        output.WriteString(30, field_names[17], ModelName);
      }
      if (hasCameraModelName) {
        output.WriteString(31, field_names[1], CameraModelName);
      }
      if (hasLocation) {
        output.WriteString(32, field_names[14], Location);
      }
      if (hasIsPhoneType) {
        output.WriteBool(33, field_names[10], IsPhoneType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasExposure) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Exposure);
        }
        if (hasAperture) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Aperture);
        }
        if (hasShutter) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Shutter);
        }
        if (hasIso) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Iso);
        }
        if (hasEccompensation) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Eccompensation);
        }
        if (hasLongitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, Longitude);
        }
        if (hasLatitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, Latitude);
        }
        if (hasShootMode) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ShootMode);
        }
        if (hasMeteringMode) {
          size += pb::CodedOutputStream.ComputeStringSize(9, MeteringMode);
        }
        if (hasLens) {
          size += pb::CodedOutputStream.ComputeStringSize(10, Lens);
        }
        if (hasFocal) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Focal);
        }
        if (hasFlash) {
          size += pb::CodedOutputStream.ComputeStringSize(12, Flash);
        }
        if (hasWhiteBalance) {
          size += pb::CodedOutputStream.ComputeStringSize(13, WhiteBalance);
        }
        if (hasFocusMode) {
          size += pb::CodedOutputStream.ComputeStringSize(14, FocusMode);
        }
        if (hasContrast) {
          size += pb::CodedOutputStream.ComputeStringSize(15, Contrast);
        }
        if (hasSharpness) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Sharpness);
        }
        if (hasSaturation) {
          size += pb::CodedOutputStream.ComputeStringSize(17, Saturation);
        }
        if (hasColorTone) {
          size += pb::CodedOutputStream.ComputeStringSize(18, ColorTone);
        }
        if (hasDriveMode) {
          size += pb::CodedOutputStream.ComputeStringSize(19, DriveMode);
        }
        if (hasModelName) {
          size += pb::CodedOutputStream.ComputeStringSize(30, ModelName);
        }
        if (hasCameraModelName) {
          size += pb::CodedOutputStream.ComputeStringSize(31, CameraModelName);
        }
        if (hasLocation) {
          size += pb::CodedOutputStream.ComputeStringSize(32, Location);
        }
        if (hasIsPhoneType) {
          size += pb::CodedOutputStream.ComputeBoolSize(33, IsPhoneType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBCameraParameter ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBCameraParameter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBCameraParameter ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBCameraParameter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBCameraParameter ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBCameraParameter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBCameraParameter ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBCameraParameter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBCameraParameter ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBCameraParameter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBCameraParameter MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBCameraParameter prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBCameraParameter, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBCameraParameter cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBCameraParameter result;
      
      private PBCameraParameter PrepareBuilder() {
        if (resultIsReadOnly) {
          PBCameraParameter original = result;
          result = new PBCameraParameter();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBCameraParameter MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBCameraParameter.Descriptor; }
      }
      
      public override PBCameraParameter DefaultInstanceForType {
        get { return global::hdsense.PBCameraParameter.DefaultInstance; }
      }
      
      public override PBCameraParameter BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBCameraParameter) {
          return MergeFrom((PBCameraParameter) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBCameraParameter other) {
        if (other == global::hdsense.PBCameraParameter.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasExposure) {
          Exposure = other.Exposure;
        }
        if (other.HasAperture) {
          Aperture = other.Aperture;
        }
        if (other.HasShutter) {
          Shutter = other.Shutter;
        }
        if (other.HasIso) {
          Iso = other.Iso;
        }
        if (other.HasEccompensation) {
          Eccompensation = other.Eccompensation;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasShootMode) {
          ShootMode = other.ShootMode;
        }
        if (other.HasMeteringMode) {
          MeteringMode = other.MeteringMode;
        }
        if (other.HasLens) {
          Lens = other.Lens;
        }
        if (other.HasFocal) {
          Focal = other.Focal;
        }
        if (other.HasFlash) {
          Flash = other.Flash;
        }
        if (other.HasWhiteBalance) {
          WhiteBalance = other.WhiteBalance;
        }
        if (other.HasFocusMode) {
          FocusMode = other.FocusMode;
        }
        if (other.HasContrast) {
          Contrast = other.Contrast;
        }
        if (other.HasSharpness) {
          Sharpness = other.Sharpness;
        }
        if (other.HasSaturation) {
          Saturation = other.Saturation;
        }
        if (other.HasColorTone) {
          ColorTone = other.ColorTone;
        }
        if (other.HasDriveMode) {
          DriveMode = other.DriveMode;
        }
        if (other.HasModelName) {
          ModelName = other.ModelName;
        }
        if (other.HasCameraModelName) {
          CameraModelName = other.CameraModelName;
        }
        if (other.HasLocation) {
          Location = other.Location;
        }
        if (other.HasIsPhoneType) {
          IsPhoneType = other.IsPhoneType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBCameraParameterFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBCameraParameterFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasExposure = input.ReadString(ref result.exposure_);
              break;
            }
            case 18: {
              result.hasAperture = input.ReadString(ref result.aperture_);
              break;
            }
            case 26: {
              result.hasShutter = input.ReadString(ref result.shutter_);
              break;
            }
            case 34: {
              result.hasIso = input.ReadString(ref result.iso_);
              break;
            }
            case 42: {
              result.hasEccompensation = input.ReadString(ref result.eccompensation_);
              break;
            }
            case 49: {
              result.hasLongitude = input.ReadDouble(ref result.longitude_);
              break;
            }
            case 57: {
              result.hasLatitude = input.ReadDouble(ref result.latitude_);
              break;
            }
            case 66: {
              result.hasShootMode = input.ReadString(ref result.shootMode_);
              break;
            }
            case 74: {
              result.hasMeteringMode = input.ReadString(ref result.meteringMode_);
              break;
            }
            case 82: {
              result.hasLens = input.ReadString(ref result.lens_);
              break;
            }
            case 90: {
              result.hasFocal = input.ReadString(ref result.focal_);
              break;
            }
            case 98: {
              result.hasFlash = input.ReadString(ref result.flash_);
              break;
            }
            case 106: {
              result.hasWhiteBalance = input.ReadString(ref result.whiteBalance_);
              break;
            }
            case 114: {
              result.hasFocusMode = input.ReadString(ref result.focusMode_);
              break;
            }
            case 122: {
              result.hasContrast = input.ReadString(ref result.contrast_);
              break;
            }
            case 130: {
              result.hasSharpness = input.ReadString(ref result.sharpness_);
              break;
            }
            case 138: {
              result.hasSaturation = input.ReadString(ref result.saturation_);
              break;
            }
            case 146: {
              result.hasColorTone = input.ReadString(ref result.colorTone_);
              break;
            }
            case 154: {
              result.hasDriveMode = input.ReadString(ref result.driveMode_);
              break;
            }
            case 242: {
              result.hasModelName = input.ReadString(ref result.modelName_);
              break;
            }
            case 250: {
              result.hasCameraModelName = input.ReadString(ref result.cameraModelName_);
              break;
            }
            case 258: {
              result.hasLocation = input.ReadString(ref result.location_);
              break;
            }
            case 264: {
              result.hasIsPhoneType = input.ReadBool(ref result.isPhoneType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasExposure {
        get { return result.hasExposure; }
      }
      public string Exposure {
        get { return result.Exposure; }
        set { SetExposure(value); }
      }
      public Builder SetExposure(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExposure = true;
        result.exposure_ = value;
        return this;
      }
      public Builder ClearExposure() {
        PrepareBuilder();
        result.hasExposure = false;
        result.exposure_ = "";
        return this;
      }
      
      public bool HasAperture {
        get { return result.hasAperture; }
      }
      public string Aperture {
        get { return result.Aperture; }
        set { SetAperture(value); }
      }
      public Builder SetAperture(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAperture = true;
        result.aperture_ = value;
        return this;
      }
      public Builder ClearAperture() {
        PrepareBuilder();
        result.hasAperture = false;
        result.aperture_ = "";
        return this;
      }
      
      public bool HasShutter {
        get { return result.hasShutter; }
      }
      public string Shutter {
        get { return result.Shutter; }
        set { SetShutter(value); }
      }
      public Builder SetShutter(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShutter = true;
        result.shutter_ = value;
        return this;
      }
      public Builder ClearShutter() {
        PrepareBuilder();
        result.hasShutter = false;
        result.shutter_ = "";
        return this;
      }
      
      public bool HasIso {
        get { return result.hasIso; }
      }
      public string Iso {
        get { return result.Iso; }
        set { SetIso(value); }
      }
      public Builder SetIso(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIso = true;
        result.iso_ = value;
        return this;
      }
      public Builder ClearIso() {
        PrepareBuilder();
        result.hasIso = false;
        result.iso_ = "";
        return this;
      }
      
      public bool HasEccompensation {
        get { return result.hasEccompensation; }
      }
      public string Eccompensation {
        get { return result.Eccompensation; }
        set { SetEccompensation(value); }
      }
      public Builder SetEccompensation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEccompensation = true;
        result.eccompensation_ = value;
        return this;
      }
      public Builder ClearEccompensation() {
        PrepareBuilder();
        result.hasEccompensation = false;
        result.eccompensation_ = "";
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public double Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(double value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public double Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(double value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      public bool HasShootMode {
        get { return result.hasShootMode; }
      }
      public string ShootMode {
        get { return result.ShootMode; }
        set { SetShootMode(value); }
      }
      public Builder SetShootMode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShootMode = true;
        result.shootMode_ = value;
        return this;
      }
      public Builder ClearShootMode() {
        PrepareBuilder();
        result.hasShootMode = false;
        result.shootMode_ = "";
        return this;
      }
      
      public bool HasMeteringMode {
        get { return result.hasMeteringMode; }
      }
      public string MeteringMode {
        get { return result.MeteringMode; }
        set { SetMeteringMode(value); }
      }
      public Builder SetMeteringMode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMeteringMode = true;
        result.meteringMode_ = value;
        return this;
      }
      public Builder ClearMeteringMode() {
        PrepareBuilder();
        result.hasMeteringMode = false;
        result.meteringMode_ = "";
        return this;
      }
      
      public bool HasLens {
        get { return result.hasLens; }
      }
      public string Lens {
        get { return result.Lens; }
        set { SetLens(value); }
      }
      public Builder SetLens(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLens = true;
        result.lens_ = value;
        return this;
      }
      public Builder ClearLens() {
        PrepareBuilder();
        result.hasLens = false;
        result.lens_ = "";
        return this;
      }
      
      public bool HasFocal {
        get { return result.hasFocal; }
      }
      public string Focal {
        get { return result.Focal; }
        set { SetFocal(value); }
      }
      public Builder SetFocal(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFocal = true;
        result.focal_ = value;
        return this;
      }
      public Builder ClearFocal() {
        PrepareBuilder();
        result.hasFocal = false;
        result.focal_ = "";
        return this;
      }
      
      public bool HasFlash {
        get { return result.hasFlash; }
      }
      public string Flash {
        get { return result.Flash; }
        set { SetFlash(value); }
      }
      public Builder SetFlash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFlash = true;
        result.flash_ = value;
        return this;
      }
      public Builder ClearFlash() {
        PrepareBuilder();
        result.hasFlash = false;
        result.flash_ = "";
        return this;
      }
      
      public bool HasWhiteBalance {
        get { return result.hasWhiteBalance; }
      }
      public string WhiteBalance {
        get { return result.WhiteBalance; }
        set { SetWhiteBalance(value); }
      }
      public Builder SetWhiteBalance(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWhiteBalance = true;
        result.whiteBalance_ = value;
        return this;
      }
      public Builder ClearWhiteBalance() {
        PrepareBuilder();
        result.hasWhiteBalance = false;
        result.whiteBalance_ = "";
        return this;
      }
      
      public bool HasFocusMode {
        get { return result.hasFocusMode; }
      }
      public string FocusMode {
        get { return result.FocusMode; }
        set { SetFocusMode(value); }
      }
      public Builder SetFocusMode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFocusMode = true;
        result.focusMode_ = value;
        return this;
      }
      public Builder ClearFocusMode() {
        PrepareBuilder();
        result.hasFocusMode = false;
        result.focusMode_ = "";
        return this;
      }
      
      public bool HasContrast {
        get { return result.hasContrast; }
      }
      public string Contrast {
        get { return result.Contrast; }
        set { SetContrast(value); }
      }
      public Builder SetContrast(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContrast = true;
        result.contrast_ = value;
        return this;
      }
      public Builder ClearContrast() {
        PrepareBuilder();
        result.hasContrast = false;
        result.contrast_ = "";
        return this;
      }
      
      public bool HasSharpness {
        get { return result.hasSharpness; }
      }
      public string Sharpness {
        get { return result.Sharpness; }
        set { SetSharpness(value); }
      }
      public Builder SetSharpness(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSharpness = true;
        result.sharpness_ = value;
        return this;
      }
      public Builder ClearSharpness() {
        PrepareBuilder();
        result.hasSharpness = false;
        result.sharpness_ = "";
        return this;
      }
      
      public bool HasSaturation {
        get { return result.hasSaturation; }
      }
      public string Saturation {
        get { return result.Saturation; }
        set { SetSaturation(value); }
      }
      public Builder SetSaturation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSaturation = true;
        result.saturation_ = value;
        return this;
      }
      public Builder ClearSaturation() {
        PrepareBuilder();
        result.hasSaturation = false;
        result.saturation_ = "";
        return this;
      }
      
      public bool HasColorTone {
        get { return result.hasColorTone; }
      }
      public string ColorTone {
        get { return result.ColorTone; }
        set { SetColorTone(value); }
      }
      public Builder SetColorTone(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasColorTone = true;
        result.colorTone_ = value;
        return this;
      }
      public Builder ClearColorTone() {
        PrepareBuilder();
        result.hasColorTone = false;
        result.colorTone_ = "";
        return this;
      }
      
      public bool HasDriveMode {
        get { return result.hasDriveMode; }
      }
      public string DriveMode {
        get { return result.DriveMode; }
        set { SetDriveMode(value); }
      }
      public Builder SetDriveMode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDriveMode = true;
        result.driveMode_ = value;
        return this;
      }
      public Builder ClearDriveMode() {
        PrepareBuilder();
        result.hasDriveMode = false;
        result.driveMode_ = "";
        return this;
      }
      
      public bool HasModelName {
        get { return result.hasModelName; }
      }
      public string ModelName {
        get { return result.ModelName; }
        set { SetModelName(value); }
      }
      public Builder SetModelName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasModelName = true;
        result.modelName_ = value;
        return this;
      }
      public Builder ClearModelName() {
        PrepareBuilder();
        result.hasModelName = false;
        result.modelName_ = "";
        return this;
      }
      
      public bool HasCameraModelName {
        get { return result.hasCameraModelName; }
      }
      public string CameraModelName {
        get { return result.CameraModelName; }
        set { SetCameraModelName(value); }
      }
      public Builder SetCameraModelName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCameraModelName = true;
        result.cameraModelName_ = value;
        return this;
      }
      public Builder ClearCameraModelName() {
        PrepareBuilder();
        result.hasCameraModelName = false;
        result.cameraModelName_ = "";
        return this;
      }
      
      public bool HasLocation {
        get { return result.hasLocation; }
      }
      public string Location {
        get { return result.Location; }
        set { SetLocation(value); }
      }
      public Builder SetLocation(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLocation = true;
        result.location_ = value;
        return this;
      }
      public Builder ClearLocation() {
        PrepareBuilder();
        result.hasLocation = false;
        result.location_ = "";
        return this;
      }
      
      public bool HasIsPhoneType {
        get { return result.hasIsPhoneType; }
      }
      public bool IsPhoneType {
        get { return result.IsPhoneType; }
        set { SetIsPhoneType(value); }
      }
      public Builder SetIsPhoneType(bool value) {
        PrepareBuilder();
        result.hasIsPhoneType = true;
        result.isPhoneType_ = value;
        return this;
      }
      public Builder ClearIsPhoneType() {
        PrepareBuilder();
        result.hasIsPhoneType = false;
        result.isPhoneType_ = false;
        return this;
      }
    }
    static PBCameraParameter() {
      object.ReferenceEquals(global::hdsense.GameConstants.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PBAdditionalImages : pb::GeneratedMessage<PBAdditionalImages, PBAdditionalImages.Builder> {
    private PBAdditionalImages() { }
    private static readonly PBAdditionalImages defaultInstance = new PBAdditionalImages().MakeReadOnly();
    private static readonly string[] _pBAdditionalImagesFieldNames = new string[] { "height", "imageUrl", "thumbImageUrl", "width" };
    private static readonly uint[] _pBAdditionalImagesFieldTags = new uint[] { 93, 10, 18, 85 };
    public static PBAdditionalImages DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PBAdditionalImages DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PBAdditionalImages ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::hdsense.GameConstants.internal__static_hdsense_PBAdditionalImages__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PBAdditionalImages, PBAdditionalImages.Builder> InternalFieldAccessors {
      get { return global::hdsense.GameConstants.internal__static_hdsense_PBAdditionalImages__FieldAccessorTable; }
    }
    
    public const int ImageUrlFieldNumber = 1;
    private bool hasImageUrl;
    private string imageUrl_ = "";
    public bool HasImageUrl {
      get { return hasImageUrl; }
    }
    public string ImageUrl {
      get { return imageUrl_; }
    }
    
    public const int ThumbImageUrlFieldNumber = 2;
    private bool hasThumbImageUrl;
    private string thumbImageUrl_ = "";
    public bool HasThumbImageUrl {
      get { return hasThumbImageUrl; }
    }
    public string ThumbImageUrl {
      get { return thumbImageUrl_; }
    }
    
    public const int WidthFieldNumber = 10;
    private bool hasWidth;
    private float width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public float Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 11;
    private bool hasHeight;
    private float height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public float Height {
      get { return height_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasImageUrl) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pBAdditionalImagesFieldNames;
      if (hasImageUrl) {
        output.WriteString(1, field_names[1], ImageUrl);
      }
      if (hasThumbImageUrl) {
        output.WriteString(2, field_names[2], ThumbImageUrl);
      }
      if (hasWidth) {
        output.WriteFloat(10, field_names[3], Width);
      }
      if (hasHeight) {
        output.WriteFloat(11, field_names[0], Height);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ImageUrl);
        }
        if (hasThumbImageUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ThumbImageUrl);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeFloatSize(10, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeFloatSize(11, Height);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PBAdditionalImages ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAdditionalImages ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAdditionalImages ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PBAdditionalImages ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PBAdditionalImages ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAdditionalImages ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PBAdditionalImages ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PBAdditionalImages ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PBAdditionalImages ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PBAdditionalImages ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PBAdditionalImages MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PBAdditionalImages prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PBAdditionalImages, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PBAdditionalImages cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PBAdditionalImages result;
      
      private PBAdditionalImages PrepareBuilder() {
        if (resultIsReadOnly) {
          PBAdditionalImages original = result;
          result = new PBAdditionalImages();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PBAdditionalImages MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::hdsense.PBAdditionalImages.Descriptor; }
      }
      
      public override PBAdditionalImages DefaultInstanceForType {
        get { return global::hdsense.PBAdditionalImages.DefaultInstance; }
      }
      
      public override PBAdditionalImages BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PBAdditionalImages) {
          return MergeFrom((PBAdditionalImages) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PBAdditionalImages other) {
        if (other == global::hdsense.PBAdditionalImages.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasImageUrl) {
          ImageUrl = other.ImageUrl;
        }
        if (other.HasThumbImageUrl) {
          ThumbImageUrl = other.ThumbImageUrl;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pBAdditionalImagesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pBAdditionalImagesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasImageUrl = input.ReadString(ref result.imageUrl_);
              break;
            }
            case 18: {
              result.hasThumbImageUrl = input.ReadString(ref result.thumbImageUrl_);
              break;
            }
            case 85: {
              result.hasWidth = input.ReadFloat(ref result.width_);
              break;
            }
            case 93: {
              result.hasHeight = input.ReadFloat(ref result.height_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasImageUrl {
        get { return result.hasImageUrl; }
      }
      public string ImageUrl {
        get { return result.ImageUrl; }
        set { SetImageUrl(value); }
      }
      public Builder SetImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageUrl = true;
        result.imageUrl_ = value;
        return this;
      }
      public Builder ClearImageUrl() {
        PrepareBuilder();
        result.hasImageUrl = false;
        result.imageUrl_ = "";
        return this;
      }
      
      public bool HasThumbImageUrl {
        get { return result.hasThumbImageUrl; }
      }
      public string ThumbImageUrl {
        get { return result.ThumbImageUrl; }
        set { SetThumbImageUrl(value); }
      }
      public Builder SetThumbImageUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasThumbImageUrl = true;
        result.thumbImageUrl_ = value;
        return this;
      }
      public Builder ClearThumbImageUrl() {
        PrepareBuilder();
        result.hasThumbImageUrl = false;
        result.thumbImageUrl_ = "";
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public float Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(float value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0F;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public float Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(float value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0F;
        return this;
      }
    }
    static PBAdditionalImages() {
      object.ReferenceEquals(global::hdsense.GameConstants.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
